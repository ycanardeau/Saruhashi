// Code from: https://source.dot.net/#System.Windows.Forms/System.SR.cs,b31ecb5e5b3556b0

// <auto-generated>

namespace Aigamo.Saruhashi;

internal static partial class SR
{
    private static global::System.Resources.ResourceManager s_resourceManager;
    internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(SR)));
    internal static global::System.Globalization.CultureInfo Culture { get; set; }
#if !NET20
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#endif
    internal static string GetResourceString(string resourceKey, string defaultValue = null) => ResourceManager.GetString(resourceKey, Culture);
    /// <summary>Displays the 'About' box for this component</summary>
    internal static string @AboutBoxDesc => GetResourceString("AboutBoxDesc");
    /// <summary>Collapse</summary>
    internal static string @AccDGCollapse => GetResourceString("AccDGCollapse");
    /// <summary>Edit</summary>
    internal static string @AccDGEdit => GetResourceString("AccDGEdit");
    /// <summary>Expand</summary>
    internal static string @AccDGExpand => GetResourceString("AccDGExpand");
    /// <summary>Navigate</summary>
    internal static string @AccDGNavigate => GetResourceString("AccDGNavigate");
    /// <summary>Navigate Back</summary>
    internal static string @AccDGNavigateBack => GetResourceString("AccDGNavigateBack");
    /// <summary>(Create New)</summary>
    internal static string @AccDGNewRow => GetResourceString("AccDGNewRow");
    /// <summary>Parent Row</summary>
    internal static string @AccDGParentRow => GetResourceString("AccDGParentRow");
    /// <summary>Parent Rows</summary>
    internal static string @AccDGParentRows => GetResourceString("AccDGParentRows");
    /// <summary>Check</summary>
    internal static string @AccessibleActionCheck => GetResourceString("AccessibleActionCheck");
    /// <summary>Click</summary>
    internal static string @AccessibleActionClick => GetResourceString("AccessibleActionClick");
    /// <summary>Collapse</summary>
    internal static string @AccessibleActionCollapse => GetResourceString("AccessibleActionCollapse");
    /// <summary>Expand</summary>
    internal static string @AccessibleActionExpand => GetResourceString("AccessibleActionExpand");
    /// <summary>Press</summary>
    internal static string @AccessibleActionPress => GetResourceString("AccessibleActionPress");
    /// <summary>Uncheck</summary>
    internal static string @AccessibleActionUncheck => GetResourceString("AccessibleActionUncheck");
    /// <summary>Controls created on one thread cannot be parented to a control on a different thread.</summary>
    internal static string @AddDifferentThreads => GetResourceString("AddDifferentThreads");
    /// <summary>Thread exception mode cannot be changed once any Controls are created on the thread.</summary>
    internal static string @ApplicationCannotChangeThreadExceptionMode => GetResourceString("ApplicationCannotChangeThreadExceptionMode");
    /// <summary>Application exception mode cannot be changed once any Controls are created in the application.</summary>
    internal static string @ApplicationCannotChangeApplicationExceptionMode => GetResourceString("ApplicationCannotChangeApplicationExceptionMode");
    /// <summary>&amp;Apply</summary>
    internal static string @ApplyCaption => GetResourceString("ApplyCaption");
    /// <summary>autoComplete cannot be initialized with given custom source.</summary>
    internal static string @AutoCompleteFailure => GetResourceString("AutoCompleteFailure");
    /// <summary>autoComplete cannot be initialized with the list items.</summary>
    internal static string @AutoCompleteFailureListItems => GetResourceString("AutoCompleteFailureListItems");
    /// <summary>Event {0} is not valid on this ActiveX control.</summary>
    internal static string @AXAddInvalidEvent => GetResourceString("AXAddInvalidEvent");
    /// <summary>ActiveX control named '{0}' already exists in this container. Change or set the "Name" property for this ActiveX control and try again.</summary>
    internal static string @AXDuplicateControl => GetResourceString("AXDuplicateControl");
    /// <summary>Edit ActiveX component properties</summary>
    internal static string @AXEditProperties => GetResourceString("AXEditProperties");
    /// <summary>ActiveX controls only accept fonts that are defined in GraphicsUnit.Point.</summary>
    internal static string @AXFontUnitNotPoint => GetResourceString("AXFontUnitNotPoint");
    /// <summary>Interface is not supported.</summary>
    internal static string @AxInterfaceNotSupported => GetResourceString("AxInterfaceNotSupported");
    /// <summary>Not a valid argument.</summary>
    internal static string @AXInvalidArgument => GetResourceString("AXInvalidArgument");
    /// <summary>Method '{0}' cannot be invoked at this time.</summary>
    internal static string @AXInvalidMethodInvoke => GetResourceString("AXInvalidMethodInvoke");
    /// <summary>Property get of '{0}' cannot be invoked at this time.</summary>
    internal static string @AXInvalidPropertyGet => GetResourceString("AXInvalidPropertyGet");
    /// <summary>Property set of '{0}' cannot be invoked at this time.</summary>
    internal static string @AXInvalidPropertySet => GetResourceString("AXInvalidPropertySet");
    /// <summary>ActiveX control '{0}' cannot be instantiated because the current thread is not in a single-threaded apartment.</summary>
    internal static string @AXMTAThread => GetResourceString("AXMTAThread");
    /// <summary>Connection point for event interface '{0}' cannot be created.</summary>
    internal static string @AXNoConnectionPoint => GetResourceString("AXNoConnectionPoint");
    /// <summary>Source object does not expose IConnectionPointContainer.</summary>
    internal static string @AXNoConnectionPointContainer => GetResourceString("AXNoConnectionPointContainer");
    /// <summary>Source object does not expose '{0}' event interface.</summary>
    internal static string @AXNoEventInterface => GetResourceString("AXNoEventInterface");
    /// <summary>Unable to get the window handle for the '{0}' control. Windowless ActiveX controls are not supported.</summary>
    internal static string @AXNohWnd => GetResourceString("AXNohWnd");
    /// <summary>You must have a license to use this ActiveX control.</summary>
    internal static string @AXNoLicenseToUse => GetResourceString("AXNoLicenseToUse");
    /// <summary>Could not Advise() the event interface '{0}'.</summary>
    internal static string @AXNoSinkAdvise => GetResourceString("AXNoSinkAdvise");
    /// <summary>Given 'sink' object does not implement '{0}' event interface.</summary>
    internal static string @AXNoSinkImplementation => GetResourceString("AXNoSinkImplementation");
    /// <summary>Unable to verify required threading model of apartment or free-threaded. This control cannot be hosted.</summary>
    internal static string @AXNoThreadInfo => GetResourceString("AXNoThreadInfo");
    /// <summary>Not implemented.</summary>
    internal static string @AXNotImplemented => GetResourceString("AXNotImplemented");
    /// <summary>ActiveX control must have at least one ContainerControl in its parent hierarchy to be properly instantiated. Set the ContainingControl property on '{0}' to a non-null value and try again.</summary>
    internal static string @AXNoTopLevelContainerControl => GetResourceString("AXNoTopLevelContainerControl");
    /// <summary>ActiveX control cannot be reloaded with an OcxState of a different storage type.</summary>
    internal static string @AXOcxStateLoaded => GetResourceString("AXOcxStateLoaded");
    /// <summary>ActiveX - Properties...</summary>
    internal static string @AXProperties => GetResourceString("AXProperties");
    /// <summary>Control is single threaded. It cannot be hosted.</summary>
    internal static string @AXSingleThreaded => GetResourceString("AXSingleThreaded");
    /// <summary>Top-level Windows Forms control cannot be exposed as an ActiveX control.</summary>
    internal static string @AXTopLevelSource => GetResourceString("AXTopLevelSource");
    /// <summary>Unknown error.</summary>
    internal static string @AXUnknownError => GetResourceString("AXUnknownError");
    /// <summary>Unknown image type.</summary>
    internal static string @AXUnknownImage => GetResourceString("AXUnknownImage");
    /// <summary>ActiveX control is a windowless control. The control is not supported in this version of the .NET.</summary>
    internal static string @AXWindowlessControl => GetResourceString("AXWindowlessControl");
    /// <summary>Complex DataBinding accepts as a data source either an IList or an IListSource.</summary>
    internal static string @BadDataSourceForComplexBinding => GetResourceString("BadDataSourceForComplexBinding");
    /// <summary>ListManager for {0} cannot be found.</summary>
    internal static string @BindingManagerBadIndex => GetResourceString("BindingManagerBadIndex");
    /// <summary>The ToolStripItem on the BindingNavigator that raises the 'Add new' action.</summary>
    internal static string @BindingNavigatorAddNewItemPropDescr => GetResourceString("BindingNavigatorAddNewItemPropDescr");
    /// <summary>Add new</summary>
    internal static string @BindingNavigatorAddNewItemText => GetResourceString("BindingNavigatorAddNewItemText");
    /// <summary>The BindingSource that the BindingNavigator navigates.</summary>
    internal static string @BindingNavigatorBindingSourcePropDescr => GetResourceString("BindingNavigatorBindingSourcePropDescr");
    /// <summary>of {0}</summary>
    internal static string @BindingNavigatorCountItemFormat => GetResourceString("BindingNavigatorCountItemFormat");
    /// <summary>Formatting to apply to count displayed in the CountItem ToolStrip item.</summary>
    internal static string @BindingNavigatorCountItemFormatPropDescr => GetResourceString("BindingNavigatorCountItemFormatPropDescr");
    /// <summary>The ToolStripItem on the BindingNavigator that displays the total number of items.</summary>
    internal static string @BindingNavigatorCountItemPropDescr => GetResourceString("BindingNavigatorCountItemPropDescr");
    /// <summary>Total number of items</summary>
    internal static string @BindingNavigatorCountItemTip => GetResourceString("BindingNavigatorCountItemTip");
    /// <summary>The ToolStripItem on the BindingNavigator that raises the 'Delete' action.</summary>
    internal static string @BindingNavigatorDeleteItemPropDescr => GetResourceString("BindingNavigatorDeleteItemPropDescr");
    /// <summary>Delete</summary>
    internal static string @BindingNavigatorDeleteItemText => GetResourceString("BindingNavigatorDeleteItemText");
    /// <summary>The ToolStripItem on the BindingNavigator that raises the 'Move first' action.</summary>
    internal static string @BindingNavigatorMoveFirstItemPropDescr => GetResourceString("BindingNavigatorMoveFirstItemPropDescr");
    /// <summary>Move first</summary>
    internal static string @BindingNavigatorMoveFirstItemText => GetResourceString("BindingNavigatorMoveFirstItemText");
    /// <summary>The ToolStripItem on the BindingNavigator that raises the 'Move last' action.</summary>
    internal static string @BindingNavigatorMoveLastItemPropDescr => GetResourceString("BindingNavigatorMoveLastItemPropDescr");
    /// <summary>Move last</summary>
    internal static string @BindingNavigatorMoveLastItemText => GetResourceString("BindingNavigatorMoveLastItemText");
    /// <summary>The ToolStripItem on the BindingNavigator that raises the 'Move next' action.</summary>
    internal static string @BindingNavigatorMoveNextItemPropDescr => GetResourceString("BindingNavigatorMoveNextItemPropDescr");
    /// <summary>Move next</summary>
    internal static string @BindingNavigatorMoveNextItemText => GetResourceString("BindingNavigatorMoveNextItemText");
    /// <summary>The ToolStripItem on the BindingNavigator that raises the 'Move previous' action.</summary>
    internal static string @BindingNavigatorMovePreviousItemPropDescr => GetResourceString("BindingNavigatorMovePreviousItemPropDescr");
    /// <summary>Move previous</summary>
    internal static string @BindingNavigatorMovePreviousItemText => GetResourceString("BindingNavigatorMovePreviousItemText");
    /// <summary>Position</summary>
    internal static string @BindingNavigatorPositionAccessibleName => GetResourceString("BindingNavigatorPositionAccessibleName");
    /// <summary>The ToolStripItem on the BindingNavigator that displays the current position.</summary>
    internal static string @BindingNavigatorPositionItemPropDescr => GetResourceString("BindingNavigatorPositionItemPropDescr");
    /// <summary>Current position</summary>
    internal static string @BindingNavigatorPositionItemTip => GetResourceString("BindingNavigatorPositionItemTip");
    /// <summary>Event raised when BindingNavigator ToolStrip items need to be refreshed to reflect current state of data.</summary>
    internal static string @BindingNavigatorRefreshItemsEventDescr => GetResourceString("BindingNavigatorRefreshItemsEventDescr");
    /// <summary>Binding Navigator</summary>
    internal static string @BindingNavigatorToolStripName => GetResourceString("BindingNavigatorToolStripName");
    /// <summary>dataBinding already belongs to this BindingsCollection.</summary>
    internal static string @BindingsCollectionAdd1 => GetResourceString("BindingsCollectionAdd1");
    /// <summary>dataBinding belongs to another BindingsCollection.</summary>
    internal static string @BindingsCollectionAdd2 => GetResourceString("BindingsCollectionAdd2");
    /// <summary>Binding {0       } cannot be found.</summary>
    internal static string @BindingsCollectionBadIndex => GetResourceString("BindingsCollectionBadIndex");
    /// <summary>This causes two bindings in the collection to bind to the same property.</summary>
    internal static string @BindingsCollectionDup => GetResourceString("BindingsCollectionDup");
    /// <summary>Binding does not belong to this BindingsCollection.</summary>
    internal static string @BindingsCollectionForeign => GetResourceString("BindingsCollectionForeign");
    /// <summary>Event raised when the user calls AddNew on the BindingSource</summary>
    internal static string @BindingSourceAddingNewEventHandlerDescr => GetResourceString("BindingSourceAddingNewEventHandlerDescr");
    /// <summary>Determines whether the BindingSource allows new items to be added to the list.</summary>
    internal static string @BindingSourceAllowNewDescr => GetResourceString("BindingSourceAllowNewDescr");
    /// <summary>Sort string not valid.</summary>
    internal static string @BindingSourceBadSortString => GetResourceString("BindingSourceBadSortString");
    /// <summary>Event raised after data has been exchanged between the data source and a control property bound to that data source.</summary>
    internal static string @BindingSourceBindingCompleteEventHandlerDescr => GetResourceString("BindingSourceBindingCompleteEventHandlerDescr");
    /// <summary>Item cannot be added to a read-only or fixed-size list.</summary>
    internal static string @BindingSourceBindingListWrapperAddToReadOnlyList => GetResourceString("BindingSourceBindingListWrapperAddToReadOnlyList");
    /// <summary>AddNew cannot be called on the '{0}' type. This type does not have a public default constructor. You can call AddNew on the '{0}' type if you handle the AddingNew event and create the appropriate object.</summary>
    internal static string @BindingSourceBindingListWrapperNeedAParameterlessConstructor => GetResourceString("BindingSourceBindingListWrapperNeedAParameterlessConstructor");
    /// <summary>AddNew cannot be called on the '{0}' type. This type does not have a public default constructor. You can call AddNew on the '{0}' type if you set AllowNew=true and handle the AddingNew event.</summary>
    internal static string @BindingSourceBindingListWrapperNeedToSetAllowNew => GetResourceString("BindingSourceBindingListWrapperNeedToSetAllowNew");
    /// <summary>Event raised when the value of Current changes.</summary>
    internal static string @BindingSourceCurrentChangedEventHandlerDescr => GetResourceString("BindingSourceCurrentChangedEventHandlerDescr");
    /// <summary>Event raised when the value of Current changes, or a property of the current item changes.</summary>
    internal static string @BindingSourceCurrentItemChangedEventHandlerDescr => GetResourceString("BindingSourceCurrentItemChangedEventHandlerDescr");
    /// <summary>Event raised when an exception thrown during data binding is handled internally by the CurrencyManager.</summary>
    internal static string @BindingSourceDataErrorEventHandlerDescr => GetResourceString("BindingSourceDataErrorEventHandlerDescr");
    /// <summary>Event raised when the DataMember changes.</summary>
    internal static string @BindingSourceDataMemberChangedEventHandlerDescr => GetResourceString("BindingSourceDataMemberChangedEventHandlerDescr");
    /// <summary>Indicates a sub-list of the DataSource that the BindingSource is bound to.</summary>
    internal static string @BindingSourceDataMemberDescr => GetResourceString("BindingSourceDataMemberDescr");
    /// <summary>Event raised when the DataSource changes.</summary>
    internal static string @BindingSourceDataSourceChangedEventHandlerDescr => GetResourceString("BindingSourceDataSourceChangedEventHandlerDescr");
    /// <summary>Indicates the source of data for the BindingSource.</summary>
    internal static string @BindingSourceDataSourceDescr => GetResourceString("BindingSourceDataSourceDescr");
    /// <summary>Indicates a database column expression used to filter the set of rows returned by the data source.</summary>
    internal static string @BindingSourceFilterDescr => GetResourceString("BindingSourceFilterDescr");
    /// <summary>BindingSource unable to create list based on the Type specified in the DataSource property.</summary>
    internal static string @BindingSourceInstanceError => GetResourceString("BindingSourceInstanceError");
    /// <summary>Controls how the BindingSource raises the ListChanged event as a result of changing an item in the BindingSource.</summary>
    internal static string @BindingSourceItemChangedEventModeDescr => GetResourceString("BindingSourceItemChangedEventModeDescr");
    /// <summary>Cannot add null to BindingSource if the underlying list stores value types.</summary>
    internal static string @BindingSourceItemTypeIsValueType => GetResourceString("BindingSourceItemTypeIsValueType");
    /// <summary>Objects added to a BindingSource's list must all be of the same type.</summary>
    internal static string @BindingSourceItemTypeMismatchOnAdd => GetResourceString("BindingSourceItemTypeMismatchOnAdd");
    /// <summary>Event raised when a change occurs in the BindingSource's list.</summary>
    internal static string @BindingSourceListChangedEventHandlerDescr => GetResourceString("BindingSourceListChangedEventHandlerDescr");
    /// <summary>Event raised when the value of Position changes.</summary>
    internal static string @BindingSourcePositionChangedEventHandlerDescr => GetResourceString("BindingSourcePositionChangedEventHandlerDescr");
    /// <summary>BindingSource cannot be its own data source. Do not set the DataSource and DataMember properties to values that refer back to BindingSource.</summary>
    internal static string @BindingSourceRecursionDetected => GetResourceString("BindingSourceRecursionDetected");
    /// <summary>Current item cannot be removed from the list because there is no current item.</summary>
    internal static string @BindingSourceRemoveCurrentNoCurrentItem => GetResourceString("BindingSourceRemoveCurrentNoCurrentItem");
    /// <summary>Current item cannot be removed from the list because the list does not allow removal of items.</summary>
    internal static string @BindingSourceRemoveCurrentNotAllowed => GetResourceString("BindingSourceRemoveCurrentNotAllowed");
    /// <summary>Indicates names of database columns used to sort the set of rows returned by the data source.</summary>
    internal static string @BindingSourceSortDescr => GetResourceString("BindingSourceSortDescr");
    /// <summary>Sort string contains a property that is not in the IBindingList.</summary>
    internal static string @BindingSourceSortStringPropertyNotInIBindingList => GetResourceString("BindingSourceSortStringPropertyNotInIBindingList");
    /// <summary>BlinkRate must be zero or greater. Negative values are not permitted.</summary>
    internal static string @BlinkRateMustBeZeroOrMore => GetResourceString("BlinkRateMustBeZeroOrMore");
    /// <summary>The border style of the control.</summary>
    internal static string @borderStyleDescr => GetResourceString("borderStyleDescr");
    /// <summary>Enables the automatic handling of text that extends beyond the width of the button.</summary>
    internal static string @ButtonAutoEllipsisDescr => GetResourceString("ButtonAutoEllipsisDescr");
    /// <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the border around the button.</summary>
    internal static string @ButtonBorderColorDescr => GetResourceString("ButtonBorderColorDescr");
    /// <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the size, in pixels, of the border around the button.</summary>
    internal static string @ButtonBorderSizeDescr => GetResourceString("ButtonBorderSizeDescr");
    /// <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area of the button when the button is checked and the mouse pointer is outside the bounds of the control.</summary>
    internal static string @ButtonCheckedBackColorDescr => GetResourceString("ButtonCheckedBackColorDescr");
    /// <summary>The dialog-box result produced in a modal form by clicking the button.</summary>
    internal static string @ButtonDialogResultDescr => GetResourceString("ButtonDialogResultDescr");
    /// <summary>For buttons whose FlatStyle is FlatStyle.Flat, determines the appearance of the border and the colors used to indicate check state and mouse state.</summary>
    internal static string @ButtonFlatAppearance => GetResourceString("ButtonFlatAppearance");
    /// <summary>ButtonBase controls do not support setting the BorderColor to Transparent.</summary>
    internal static string @ButtonFlatAppearanceInvalidBorderColor => GetResourceString("ButtonFlatAppearanceInvalidBorderColor");
    /// <summary>Determines the appearance of the control when a user moves the mouse over the control and clicks.</summary>
    internal static string @ButtonFlatStyleDescr => GetResourceString("ButtonFlatStyleDescr");
    /// <summary>The alignment of the image that will be displayed on the control.</summary>
    internal static string @ButtonImageAlignDescr => GetResourceString("ButtonImageAlignDescr");
    /// <summary>The image that will be displayed on the control.</summary>
    internal static string @ButtonImageDescr => GetResourceString("ButtonImageDescr");
    /// <summary>The index of the image in the ImageList to display on the control.</summary>
    internal static string @ButtonImageIndexDescr => GetResourceString("ButtonImageIndexDescr");
    /// <summary>The ImageList to get the image to display on the control.</summary>
    internal static string @ButtonImageListDescr => GetResourceString("ButtonImageListDescr");
    /// <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area of the button when the mouse is pressed within the bounds of the control.</summary>
    internal static string @ButtonMouseDownBackColorDescr => GetResourceString("ButtonMouseDownBackColorDescr");
    /// <summary>For buttons whose FlatStyle is FlatStyle.Flat, this property specifies the color of the client area of the button when the mouse pointer is within the bounds of the control.</summary>
    internal static string @ButtonMouseOverBackColorDescr => GetResourceString("ButtonMouseOverBackColorDescr");
    /// <summary>The alignment of the text that will be displayed on the control.</summary>
    internal static string @ButtonTextAlignDescr => GetResourceString("ButtonTextAlignDescr");
    /// <summary>Specifies the relative location of the image to the text on the button.</summary>
    internal static string @ButtonTextImageRelationDescr => GetResourceString("ButtonTextImageRelationDescr");
    /// <summary>If true, the first character preceded by an ampersand (&amp;&amp;) will be used as the button's mnemonic key.</summary>
    internal static string @ButtonUseMnemonicDescr => GetResourceString("ButtonUseMnemonicDescr");
    /// <summary>Determines whether the background is drawn using visual styles, if visual styles are supported.</summary>
    internal static string @ButtonUseVisualStyleBackColorDescr => GetResourceString("ButtonUseVisualStyleBackColorDescr");
    /// <summary>Cancel</summary>
    internal static string @CancelCaption => GetResourceString("CancelCaption");
    /// <summary>Invisible or disabled control cannot be activated</summary>
    internal static string @CannotActivateControl => GetResourceString("CannotActivateControl");
    /// <summary>You cannot alter the document or add to it once you have printed it.</summary>
    internal static string @CannotChangePrintedDocument => GetResourceString("CannotChangePrintedDocument");
    /// <summary>Starting a second message loop on a single thread is not a valid operation. Use Form.ShowDialog instead.</summary>
    internal static string @CantNestMessageLoops => GetResourceString("CantNestMessageLoops");
    /// <summary>Showing a service notification message box with a Help button is not a valid operation.</summary>
    internal static string @CantShowMBServiceWithHelp => GetResourceString("CantShowMBServiceWithHelp");
    /// <summary>Showing a service notification message box with an owner window is not a valid operation. Use the Show method that does not take an owner.</summary>
    internal static string @CantShowMBServiceWithOwner => GetResourceString("CantShowMBServiceWithOwner");
    /// <summary>Showing a modal dialog box or form when the application is not running in UserInteractive mode is not a valid operation. Specify the ServiceNotification or DefaultDesktopOnly style to display a notification from a service application.</summary>
    internal static string @CantShowModalOnNonInteractive => GetResourceString("CantShowModalOnNonInteractive");
    /// <summary>Accessibility</summary>
    internal static string @CatAccessibility => GetResourceString("CatAccessibility");
    /// <summary>Action</summary>
    internal static string @CatAction => GetResourceString("CatAction");
    /// <summary>Appearance</summary>
    internal static string @CatAppearance => GetResourceString("CatAppearance");
    /// <summary>Asynchronous</summary>
    internal static string @CatAsynchronous => GetResourceString("CatAsynchronous");
    /// <summary>Behavior</summary>
    internal static string @CatBehavior => GetResourceString("CatBehavior");
    /// <summary>Colors</summary>
    internal static string @CatColors => GetResourceString("CatColors");
    /// <summary>Data</summary>
    internal static string @CatData => GetResourceString("CatData");
    /// <summary>Display</summary>
    internal static string @CatDisplay => GetResourceString("CatDisplay");
    /// <summary>Drag Drop</summary>
    internal static string @CatDragDrop => GetResourceString("CatDragDrop");
    /// <summary>Focus</summary>
    internal static string @CatFocus => GetResourceString("CatFocus");
    /// <summary>Folder Browsing</summary>
    internal static string @CatFolderBrowsing => GetResourceString("CatFolderBrowsing");
    /// <summary>Items</summary>
    internal static string @CatItems => GetResourceString("CatItems");
    /// <summary>Key</summary>
    internal static string @CatKey => GetResourceString("CatKey");
    /// <summary>Layout</summary>
    internal static string @CatLayout => GetResourceString("CatLayout");
    /// <summary>Mouse</summary>
    internal static string @CatMouse => GetResourceString("CatMouse");
    /// <summary>Private</summary>
    internal static string @CatPrivate => GetResourceString("CatPrivate");
    /// <summary>Property Changed</summary>
    internal static string @CatPropertyChanged => GetResourceString("CatPropertyChanged");
    /// <summary>Window Style</summary>
    internal static string @CatWindowStyle => GetResourceString("CatWindowStyle");
    /// <summary>Enables and disables the Define Custom Colors button.</summary>
    internal static string @CDallowFullOpenDescr => GetResourceString("CDallowFullOpenDescr");
    /// <summary>Indicates whether the dialog box displays all available colors in the set of basic colors.</summary>
    internal static string @CDanyColorDescr => GetResourceString("CDanyColorDescr");
    /// <summary>The color selected in the dialog box.</summary>
    internal static string @CDcolorDescr => GetResourceString("CDcolorDescr");
    /// <summary>The custom set of colors shown in the dialog box.</summary>
    internal static string @CDcustomColorsDescr => GetResourceString("CDcustomColorsDescr");
    /// <summary>Controls whether the custom color section of the dialog box is initially displayed.</summary>
    internal static string @CDfullOpenDescr => GetResourceString("CDfullOpenDescr");
    /// <summary>Controls whether the Help button is displayed.</summary>
    internal static string @CDshowHelpDescr => GetResourceString("CDshowHelpDescr");
    /// <summary>Indicates whether the dialog box will restrict users to only selecting solid colors.</summary>
    internal static string @CDsolidColorOnlyDescr => GetResourceString("CDsolidColorOnlyDescr");
    /// <summary>Controls the appearance of the check box.</summary>
    internal static string @CheckBoxAppearanceDescr => GetResourceString("CheckBoxAppearanceDescr");
    /// <summary>Causes the check box to automatically change state when clicked.</summary>
    internal static string @CheckBoxAutoCheckDescr => GetResourceString("CheckBoxAutoCheckDescr");
    /// <summary>Determines the location of the check box inside the control.</summary>
    internal static string @CheckBoxCheckAlignDescr => GetResourceString("CheckBoxCheckAlignDescr");
    /// <summary>Indicates whether the component is in the checked state.</summary>
    internal static string @CheckBoxCheckedDescr => GetResourceString("CheckBoxCheckedDescr");
    /// <summary>Indicates the state of the component.</summary>
    internal static string @CheckBoxCheckStateDescr => GetResourceString("CheckBoxCheckStateDescr");
    /// <summary>Event raised when the value of the Appearance property is changed on CheckBox.</summary>
    internal static string @CheckBoxOnAppearanceChangedDescr => GetResourceString("CheckBoxOnAppearanceChangedDescr");
    /// <summary>Occurs whenever the Check property is changed.</summary>
    internal static string @CheckBoxOnCheckedChangedDescr => GetResourceString("CheckBoxOnCheckedChangedDescr");
    /// <summary>Occurs whenever the CheckState property is changed.</summary>
    internal static string @CheckBoxOnCheckStateChangedDescr => GetResourceString("CheckBoxOnCheckStateChangedDescr");
    /// <summary>Indicates whether the CheckBox will allow three check states rather than two.</summary>
    internal static string @CheckBoxThreeStateDescr => GetResourceString("CheckBoxThreeStateDescr");
    /// <summary>CheckedListBox.CheckedIndexCollection is read only.</summary>
    internal static string @CheckedListBoxCheckedIndexCollectionIsReadOnly => GetResourceString("CheckedListBoxCheckedIndexCollectionIsReadOnly");
    /// <summary>CheckedListBox.CheckedItemCollection is read only.</summary>
    internal static string @CheckedListBoxCheckedItemCollectionIsReadOnly => GetResourceString("CheckedListBoxCheckedItemCollectionIsReadOnly");
    /// <summary>Indicates if the check box should be toggled with the first click on an item.</summary>
    internal static string @CheckedListBoxCheckOnClickDescr => GetResourceString("CheckedListBoxCheckOnClickDescr");
    /// <summary>Multi-selection is not supported on CheckedListBox.</summary>
    internal static string @CheckedListBoxInvalidSelectionMode => GetResourceString("CheckedListBoxInvalidSelectionMode");
    /// <summary>Indicates that an item is about to have its checked state changed. The value is not updated until after the event occurs.</summary>
    internal static string @CheckedListBoxItemCheckDescr => GetResourceString("CheckedListBoxItemCheckDescr");
    /// <summary>Indicates whether check boxes have a ButtonState of Flat or Normal.</summary>
    internal static string @CheckedListBoxThreeDCheckBoxesDescr => GetResourceString("CheckedListBoxThreeDCheckBoxesDescr");
    /// <summary>A circular control reference has been made. A control cannot be owned by or parented to itself.</summary>
    internal static string @CircularOwner => GetResourceString("CircularOwner");
    /// <summary>Path "{0}" in the argument "{1}" is not valid.</summary>
    internal static string @Clipboard_InvalidPath => GetResourceString("Clipboard_InvalidPath");
    /// <summary>Requested Clipboard operation did not succeed.</summary>
    internal static string @ClipboardOperationFailed => GetResourceString("ClipboardOperationFailed");
    /// <summary>Due to security restrictions on clipboard, the specified clipboard format cannot be set.</summary>
    internal static string @ClipboardSecurityException => GetResourceString("ClipboardSecurityException");
    /// <summary>Close</summary>
    internal static string @CloseCaption => GetResourceString("CloseCaption");
    /// <summary>Value {0}() cannot be called while doing CreateHandle().</summary>
    internal static string @ClosingWhileCreatingHandle => GetResourceString("ClosingWhileCreatingHandle");
    /// <summary>Occurs whenever this collection's membership changes.</summary>
    internal static string @collectionChangedEventDescr => GetResourceString("collectionChangedEventDescr");
    /// <summary>Occurs whenever this collection's membership is about to change.</summary>
    internal static string @collectionChangingEventDescr => GetResourceString("collectionChangingEventDescr");
    /// <summary>Cannot operate with an empty collection.</summary>
    internal static string @CollectionEmptyException => GetResourceString("CollectionEmptyException");
    /// <summary>Indicates the horizontal alignment of the text displayed in the column header.</summary>
    internal static string @ColumnAlignment => GetResourceString("ColumnAlignment");
    /// <summary>The text displayed in the column header.</summary>
    internal static string @ColumnCaption => GetResourceString("ColumnCaption");
    /// <summary>DisplayIndex value is out of bounds. Value must be greater than or equal to 0 and less than or equal to number of columns minus 1.</summary>
    internal static string @ColumnHeaderBadDisplayIndex => GetResourceString("ColumnHeaderBadDisplayIndex");
    /// <summary>Argument must be of type ColumnHeader.</summary>
    internal static string @ColumnHeaderCollectionInvalidArgument => GetResourceString("ColumnHeaderCollectionInvalidArgument");
    /// <summary>The display index of the column</summary>
    internal static string @ColumnHeaderDisplayIndexDescr => GetResourceString("ColumnHeaderDisplayIndexDescr");
    /// <summary>The name of the column header.</summary>
    internal static string @ColumnHeaderNameDescr => GetResourceString("ColumnHeaderNameDescr");
    /// <summary>The visual width of the column in pixels.</summary>
    internal static string @ColumnWidth => GetResourceString("ColumnWidth");
    /// <summary>Handler type ({0} != {1}) is not valid.</summary>
    internal static string @COM2BadHandlerType => GetResourceString("COM2BadHandlerType");
    /// <summary>Names and values must be non-null and of same length.</summary>
    internal static string @COM2NamesAndValuesNotEqual => GetResourceString("COM2NamesAndValuesNotEqual");
    /// <summary>Property {0} is read-only.</summary>
    internal static string @COM2ReadonlyProperty => GetResourceString("COM2ReadonlyProperty");
    /// <summary>Unhandled VT: {0}.</summary>
    internal static string @COM2UnhandledVT => GetResourceString("COM2UnhandledVT");
    /// <summary>The autocomplete custom source, which is a custom StringCollection used when the AutoCompleteSource is CustomSource.</summary>
    internal static string @ComboBoxAutoCompleteCustomSourceDescr => GetResourceString("ComboBoxAutoCompleteCustomSourceDescr");
    /// <summary>Indicates the text completion behavior of the combo box.</summary>
    internal static string @ComboBoxAutoCompleteModeDescr => GetResourceString("ComboBoxAutoCompleteModeDescr");
    /// <summary>Only the value AutoCompleteMode.None can be used when DropDownStyle is ComboBoxStyle.DropDownList and AutoCompleteSource is not AutoCompleteSource.ListItems.</summary>
    internal static string @ComboBoxAutoCompleteModeOnlyNoneAllowed => GetResourceString("ComboBoxAutoCompleteModeOnlyNoneAllowed");
    /// <summary>The source of complete strings used for automatic completion.</summary>
    internal static string @ComboBoxAutoCompleteSourceDescr => GetResourceString("ComboBoxAutoCompleteSourceDescr");
    /// <summary>Only the value AutoCompleteSource.ListItems can be used when DropDownStyle is ComboBoxStyle.DropDownList and AutoCompleteMode is not AutoCompleteMode.None.</summary>
    internal static string @ComboBoxAutoCompleteSourceOnlyListItemsAllowed => GetResourceString("ComboBoxAutoCompleteSourceOnlyListItemsAllowed");
    /// <summary>DataSource cannot be set in a combo box that is sorted.</summary>
    internal static string @ComboBoxDataSourceWithSort => GetResourceString("ComboBoxDataSourceWithSort");
    /// <summary>Indicates whether the code or the operating system will handle drawing of elements in the list.</summary>
    internal static string @ComboBoxDrawModeDescr => GetResourceString("ComboBoxDrawModeDescr");
    /// <summary>The height, in pixels, of the drop-down box in a combo box.</summary>
    internal static string @ComboBoxDropDownHeightDescr => GetResourceString("ComboBoxDropDownHeightDescr");
    /// <summary>Occurs when the value of the DropDownStyle property changes.</summary>
    internal static string @ComboBoxDropDownStyleChangedDescr => GetResourceString("ComboBoxDropDownStyleChangedDescr");
    /// <summary>The width, in pixels, of the drop-down box in a combo box.</summary>
    internal static string @ComboBoxDropDownWidthDescr => GetResourceString("ComboBoxDropDownWidthDescr");
    /// <summary>Indicates if the combo box is currently dropped down.</summary>
    internal static string @ComboBoxDroppedDownDescr => GetResourceString("ComboBoxDroppedDownDescr");
    /// <summary>ComboBox</summary>
    internal static string @ComboBoxEditDefaultAccessibleName => GetResourceString("ComboBoxEditDefaultAccessibleName");
    /// <summary>Determines the display of the control.</summary>
    internal static string @ComboBoxFlatStyleDescr => GetResourceString("ComboBoxFlatStyleDescr");
    /// <summary>Indicates whether the combo box should resize to avoid showing partial items.</summary>
    internal static string @ComboBoxIntegralHeightDescr => GetResourceString("ComboBoxIntegralHeightDescr");
    /// <summary>The height, in pixels, of items in an owner-draw combo box.</summary>
    internal static string @ComboBoxItemHeightDescr => GetResourceString("ComboBoxItemHeightDescr");
    /// <summary>Too many items in the combo box.</summary>
    internal static string @ComboBoxItemOverflow => GetResourceString("ComboBoxItemOverflow");
    /// <summary>The items in the combo box.</summary>
    internal static string @ComboBoxItemsDescr => GetResourceString("ComboBoxItemsDescr");
    /// <summary>The maximum number of entries to display in the drop-down list.</summary>
    internal static string @ComboBoxMaxDropDownItemsDescr => GetResourceString("ComboBoxMaxDropDownItemsDescr");
    /// <summary>Specifies the maximum number of characters that can be entered into the combo box.</summary>
    internal static string @ComboBoxMaxLengthDescr => GetResourceString("ComboBoxMaxLengthDescr");
    /// <summary>Indicates that the drop-down portion of the combo box has closed.</summary>
    internal static string @ComboBoxOnDropDownClosedDescr => GetResourceString("ComboBoxOnDropDownClosedDescr");
    /// <summary>Occurs when the drop-down portion of the combo box is shown.</summary>
    internal static string @ComboBoxOnDropDownDescr => GetResourceString("ComboBoxOnDropDownDescr");
    /// <summary>Occurs when the combo box text has changed.</summary>
    internal static string @ComboBoxOnTextUpdateDescr => GetResourceString("ComboBoxOnTextUpdateDescr");
    /// <summary>The preferred height of this control.</summary>
    internal static string @ComboBoxPreferredHeightDescr => GetResourceString("ComboBoxPreferredHeightDescr");
    /// <summary>The index of the currently selected item of the combo box.</summary>
    internal static string @ComboBoxSelectedIndexDescr => GetResourceString("ComboBoxSelectedIndexDescr");
    /// <summary>The currently selected item in the combo box, or null.</summary>
    internal static string @ComboBoxSelectedItemDescr => GetResourceString("ComboBoxSelectedItemDescr");
    /// <summary>The selected text in the edit component of the combo box.</summary>
    internal static string @ComboBoxSelectedTextDescr => GetResourceString("ComboBoxSelectedTextDescr");
    /// <summary>The length of the selected text in the edit component of the combo box.</summary>
    internal static string @ComboBoxSelectionLengthDescr => GetResourceString("ComboBoxSelectionLengthDescr");
    /// <summary>The index of the first character in the selected text.</summary>
    internal static string @ComboBoxSelectionStartDescr => GetResourceString("ComboBoxSelectionStartDescr");
    /// <summary>Specifies whether items in the list portion of the combo box are sorted.</summary>
    internal static string @ComboBoxSortedDescr => GetResourceString("ComboBoxSortedDescr");
    /// <summary>ComboBox that has a DataSource set cannot be sorted. Sort the data using the underlying data model.</summary>
    internal static string @ComboBoxSortWithDataSource => GetResourceString("ComboBoxSortWithDataSource");
    /// <summary>Controls the appearance and functionality of the combo box.</summary>
    internal static string @ComboBoxStyleDescr => GetResourceString("ComboBoxStyleDescr");
    /// <summary>New command ID cannot be allocated.</summary>
    internal static string @CommandIdNotAllocated => GetResourceString("CommandIdNotAllocated");
    /// <summary>Occurs when the user clicks the Help button.</summary>
    internal static string @CommonDialogHelpRequested => GetResourceString("CommonDialogHelpRequested");
    /// <summary>Parameter must be of type IComponent.</summary>
    internal static string @ComponentEditorFormBadComponent => GetResourceString("ComponentEditorFormBadComponent");
    /// <summary>{0} Properties</summary>
    internal static string @ComponentEditorFormProperties => GetResourceString("ComponentEditorFormProperties");
    /// <summary>Properties</summary>
    internal static string @ComponentEditorFormPropertiesNoName => GetResourceString("ComponentEditorFormPropertiesNoName");
    /// <summary>Unable to register the IMsoComponent.  The maximum number of registered IMsoComponents has been reached.</summary>
    internal static string @ComponentManagerProxyOutOfMemory => GetResourceString("ComponentManagerProxyOutOfMemory");
    /// <summary>Server cannot recognize the attribute {0}.</summary>
    internal static string @Config_base_unrecognized_attribute => GetResourceString("Config_base_unrecognized_attribute");
    /// <summary>IConnectionPoint::Advise did not succeed with hr=0x{0:X} for event interface {1}.</summary>
    internal static string @ConnPointAdviseFailed => GetResourceString("ConnPointAdviseFailed");
    /// <summary>Connection point for event interface '{0}' cannot be created.</summary>
    internal static string @ConnPointCouldNotCreate => GetResourceString("ConnPointCouldNotCreate");
    /// <summary>Sink object does not implement the event interface.</summary>
    internal static string @ConnPointSinkIF => GetResourceString("ConnPointSinkIF");
    /// <summary>Source object does not expose the {0} event interface.</summary>
    internal static string @ConnPointSourceIF => GetResourceString("ConnPointSourceIF");
    /// <summary>Unhandled type {0}.</summary>
    internal static string @ConnPointUnhandledType => GetResourceString("ConnPointUnhandledType");
    /// <summary>The currently active control.</summary>
    internal static string @ContainerControlActiveControlDescr => GetResourceString("ContainerControlActiveControlDescr");
    /// <summary>Determines how the form or control will scale when screen resolution or fonts change.</summary>
    internal static string @ContainerControlAutoScaleModeDescr => GetResourceString("ContainerControlAutoScaleModeDescr");
    /// <summary>Indicates whether controls in the container will be automatically validated when the focus changes.</summary>
    internal static string @ContainerControlAutoValidate => GetResourceString("ContainerControlAutoValidate");
    /// <summary>The binding manager for the container control.  This manages all bindings of child controls to lists.</summary>
    internal static string @ContainerControlBindingContextDescr => GetResourceString("ContainerControlBindingContextDescr");
    /// <summary>The width and height of AutoScaleDimensions must be greater than or equal to zero.</summary>
    internal static string @ContainerControlInvalidAutoScaleDimensions => GetResourceString("ContainerControlInvalidAutoScaleDimensions");
    /// <summary>Occurs whenever the AutoValidate property is changed.</summary>
    internal static string @ContainerControlOnAutoValidateChangedDescr => GetResourceString("ContainerControlOnAutoValidateChangedDescr");
    /// <summary>The parent form of this container control.</summary>
    internal static string @ContainerControlParentFormDescr => GetResourceString("ContainerControlParentFormDescr");
    /// <summary>The last control that caused this context menu strip to be displayed.</summary>
    internal static string @ContextMenuStripSourceControlDescr => GetResourceString("ContextMenuStripSourceControlDescr");
    /// <summary>Control's accessible object is in an invalid state.</summary>
    internal static string @ControlAccessibileObjectInvalid => GetResourceString("ControlAccessibileObjectInvalid");
    /// <summary>The accessibility object for this control.</summary>
    internal static string @ControlAccessibilityObjectDescr => GetResourceString("ControlAccessibilityObjectDescr");
    /// <summary>The default action description of the control.</summary>
    internal static string @ControlAccessibleDefaultActionDescr => GetResourceString("ControlAccessibleDefaultActionDescr");
    /// <summary>The description that will be reported to accessibility clients.</summary>
    internal static string @ControlAccessibleDescriptionDescr => GetResourceString("ControlAccessibleDescriptionDescr");
    /// <summary>The name that will be reported to accessibility clients.</summary>
    internal static string @ControlAccessibleNameDescr => GetResourceString("ControlAccessibleNameDescr");
    /// <summary>The role that will be reported to accessibility clients.</summary>
    internal static string @ControlAccessibleRoleDescr => GetResourceString("ControlAccessibleRoleDescr");
    /// <summary>Indicates whether the control can accept data that the user drags onto it.</summary>
    internal static string @ControlAllowDropDescr => GetResourceString("ControlAllowDropDescr");
    /// <summary>Indicates whether the opacity of the control can be adjusted.</summary>
    internal static string @ControlAllowTransparencyDescr => GetResourceString("ControlAllowTransparencyDescr");
    /// <summary>Defines the edges of the container to which a certain control is bound. When a control is anchored to an edge, the distance between the control's closest edge and the specified edge will remain constant.</summary>
    internal static string @ControlAnchorDescr => GetResourceString("ControlAnchorDescr");
    /// <summary>Instance '{0}' cannot be added.  This instance is of a ComponentArrayBase type.</summary>
    internal static string @ControlArrayCannotAddComponentArray => GetResourceString("ControlArrayCannotAddComponentArray");
    /// <summary>Cannot perform ControlArray.AddCopy() because the ControlArray is empty.  Add the control you want copied to the first position in the ControlArray.</summary>
    internal static string @ControlArrayCannotPerformAddCopy => GetResourceString("ControlArrayCannotPerformAddCopy");
    /// <summary>Instance '{0}' must have a default constructor or one without parameters to be copied by the ControlArray.</summary>
    internal static string @ControlArrayCloningException => GetResourceString("ControlArrayCloningException");
    /// <summary>Instance '{0}' cannot be added.  This instance already exists in the ControlArray '{1}'.</summary>
    internal static string @ControlArrayDuplicateException => GetResourceString("ControlArrayDuplicateException");
    /// <summary>Type of '{0}' cannot be added to ControlArray.  Type of '{1}', or a type derived from that type, is expected.</summary>
    internal static string @ControlArrayValidationException => GetResourceString("ControlArrayValidationException");
    /// <summary>Specifies whether the control will be auto-relocated in response to the movement of peer controls.</summary>
    internal static string @ControlAutoRelocateDescr => GetResourceString("ControlAutoRelocateDescr");
    /// <summary>Specifies whether a control will automatically size itself to fit its contents.</summary>
    internal static string @ControlAutoSizeDescr => GetResourceString("ControlAutoSizeDescr");
    /// <summary>Specifies the mode by which the user interface element automatically resizes itself.</summary>
    internal static string @ControlAutoSizeModeDescr => GetResourceString("ControlAutoSizeModeDescr");
    /// <summary>The background color of the component.</summary>
    internal static string @ControlBackColorDescr => GetResourceString("ControlBackColorDescr");
    /// <summary>The background image used for the control.</summary>
    internal static string @ControlBackgroundImageDescr => GetResourceString("ControlBackgroundImageDescr");
    /// <summary>The background image layout used for the component.</summary>
    internal static string @ControlBackgroundImageLayoutDescr => GetResourceString("ControlBackgroundImageLayoutDescr");
    /// <summary>Parameter must be of type ThreadMethodEntry.</summary>
    internal static string @ControlBadAsyncResult => GetResourceString("ControlBadAsyncResult");
    /// <summary>Parameter must be of type Control.</summary>
    internal static string @ControlBadControl => GetResourceString("ControlBadControl");
    /// <summary>The binding context for the control.</summary>
    internal static string @ControlBindingContextDescr => GetResourceString("ControlBindingContextDescr");
    /// <summary>The data bindings for the control.</summary>
    internal static string @ControlBindingsDescr => GetResourceString("ControlBindingsDescr");
    /// <summary>The bottom of the control, in container coordinates.</summary>
    internal static string @ControlBottomDescr => GetResourceString("ControlBottomDescr");
    /// <summary>The bounds of the control, in container coordinates.</summary>
    internal static string @ControlBoundsDescr => GetResourceString("ControlBoundsDescr");
    /// <summary>Checks if this control can receive the focus.</summary>
    internal static string @ControlCanFocusDescr => GetResourceString("ControlCanFocusDescr");
    /// <summary>Control cannot be null.</summary>
    internal static string @ControlCannotBeNull => GetResourceString("ControlCannotBeNull");
    /// <summary>Checks if this control can be selected.</summary>
    internal static string @ControlCanSelectDescr => GetResourceString("ControlCanSelectDescr");
    /// <summary>Determines if this control is currently capturing all mouse input.</summary>
    internal static string @ControlCaptureDescr => GetResourceString("ControlCaptureDescr");
    /// <summary>Indicates whether this component raises validation events.</summary>
    internal static string @ControlCausesValidationDescr => GetResourceString("ControlCausesValidationDescr");
    /// <summary>Indicates whether illegal cross-thread calls raise exceptions. This can be used as a debugging aid.</summary>
    internal static string @ControlCheckForIllegalCrossThreadCalls => GetResourceString("ControlCheckForIllegalCrossThreadCalls");
    /// <summary>Retrieves the rectangle of the inner area of this control.</summary>
    internal static string @ControlClientRectangleDescr => GetResourceString("ControlClientRectangleDescr");
    /// <summary>Determines the size of the inner area of this control.</summary>
    internal static string @ControlClientSizeDescr => GetResourceString("ControlClientSizeDescr");
    /// <summary>Retrieves the company name for this control.</summary>
    internal static string @ControlCompanyNameDescr => GetResourceString("ControlCompanyNameDescr");
    /// <summary>Determines if this control or one if its children currently has the focus.</summary>
    internal static string @ControlContainsFocusDescr => GetResourceString("ControlContainsFocusDescr");
    /// <summary>The shortcut menu to display when the user right-clicks the control.</summary>
    internal static string @ControlContextMenuDescr => GetResourceString("ControlContextMenuDescr");
    /// <summary>Occurs when the value of the ContextMenuStrip property changes.</summary>
    internal static string @ControlContextMenuStripChangedDescr => GetResourceString("ControlContextMenuStripChangedDescr");
    /// <summary>The collection of child controls within this control.</summary>
    internal static string @ControlControlsDescr => GetResourceString("ControlControlsDescr");
    /// <summary>Determines if the control has been fully created.</summary>
    internal static string @ControlCreatedDescr => GetResourceString("ControlCreatedDescr");
    /// <summary>The cursor that appears when the pointer moves over the control.</summary>
    internal static string @ControlCursorDescr => GetResourceString("ControlCursorDescr");
    /// <summary>Retrieves the display rectangle of this control.</summary>
    internal static string @ControlDisplayRectangleDescr => GetResourceString("ControlDisplayRectangleDescr");
    /// <summary>Determines if this control has been disposed.</summary>
    internal static string @ControlDisposedDescr => GetResourceString("ControlDisposedDescr");
    /// <summary>Determines whether this control is in the process of being disposed.</summary>
    internal static string @ControlDisposingDescr => GetResourceString("ControlDisposingDescr");
    /// <summary>Defines which borders of the control are bound to the container.</summary>
    internal static string @ControlDockDescr => GetResourceString("ControlDockDescr");
    /// <summary>Indicates whether the control will be double buffered.</summary>
    internal static string @ControlDoubleBufferedDescr => GetResourceString("ControlDoubleBufferedDescr");
    /// <summary>Indicates whether the control is enabled.</summary>
    internal static string @ControlEnabledDescr => GetResourceString("ControlEnabledDescr");
    /// <summary>Determines if this control has focus.</summary>
    internal static string @ControlFocusedDescr => GetResourceString("ControlFocusedDescr");
    /// <summary>The font used to display text in the control.</summary>
    internal static string @ControlFontDescr => GetResourceString("ControlFontDescr");
    /// <summary>The foreground color of this component, which is used to display text.</summary>
    internal static string @ControlForeColorDescr => GetResourceString("ControlForeColorDescr");
    /// <summary>Indicates whether the control has a handle associated with it.</summary>
    internal static string @ControlHandleCreatedDescr => GetResourceString("ControlHandleCreatedDescr");
    /// <summary>The native handle for this control.</summary>
    internal static string @ControlHandleDescr => GetResourceString("ControlHandleDescr");
    /// <summary>Indicates whether the control contains one or more child controls.</summary>
    internal static string @ControlHasChildrenDescr => GetResourceString("ControlHasChildrenDescr");
    /// <summary>The height of the user interface element, in pixels.</summary>
    internal static string @ControlHeightDescr => GetResourceString("ControlHeightDescr");
    /// <summary>Determines the IME (Input Method Editor) status of the object when selected.</summary>
    internal static string @ControlIMEModeDescr => GetResourceString("ControlIMEModeDescr");
    /// <summary>Scaling factor cannot be zero or empty.</summary>
    internal static string @ControlInvalidLastScalingFactor => GetResourceString("ControlInvalidLastScalingFactor");
    /// <summary>Determines if Invoke or BeginInvoke should be used to access this control cross-thread.</summary>
    internal static string @ControlInvokeRequiredDescr => GetResourceString("ControlInvokeRequiredDescr");
    /// <summary>Indicates whether the control is visible to accessibility applications.</summary>
    internal static string @ControlIsAccessibleDescr => GetResourceString("ControlIsAccessibleDescr");
    /// <summary>Specified key is not supported.</summary>
    internal static string @ControlIsKeyLockedNumCapsScrollLockKeysSupportedOnly => GetResourceString("ControlIsKeyLockedNumCapsScrollLockKeysSupportedOnly");
    /// <summary>The upper left of the control, in container coordinates.</summary>
    internal static string @ControlLeftDescr => GetResourceString("ControlLeftDescr");
    /// <summary>The coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</summary>
    internal static string @ControlLocationDescr => GetResourceString("ControlLocationDescr");
    /// <summary>Specifies space between this control and another control's margin.</summary>
    internal static string @ControlMarginDescr => GetResourceString("ControlMarginDescr");
    /// <summary>Specifies the maximum size of the control.</summary>
    internal static string @ControlMaximumSizeDescr => GetResourceString("ControlMaximumSizeDescr");
    /// <summary>Size cannot have negative width or height.</summary>
    internal static string @ControlMetaFileDCWrapperSizeInvalid => GetResourceString("ControlMetaFileDCWrapperSizeInvalid");
    /// <summary>Specifies the minimum size of the control.</summary>
    internal static string @ControlMinimumSizeDescr => GetResourceString("ControlMinimumSizeDescr");
    /// <summary>'child' is not a child control of this parent.</summary>
    internal static string @ControlNotChild => GetResourceString("ControlNotChild");
    /// <summary>Occurs when the AutoSize property has changed.</summary>
    internal static string @ControlOnAutoSizeChangedDescr => GetResourceString("ControlOnAutoSizeChangedDescr");
    /// <summary>Event raised when the value of the BackColor property is changed on Control.</summary>
    internal static string @ControlOnBackColorChangedDescr => GetResourceString("ControlOnBackColorChangedDescr");
    /// <summary>Event raised when the value of the BackgroundImage property is changed on Control.</summary>
    internal static string @ControlOnBackgroundImageChangedDescr => GetResourceString("ControlOnBackgroundImageChangedDescr");
    /// <summary>Event raised when the value of the BackgroundImageLayout property is changed on Control.</summary>
    internal static string @ControlOnBackgroundImageLayoutChangedDescr => GetResourceString("ControlOnBackgroundImageLayoutChangedDescr");
    /// <summary>Event raised when the value of the BindingContext property is changed on Control.</summary>
    internal static string @ControlOnBindingContextChangedDescr => GetResourceString("ControlOnBindingContextChangedDescr");
    /// <summary>Event raised when the value of the CausesValidation property is changed on Control.</summary>
    internal static string @ControlOnCausesValidationChangedDescr => GetResourceString("ControlOnCausesValidationChangedDescr");
    /// <summary>Occurs when focus rectangles and keyboard cue underlines are being shown or hidden.</summary>
    internal static string @ControlOnChangeUICuesDescr => GetResourceString("ControlOnChangeUICuesDescr");
    /// <summary>Occurs when the component is clicked.</summary>
    internal static string @ControlOnClickDescr => GetResourceString("ControlOnClickDescr");
    /// <summary>Event raised when the value of the ClientSize property is changed on Control.</summary>
    internal static string @ControlOnClientSizeChangedDescr => GetResourceString("ControlOnClientSizeChangedDescr");
    /// <summary>Occurs when the value of the ContextMenu property changes.</summary>
    internal static string @ControlOnContextMenuChangedDescr => GetResourceString("ControlOnContextMenuChangedDescr");
    /// <summary>Occurs when a control is added to this control.</summary>
    internal static string @ControlOnControlAddedDescr => GetResourceString("ControlOnControlAddedDescr");
    /// <summary>Occurs when a control is removed from this control.</summary>
    internal static string @ControlOnControlRemovedDescr => GetResourceString("ControlOnControlRemovedDescr");
    /// <summary>Occurs when the control's native handle is created.</summary>
    internal static string @ControlOnCreateHandleDescr => GetResourceString("ControlOnCreateHandleDescr");
    /// <summary>Event raised when the value of the Cursor property is changed on Control.</summary>
    internal static string @ControlOnCursorChangedDescr => GetResourceString("ControlOnCursorChangedDescr");
    /// <summary>Occurs when the control's native handle is destroyed.</summary>
    internal static string @ControlOnDestroyHandleDescr => GetResourceString("ControlOnDestroyHandleDescr");
    /// <summary>Event raised when the value of the Dock property is changed on Control.</summary>
    internal static string @ControlOnDockChangedDescr => GetResourceString("ControlOnDockChangedDescr");
    /// <summary>Occurs when the component is double-clicked.</summary>
    internal static string @ControlOnDoubleClickDescr => GetResourceString("ControlOnDoubleClickDescr");
    /// <summary>Occurs when a drag-and-drop operation is completed.</summary>
    internal static string @ControlOnDragDropDescr => GetResourceString("ControlOnDragDropDescr");
    /// <summary>Occurs when the mouse drags an item into the client area for this Control.</summary>
    internal static string @ControlOnDragEnterDescr => GetResourceString("ControlOnDragEnterDescr");
    /// <summary>Occurs when an object is dragged out of the control's bounds.</summary>
    internal static string @ControlOnDragLeaveDescr => GetResourceString("ControlOnDragLeaveDescr");
    /// <summary>Occurs when an object is dragged over the control's bounds.</summary>
    internal static string @ControlOnDragOverDescr => GetResourceString("ControlOnDragOverDescr");
    /// <summary>Occurs when the control's enabled state changes.</summary>
    internal static string @ControlOnEnabledChangedDescr => GetResourceString("ControlOnEnabledChangedDescr");
    /// <summary>Occurs when the control becomes the active control of the form.</summary>
    internal static string @ControlOnEnterDescr => GetResourceString("ControlOnEnterDescr");
    /// <summary>Event raised when the value of the Font property is changed on Control.</summary>
    internal static string @ControlOnFontChangedDescr => GetResourceString("ControlOnFontChangedDescr");
    /// <summary>Event raised when the value of the ForeColor property is changed on Control.</summary>
    internal static string @ControlOnForeColorChangedDescr => GetResourceString("ControlOnForeColorChangedDescr");
    /// <summary>Occurs when the mouse drags an item. The system requests that the Control provide feedback to that effect.</summary>
    internal static string @ControlOnGiveFeedbackDescr => GetResourceString("ControlOnGiveFeedbackDescr");
    /// <summary>Occurs when the control gets focus.</summary>
    internal static string @ControlOnGotFocusDescr => GetResourceString("ControlOnGotFocusDescr");
    /// <summary>Occurs when the user invokes Help for the control.</summary>
    internal static string @ControlOnHelpDescr => GetResourceString("ControlOnHelpDescr");
    /// <summary>Occurs when the control's input method editor (IME) mode changes.</summary>
    internal static string @ControlOnImeModeChangedDescr => GetResourceString("ControlOnImeModeChangedDescr");
    /// <summary>Occurs when a control's display requires redrawing.</summary>
    internal static string @ControlOnInvalidateDescr => GetResourceString("ControlOnInvalidateDescr");
    /// <summary>Occurs when a key is first pressed.</summary>
    internal static string @ControlOnKeyDownDescr => GetResourceString("ControlOnKeyDownDescr");
    /// <summary>Occurs when the control has focus and the user presses and releases a key.</summary>
    internal static string @ControlOnKeyPressDescr => GetResourceString("ControlOnKeyPressDescr");
    /// <summary>Occurs when a key is released.</summary>
    internal static string @ControlOnKeyUpDescr => GetResourceString("ControlOnKeyUpDescr");
    /// <summary>Occurs when the control is about to lay out its contents.</summary>
    internal static string @ControlOnLayoutDescr => GetResourceString("ControlOnLayoutDescr");
    /// <summary>Occurs when the control is no longer the active control of the form.</summary>
    internal static string @ControlOnLeaveDescr => GetResourceString("ControlOnLeaveDescr");
    /// <summary>Event raised when the value of the Location property is changed on Control.</summary>
    internal static string @ControlOnLocationChangedDescr => GetResourceString("ControlOnLocationChangedDescr");
    /// <summary>Occurs when the control loses focus.</summary>
    internal static string @ControlOnLostFocusDescr => GetResourceString("ControlOnLostFocusDescr");
    /// <summary>Occurs when the Margin property has changed.</summary>
    internal static string @ControlOnMarginChangedDescr => GetResourceString("ControlOnMarginChangedDescr");
    /// <summary>Occurs after the mouse capture is changed.</summary>
    internal static string @ControlOnMouseCaptureChangedDescr => GetResourceString("ControlOnMouseCaptureChangedDescr");
    /// <summary>Occurs when the control is clicked by the mouse.</summary>
    internal static string @ControlOnMouseClickDescr => GetResourceString("ControlOnMouseClickDescr");
    /// <summary>Occurs when the control is double clicked by the mouse.</summary>
    internal static string @ControlOnMouseDoubleClickDescr => GetResourceString("ControlOnMouseDoubleClickDescr");
    /// <summary>Occurs when the mouse pointer is over the component and a mouse button is pressed.</summary>
    internal static string @ControlOnMouseDownDescr => GetResourceString("ControlOnMouseDownDescr");
    /// <summary>Occurs when the mouse enters the visible part of the control.</summary>
    internal static string @ControlOnMouseEnterDescr => GetResourceString("ControlOnMouseEnterDescr");
    /// <summary>Occurs when the mouse remains stationary inside of the control for an amount of time.</summary>
    internal static string @ControlOnMouseHoverDescr => GetResourceString("ControlOnMouseHoverDescr");
    /// <summary>Occurs when the mouse leaves the visible part of the control.</summary>
    internal static string @ControlOnMouseLeaveDescr => GetResourceString("ControlOnMouseLeaveDescr");
    /// <summary>Occurs when the mouse pointer is moved over the component.</summary>
    internal static string @ControlOnMouseMoveDescr => GetResourceString("ControlOnMouseMoveDescr");
    /// <summary>Occurs when the mouse pointer is over the component and a mouse button is released.</summary>
    internal static string @ControlOnMouseUpDescr => GetResourceString("ControlOnMouseUpDescr");
    /// <summary>Occurs when the mouse wheel moves while the control has focus.</summary>
    internal static string @ControlOnMouseWheelDescr => GetResourceString("ControlOnMouseWheelDescr");
    /// <summary>Occurs when a control is moved.</summary>
    internal static string @ControlOnMoveDescr => GetResourceString("ControlOnMoveDescr");
    /// <summary>Occurs when the Padding property has changed.</summary>
    internal static string @ControlOnPaddingChangedDescr => GetResourceString("ControlOnPaddingChangedDescr");
    /// <summary>Occurs when a control needs repainting.</summary>
    internal static string @ControlOnPaintDescr => GetResourceString("ControlOnPaintDescr");
    /// <summary>Event raised when the value of the Parent property is changed on Control.</summary>
    internal static string @ControlOnParentChangedDescr => GetResourceString("ControlOnParentChangedDescr");
    /// <summary>Occurs when an Accessibility client invokes Help for the control.</summary>
    internal static string @ControlOnQueryAccessibilityHelpDescr => GetResourceString("ControlOnQueryAccessibilityHelpDescr");
    /// <summary>Occurs when the mouse drags an item. The system requests whether the drag-and-drop operation should be allowed to continue.</summary>
    internal static string @ControlOnQueryContinueDragDescr => GetResourceString("ControlOnQueryContinueDragDescr");
    /// <summary>Occurs when the control enters the sizing modal loop.</summary>
    internal static string @ControlOnResizeBeginDescr => GetResourceString("ControlOnResizeBeginDescr");
    /// <summary>Occurs when a control is resized.</summary>
    internal static string @ControlOnResizeDescr => GetResourceString("ControlOnResizeDescr");
    /// <summary>Occurs when the control exits the sizing modal loop.</summary>
    internal static string @ControlOnResizeEndDescr => GetResourceString("ControlOnResizeEndDescr");
    /// <summary>Occurs when the value of the RightToLeft property changes.</summary>
    internal static string @ControlOnRightToLeftChangedDescr => GetResourceString("ControlOnRightToLeftChangedDescr");
    /// <summary>Occurs when the value of the RightToLeftLayout property changes.</summary>
    internal static string @ControlOnRightToLeftLayoutChangedDescr => GetResourceString("ControlOnRightToLeftLayoutChangedDescr");
    /// <summary>Event raised when the value of the Size property is changed on Control.</summary>
    internal static string @ControlOnSizeChangedDescr => GetResourceString("ControlOnSizeChangedDescr");
    /// <summary>Event raised when the window style of a Control is changed.</summary>
    internal static string @ControlOnStyleChangedDescr => GetResourceString("ControlOnStyleChangedDescr");
    /// <summary>Event raised when the system colors change.</summary>
    internal static string @ControlOnSystemColorsChangedDescr => GetResourceString("ControlOnSystemColorsChangedDescr");
    /// <summary>Event raised when the value of the TabIndex property is changed.</summary>
    internal static string @ControlOnTabIndexChangedDescr => GetResourceString("ControlOnTabIndexChangedDescr");
    /// <summary>Event raised when the value of the TabStop property is changed on Control.</summary>
    internal static string @ControlOnTabStopChangedDescr => GetResourceString("ControlOnTabStopChangedDescr");
    /// <summary>Event raised when the value of the Text property is changed on Control.</summary>
    internal static string @ControlOnTextChangedDescr => GetResourceString("ControlOnTextChangedDescr");
    /// <summary>Occurs after a control has been successfully validated.</summary>
    internal static string @ControlOnValidatedDescr => GetResourceString("ControlOnValidatedDescr");
    /// <summary>Occurs when the control is validating.</summary>
    internal static string @ControlOnValidatingDescr => GetResourceString("ControlOnValidatingDescr");
    /// <summary>Occurs when the control's visibility changes.</summary>
    internal static string @ControlOnVisibleChangedDescr => GetResourceString("ControlOnVisibleChangedDescr");
    /// <summary>Specifies the interior spacing of a control.</summary>
    internal static string @ControlPaddingDescr => GetResourceString("ControlPaddingDescr");
    /// <summary>The parent of this control.</summary>
    internal static string @ControlParentDescr => GetResourceString("ControlParentDescr");
    /// <summary>Retrieves the name of the product associated with this component.</summary>
    internal static string @ControlProductNameDescr => GetResourceString("ControlProductNameDescr");
    /// <summary>Retrieves the version of the product associated with this component.</summary>
    internal static string @ControlProductVersionDescr => GetResourceString("ControlProductVersionDescr");
    /// <summary>Determines if this control is in the process of recreating its handle.</summary>
    internal static string @ControlRecreatingHandleDescr => GetResourceString("ControlRecreatingHandleDescr");
    /// <summary>Event raised when the value of Region property is changed on Control.</summary>
    internal static string @ControlRegionChangedDescr => GetResourceString("ControlRegionChangedDescr");
    /// <summary>The region, or shape, of this control.</summary>
    internal static string @ControlRegionDescr => GetResourceString("ControlRegionDescr");
    /// <summary>Indicates whether the control should redraw itself when resized.</summary>
    internal static string @ControlResizeRedrawDescr => GetResourceString("ControlResizeRedrawDescr");
    /// <summary>The distance, in pixels, between the right edge of the control and the left edge of its container's client area.</summary>
    internal static string @ControlRightDescr => GetResourceString("ControlRightDescr");
    /// <summary>Indicates whether the component should draw right-to-left for RTL languages.</summary>
    internal static string @ControlRightToLeftDescr => GetResourceString("ControlRightToLeftDescr");
    /// <summary>Indicates whether the control layout is right-to-left when the RightToLeft property is set to Yes.</summary>
    internal static string @ControlRightToLeftLayoutDescr => GetResourceString("ControlRightToLeftLayoutDescr");
    /// <summary>The size of the control in pixels.</summary>
    internal static string @ControlSizeDescr => GetResourceString("ControlSizeDescr");
    /// <summary>Determines the index in the TAB order that this control will occupy.</summary>
    internal static string @ControlTabIndexDescr => GetResourceString("ControlTabIndexDescr");
    /// <summary>Indicates whether the user can use the TAB key to give focus to the control.</summary>
    internal static string @ControlTabStopDescr => GetResourceString("ControlTabStopDescr");
    /// <summary>User-defined data associated with the object.</summary>
    internal static string @ControlTagDescr => GetResourceString("ControlTagDescr");
    /// <summary>The text associated with the control.</summary>
    internal static string @ControlTextDescr => GetResourceString("ControlTextDescr");
    /// <summary>The top of the control, in container coordinates.</summary>
    internal static string @ControlTopDescr => GetResourceString("ControlTopDescr");
    /// <summary>Retrieves the top-level control that contains this control.</summary>
    internal static string @ControlTopLevelControlDescr => GetResourceString("ControlTopLevelControlDescr");
    /// <summary>Getting value of property '{0}' is not supported by this method.</summary>
    internal static string @ControlUnsupportedProperty => GetResourceString("ControlUnsupportedProperty");
    /// <summary>Event raised when SystemInformation UserPreference changed event is raised</summary>
    internal static string @ControlUserPreferenceChangedDescr => GetResourceString("ControlUserPreferenceChangedDescr");
    /// <summary>Event raised when SystemInformation UserPreferenceChanging event is raised</summary>
    internal static string @ControlUserPreferenceChangingDescr => GetResourceString("ControlUserPreferenceChangingDescr");
    /// <summary>When this property is true, the Cursor property of the control and its child controls is set to WaitCursor.</summary>
    internal static string @ControlUseWaitCursorDescr => GetResourceString("ControlUseWaitCursorDescr");
    /// <summary>Determines whether the control is visible or hidden.</summary>
    internal static string @ControlVisibleDescr => GetResourceString("ControlVisibleDescr");
    /// <summary>The width of the control, in container coordinates.</summary>
    internal static string @ControlWidthDescr => GetResourceString("ControlWidthDescr");
    /// <summary>The location where native messages will be routed.</summary>
    internal static string @ControlWindowTargetDescr => GetResourceString("ControlWindowTargetDescr");
    /// <summary>The coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</summary>
    internal static string @ControlWithScrollbarsPositionDescr => GetResourceString("ControlWithScrollbarsPositionDescr");
    /// <summary>The size of the control if the screen were infinitely large.</summary>
    internal static string @ControlWithScrollbarsVirtualSizeDescr => GetResourceString("ControlWithScrollbarsVirtualSizeDescr");
    /// <summary>The list must be an IBindingList to AddNew.</summary>
    internal static string @CurrencyManagerCantAddNew => GetResourceString("CurrencyManagerCantAddNew");
    /// <summary>System cursors cannot be converted to byte[].</summary>
    internal static string @CursorCannotCovertToBytes => GetResourceString("CursorCannotCovertToBytes");
    /// <summary>Custom cursors cannot be converted to string.</summary>
    internal static string @CursorCannotCovertToString => GetResourceString("CursorCannotCovertToString");
    /// <summary>Stock cursors cannot be serialized.</summary>
    internal static string @CursorNonSerializableHandle => GetResourceString("CursorNonSerializableHandle");
    /// <summary>AddNew is not supported for property to property binding.</summary>
    internal static string @DataBindingAddNewNotSupportedOnPropertyManager => GetResourceString("DataBindingAddNewNotSupportedOnPropertyManager");
    /// <summary>Detected a property binding cycle for the property '{0}'</summary>
    internal static string @DataBindingCycle => GetResourceString("DataBindingCycle");
    /// <summary>DataBinding cannot find a row in the list that is suitable for all bindings.</summary>
    internal static string @DataBindingPushDataException => GetResourceString("DataBindingPushDataException");
    /// <summary>RemoveAt is not supported for property-to-property binding.</summary>
    internal static string @DataBindingRemoveAtNotSupportedOnPropertyManager => GetResourceString("DataBindingRemoveAtNotSupportedOnPropertyManager");
    /// <summary>Press</summary>
    internal static string @DataGridView_AccButtonCellDefaultAction => GetResourceString("DataGridView_AccButtonCellDefaultAction");
    /// <summary>Edit</summary>
    internal static string @DataGridView_AccCellDefaultAction => GetResourceString("DataGridView_AccCellDefaultAction");
    /// <summary>Press to check</summary>
    internal static string @DataGridView_AccCheckBoxCellDefaultActionCheck => GetResourceString("DataGridView_AccCheckBoxCellDefaultActionCheck");
    /// <summary>Press to uncheck</summary>
    internal static string @DataGridView_AccCheckBoxCellDefaultActionUncheck => GetResourceString("DataGridView_AccCheckBoxCellDefaultActionUncheck");
    /// <summary>Press to sort column</summary>
    internal static string @DataGridView_AccColumnHeaderCellDefaultAction => GetResourceString("DataGridView_AccColumnHeaderCellDefaultAction");
    /// <summary>Press to select column</summary>
    internal static string @DataGridView_AccColumnHeaderCellSelectDefaultAction => GetResourceString("DataGridView_AccColumnHeaderCellSelectDefaultAction");
    /// <summary>{0} Row {1}</summary>
    internal static string @DataGridView_AccDataGridViewCellName => GetResourceString("DataGridView_AccDataGridViewCellName");
    /// <summary>Editing Control</summary>
    internal static string @DataGridView_AccEditingControlAccName => GetResourceString("DataGridView_AccEditingControlAccName");
    /// <summary>Editing Panel</summary>
    internal static string @DataGridView_AccEditingPanelAccName => GetResourceString("DataGridView_AccEditingPanelAccName");
    /// <summary>Horizontal</summary>
    internal static string @DataGridView_AccHorizontalScrollBarAccName => GetResourceString("DataGridView_AccHorizontalScrollBarAccName");
    /// <summary>Click</summary>
    internal static string @DataGridView_AccLinkCellDefaultAction => GetResourceString("DataGridView_AccLinkCellDefaultAction");
    /// <summary>(null)</summary>
    internal static string @DataGridView_AccNullValue => GetResourceString("DataGridView_AccNullValue");
    /// <summary>(Create New)</summary>
    internal static string @DataGridView_AccRowCreateNew => GetResourceString("DataGridView_AccRowCreateNew");
    /// <summary>Row {0}</summary>
    internal static string @DataGridView_AccRowName => GetResourceString("DataGridView_AccRowName");
    /// <summary>Selected Cells</summary>
    internal static string @DataGridView_AccSelectedCellsName => GetResourceString("DataGridView_AccSelectedCellsName");
    /// <summary>Selected Row Cells</summary>
    internal static string @DataGridView_AccSelectedRowCellsName => GetResourceString("DataGridView_AccSelectedRowCellsName");
    /// <summary>Press to Select All</summary>
    internal static string @DataGridView_AccTopLeftColumnHeaderCellDefaultAction => GetResourceString("DataGridView_AccTopLeftColumnHeaderCellDefaultAction");
    /// <summary>Top Left Header Cell</summary>
    internal static string @DataGridView_AccTopLeftColumnHeaderCellName => GetResourceString("DataGridView_AccTopLeftColumnHeaderCellName");
    /// <summary>Top Right Header Cell</summary>
    internal static string @DataGridView_AccTopLeftColumnHeaderCellNameRTL => GetResourceString("DataGridView_AccTopLeftColumnHeaderCellNameRTL");
    /// <summary>Top Row</summary>
    internal static string @DataGridView_AccTopRow => GetResourceString("DataGridView_AccTopRow");
    /// <summary>Vertical</summary>
    internal static string @DataGridView_AccVerticalScrollBarAccName => GetResourceString("DataGridView_AccVerticalScrollBarAccName");
    /// <summary>At least one of the DataGridView control's columns has no cell template.</summary>
    internal static string @DataGridView_AColumnHasNoCellTemplate => GetResourceString("DataGridView_AColumnHasNoCellTemplate");
    /// <summary>Property {0} cannot be set to the advanced cell border style provided.</summary>
    internal static string @DataGridView_AdvancedCellBorderStyleInvalid => GetResourceString("DataGridView_AdvancedCellBorderStyleInvalid");
    /// <summary>Indicates whether the option to add rows is displayed to the user.</summary>
    internal static string @DataGridView_AllowUserToAddRowsDescr => GetResourceString("DataGridView_AllowUserToAddRowsDescr");
    /// <summary>Indicates whether the user is allowed to delete rows from the DataGridView.</summary>
    internal static string @DataGridView_AllowUserToDeleteRowsDescr => GetResourceString("DataGridView_AllowUserToDeleteRowsDescr");
    /// <summary>Indicates whether manual column repositioning is enabled.</summary>
    internal static string @DataGridView_AllowUserToOrderColumnsDescr => GetResourceString("DataGridView_AllowUserToOrderColumnsDescr");
    /// <summary>Indicates whether users can resize columns.</summary>
    internal static string @DataGridView_AllowUserToResizeColumnsDescr => GetResourceString("DataGridView_AllowUserToResizeColumnsDescr");
    /// <summary>Indicates whether users can resize rows.</summary>
    internal static string @DataGridView_AllowUserToResizeRowsDescr => GetResourceString("DataGridView_AllowUserToResizeRowsDescr");
    /// <summary>The default cell style applied to odd-numbered rows.</summary>
    internal static string @DataGridView_AlternatingRowsDefaultCellStyleDescr => GetResourceString("DataGridView_AlternatingRowsDefaultCellStyleDescr");
    /// <summary>At least one of the provided columns is null.</summary>
    internal static string @DataGridView_AtLeastOneColumnIsNull => GetResourceString("DataGridView_AtLeastOneColumnIsNull");
    /// <summary>At least one of the provided rows is null.</summary>
    internal static string @DataGridView_AtLeastOneRowIsNull => GetResourceString("DataGridView_AtLeastOneRowIsNull");
    /// <summary>Determines the auto size mode for the visible columns.</summary>
    internal static string @DataGridView_AutoSizeColumnsModeDescr => GetResourceString("DataGridView_AutoSizeColumnsModeDescr");
    /// <summary>Determines the auto size mode for the visible rows.</summary>
    internal static string @DataGridView_AutoSizeRowsModeDescr => GetResourceString("DataGridView_AutoSizeRowsModeDescr");
    /// <summary>Operation is not valid because it results in a reentrant call to the BeginEdit function.</summary>
    internal static string @DataGridView_BeginEditNotReentrant => GetResourceString("DataGridView_BeginEditNotReentrant");
    /// <summary>The border style for the DataGridView.</summary>
    internal static string @DataGridView_BorderStyleDescr => GetResourceString("DataGridView_BorderStyleDescr");
    /// <summary>The flat style appearance of the button cells in the column.</summary>
    internal static string @DataGridView_ButtonColumnFlatStyleDescr => GetResourceString("DataGridView_ButtonColumnFlatStyleDescr");
    /// <summary>The default text displayed on the button cell.</summary>
    internal static string @DataGridView_ButtonColumnTextDescr => GetResourceString("DataGridView_ButtonColumnTextDescr");
    /// <summary>Indicates whether the DataGridViewButtonColumn.Text property value is displayed as the button text for cells in this column.</summary>
    internal static string @DataGridView_ButtonColumnUseColumnTextForButtonValueDescr => GetResourceString("DataGridView_ButtonColumnUseColumnTextForButtonValueDescr");
    /// <summary>Occurs when the DataGridView.VirtualMode property of a DataGridView control is true and a row edit should be canceled.</summary>
    internal static string @DataGridView_CancelRowEditDescr => GetResourceString("DataGridView_CancelRowEditDescr");
    /// <summary>Visible column cannot be added because its AutoSize mode is Fill, and the column is frozen.</summary>
    internal static string @DataGridView_CannotAddAutoFillColumn => GetResourceString("DataGridView_CannotAddAutoFillColumn");
    /// <summary>Visible column cannot be added because its AutoSize mode includes its header, and the column headers are invisible.</summary>
    internal static string @DataGridView_CannotAddAutoSizedColumn => GetResourceString("DataGridView_CannotAddAutoSizedColumn");
    /// <summary>Column cannot be added because it is frozen and placed after an unfrozen column.</summary>
    internal static string @DataGridView_CannotAddFrozenColumn => GetResourceString("DataGridView_CannotAddFrozenColumn");
    /// <summary>Row cannot be added because it is frozen and placed after an unfrozen row.</summary>
    internal static string @DataGridView_CannotAddFrozenRow => GetResourceString("DataGridView_CannotAddFrozenRow");
    /// <summary>At least two provided columns are identical. Each provided column must be unique.</summary>
    internal static string @DataGridView_CannotAddIdenticalColumns => GetResourceString("DataGridView_CannotAddIdenticalColumns");
    /// <summary>At least two provided rows are identical. Each provided row must be unique.</summary>
    internal static string @DataGridView_CannotAddIdenticalRows => GetResourceString("DataGridView_CannotAddIdenticalRows");
    /// <summary>Column cannot be added because it is unfrozen and placed before a frozen column.</summary>
    internal static string @DataGridView_CannotAddNonFrozenColumn => GetResourceString("DataGridView_CannotAddNonFrozenColumn");
    /// <summary>Row cannot be added because it is unfrozen and placed before a frozen row.</summary>
    internal static string @DataGridView_CannotAddNonFrozenRow => GetResourceString("DataGridView_CannotAddNonFrozenRow");
    /// <summary>Column cannot be added because its CellType property is null.</summary>
    internal static string @DataGridView_CannotAddUntypedColumn => GetResourceString("DataGridView_CannotAddUntypedColumn");
    /// <summary>This operation cannot be performed while an auto-filled column is being resized.</summary>
    internal static string @DataGridView_CannotAlterAutoFillColumnParameter => GetResourceString("DataGridView_CannotAlterAutoFillColumnParameter");
    /// <summary>This operation cannot be performed while the DisplayIndex of a column is being adjusted.</summary>
    internal static string @DataGridView_CannotAlterDisplayIndexWithinAdjustments => GetResourceString("DataGridView_CannotAlterDisplayIndexWithinAdjustments");
    /// <summary>Columns AutoSize mode cannot be set to Fill because at least one visible column would inherit this AutoSize mode and is frozen.</summary>
    internal static string @DataGridView_CannotAutoFillFrozenColumns => GetResourceString("DataGridView_CannotAutoFillFrozenColumns");
    /// <summary>Columns AutoSize mode cannot be based exclusively on the headers because the column headers are invisible and at least one visible column would inherit this AutoSize mode.</summary>
    internal static string @DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders => GetResourceString("DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders");
    /// <summary>Column AutoSize mode cannot be based exclusively on the header because the column headers are invisible.</summary>
    internal static string @DataGridView_CannotAutoSizeInvisibleColumnHeader => GetResourceString("DataGridView_CannotAutoSizeInvisibleColumnHeader");
    /// <summary>Row AutoSize mode cannot be based on the row headers alone while they are invisible.</summary>
    internal static string @DataGridView_CannotAutoSizeRowInvisibleRowHeader => GetResourceString("DataGridView_CannotAutoSizeRowInvisibleRowHeader");
    /// <summary>Rows AutoSize mode cannot be based on the row headers alone while they are invisible.</summary>
    internal static string @DataGridView_CannotAutoSizeRowsInvisibleRowHeader => GetResourceString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader");
    /// <summary>Column cannot be made visible because its AutoSize mode includes its header and the column headers are invisible.</summary>
    internal static string @DataGridView_CannotMakeAutoSizedColumnVisible => GetResourceString("DataGridView_CannotMakeAutoSizedColumnVisible");
    /// <summary>Frozen column cannot be moved after an unfrozen column.</summary>
    internal static string @DataGridView_CannotMoveFrozenColumn => GetResourceString("DataGridView_CannotMoveFrozenColumn");
    /// <summary>Unfrozen column cannot be moved before a frozen column.</summary>
    internal static string @DataGridView_CannotMoveNonFrozenColumn => GetResourceString("DataGridView_CannotMoveNonFrozenColumn");
    /// <summary>ColumnCount property cannot be set on a data-bound DataGridView control.</summary>
    internal static string @DataGridView_CannotSetColumnCountOnDataBoundDataGridView => GetResourceString("DataGridView_CannotSetColumnCountOnDataBoundDataGridView");
    /// <summary>RowCount property cannot be set on a data-bound DataGridView control.</summary>
    internal static string @DataGridView_CannotSetRowCountOnDataBoundDataGridView => GetResourceString("DataGridView_CannotSetRowCountOnDataBoundDataGridView");
    /// <summary>DataGridView control must be bound to an IBindingList object to be sorted.</summary>
    internal static string @DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList => GetResourceString("DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList");
    /// <summary>Exception property is not set to a valid exception. ThrowException cannot be set to true.</summary>
    internal static string @DataGridView_CannotThrowNullException => GetResourceString("DataGridView_CannotThrowNullException");
    /// <summary>DataGridView control is data-bound. The control cannot use the comparer to perform the sort operation.</summary>
    internal static string @DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound => GetResourceString("DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound");
    /// <summary>Occurs when edit mode starts for the selected cell.</summary>
    internal static string @DataGridView_CellBeginEditDescr => GetResourceString("DataGridView_CellBeginEditDescr");
    /// <summary>Occurs when the border style of a cell changes.</summary>
    internal static string @DataGridView_CellBorderStyleChangedDescr => GetResourceString("DataGridView_CellBorderStyleChangedDescr");
    /// <summary>The cell border style for the DataGridView.</summary>
    internal static string @DataGridView_CellBorderStyleDescr => GetResourceString("DataGridView_CellBorderStyleDescr");
    /// <summary>Operation did not succeed because the program cannot commit or quit a cell value change.</summary>
    internal static string @DataGridView_CellChangeCannotBeCommittedOrAborted => GetResourceString("DataGridView_CellChangeCannotBeCommittedOrAborted");
    /// <summary>Occurs when any part of the cell is clicked.</summary>
    internal static string @DataGridView_CellClickDescr => GetResourceString("DataGridView_CellClickDescr");
    /// <summary>Occurs when the content within a cell is clicked.</summary>
    internal static string @DataGridView_CellContentClick => GetResourceString("DataGridView_CellContentClick");
    /// <summary>Occurs when a user double-clicks a cell's contents.</summary>
    internal static string @DataGridView_CellContentDoubleClick => GetResourceString("DataGridView_CellContentDoubleClick");
    /// <summary>Occurs when the DataGridViewCell.ContextMenuStrip property changes.</summary>
    internal static string @DataGridView_CellContextMenuStripChanged => GetResourceString("DataGridView_CellContextMenuStripChanged");
    /// <summary>Occurs when a cell's context menu strip is needed.</summary>
    internal static string @DataGridView_CellContextMenuStripNeeded => GetResourceString("DataGridView_CellContextMenuStripNeeded");
    /// <summary>Provided cell does not belong to this DataGridView control.</summary>
    internal static string @DataGridView_CellDoesNotBelongToDataGridView => GetResourceString("DataGridView_CellDoesNotBelongToDataGridView");
    /// <summary>Operation can only be performed on cells that belong to a DataGridView control.</summary>
    internal static string @DataGridView_CellDoesNotYetBelongToDataGridView => GetResourceString("DataGridView_CellDoesNotYetBelongToDataGridView");
    /// <summary>Occurs when the user double-clicks anywhere in a cell.</summary>
    internal static string @DataGridView_CellDoubleClickDescr => GetResourceString("DataGridView_CellDoubleClickDescr");
    /// <summary>Occurs when edit mode stops for the currently selected cell.</summary>
    internal static string @DataGridView_CellEndEditDescr => GetResourceString("DataGridView_CellEndEditDescr");
    /// <summary>Occurs when the cell receives input focus, becoming the current cell in the DataGridView.</summary>
    internal static string @DataGridView_CellEnterDescr => GetResourceString("DataGridView_CellEnterDescr");
    /// <summary>Occurs when the value of the DataGridViewCell.ErrorText property of a cell changes.</summary>
    internal static string @DataGridView_CellErrorTextChangedDescr => GetResourceString("DataGridView_CellErrorTextChangedDescr");
    /// <summary>Occurs when a cell's error text is needed.</summary>
    internal static string @DataGridView_CellErrorTextNeededDescr => GetResourceString("DataGridView_CellErrorTextNeededDescr");
    /// <summary>Occurs when the contents of a cell need to be formatted for display.</summary>
    internal static string @DataGridView_CellFormattingDescr => GetResourceString("DataGridView_CellFormattingDescr");
    /// <summary>Occurs when a cell loses input focus and is no longer the current cell.</summary>
    internal static string @DataGridView_CellLeaveDescr => GetResourceString("DataGridView_CellLeaveDescr");
    /// <summary>Occurs whenever a mouse clicks anywhere on a cell.</summary>
    internal static string @DataGridView_CellMouseClickDescr => GetResourceString("DataGridView_CellMouseClickDescr");
    /// <summary>Occurs when a cell within the DataGridView is double-clicked.</summary>
    internal static string @DataGridView_CellMouseDoubleClickDescr => GetResourceString("DataGridView_CellMouseDoubleClickDescr");
    /// <summary>Occurs when the user presses a mouse button while the mouse pointer is within the boundaries of a cell.</summary>
    internal static string @DataGridView_CellMouseDownDescr => GetResourceString("DataGridView_CellMouseDownDescr");
    /// <summary>Occurs when the mouse pointer enters a cell.</summary>
    internal static string @DataGridView_CellMouseEnterDescr => GetResourceString("DataGridView_CellMouseEnterDescr");
    /// <summary>Occurs when the mouse pointer leaves a cell.</summary>
    internal static string @DataGridView_CellMouseLeaveDescr => GetResourceString("DataGridView_CellMouseLeaveDescr");
    /// <summary>Occurs when the mouse pointer moves over the DataGridView control.</summary>
    internal static string @DataGridView_CellMouseMoveDescr => GetResourceString("DataGridView_CellMouseMoveDescr");
    /// <summary>Occurs when the user releases a mouse button while over a cell.</summary>
    internal static string @DataGridView_CellMouseUpDescr => GetResourceString("DataGridView_CellMouseUpDescr");
    /// <summary>Cell is not in a DataGridView. The cell cannot retrieve the inherited cell style.</summary>
    internal static string @DataGridView_CellNeedsDataGridViewForInheritedStyle => GetResourceString("DataGridView_CellNeedsDataGridViewForInheritedStyle");
    /// <summary>Occurs when a cell needs to be drawn.</summary>
    internal static string @DataGridView_CellPaintingDescr => GetResourceString("DataGridView_CellPaintingDescr");
    /// <summary>Occurs when the user leaves edit mode, regardless of whether the value of the current cell has been modified.</summary>
    internal static string @DataGridView_CellParsingDescr => GetResourceString("DataGridView_CellParsingDescr");
    /// <summary>Occurs when a cell state changes, such as when the cell loses or gains focus.</summary>
    internal static string @DataGridView_CellStateChangedDescr => GetResourceString("DataGridView_CellStateChangedDescr");
    /// <summary>Occurs when the DataGridViewCell.Style property of a DataGridViewCell changes.</summary>
    internal static string @DataGridView_CellStyleChangedDescr => GetResourceString("DataGridView_CellStyleChangedDescr");
    /// <summary>Occurs when one of the values of a cell style changes.</summary>
    internal static string @DataGridView_CellStyleContentChangedDescr => GetResourceString("DataGridView_CellStyleContentChangedDescr");
    /// <summary>Occurs when the DataGridViewCell.ToolTipText property value changes for a cell in the DataGridView.</summary>
    internal static string @DataGridView_CellToolTipTextChangedDescr => GetResourceString("DataGridView_CellToolTipTextChangedDescr");
    /// <summary>The text displayed by the ToolTip associated with this cell.</summary>
    internal static string @DataGridView_CellToolTipTextDescr => GetResourceString("DataGridView_CellToolTipTextDescr");
    /// <summary>Occurs when a cell's ToolTip text is needed.</summary>
    internal static string @DataGridView_CellToolTipTextNeededDescr => GetResourceString("DataGridView_CellToolTipTextNeededDescr");
    /// <summary>Occurs after the cell has finished validating.</summary>
    internal static string @DataGridView_CellValidatedDescr => GetResourceString("DataGridView_CellValidatedDescr");
    /// <summary>Occurs when the cell is validating.</summary>
    internal static string @DataGridView_CellValidatingDescr => GetResourceString("DataGridView_CellValidatingDescr");
    /// <summary>Occurs when the value of a cell changes.</summary>
    internal static string @DataGridView_CellValueChangedDescr => GetResourceString("DataGridView_CellValueChangedDescr");
    /// <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true and the DataGridView requires a value for a cell in order to format and display the cell.</summary>
    internal static string @DataGridView_CellValueNeededDescr => GetResourceString("DataGridView_CellValueNeededDescr");
    /// <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true, and a cell value has changed and requires storage in the underlying data source.</summary>
    internal static string @DataGridView_CellValuePushedDescr => GetResourceString("DataGridView_CellValuePushedDescr");
    /// <summary>The underlying value corresponding to a cell value of false, which appears as an unchecked box.</summary>
    internal static string @DataGridView_CheckBoxColumnFalseValueDescr => GetResourceString("DataGridView_CheckBoxColumnFalseValueDescr");
    /// <summary>The flat style appearance of the check box cells.</summary>
    internal static string @DataGridView_CheckBoxColumnFlatStyleDescr => GetResourceString("DataGridView_CheckBoxColumnFlatStyleDescr");
    /// <summary>The underlying value corresponding to an indeterminate or null cell value, which appears as a disabled checkbox.</summary>
    internal static string @DataGridView_CheckBoxColumnIndeterminateValueDescr => GetResourceString("DataGridView_CheckBoxColumnIndeterminateValueDescr");
    /// <summary>Indicates whether the hosted check box cells will allow three check states rather than two.</summary>
    internal static string @DataGridView_CheckBoxColumnThreeStateDescr => GetResourceString("DataGridView_CheckBoxColumnThreeStateDescr");
    /// <summary>The underlying value corresponding to a cell value of true, which appears as a checked box.</summary>
    internal static string @DataGridView_CheckBoxColumnTrueValueDescr => GetResourceString("DataGridView_CheckBoxColumnTrueValueDescr");
    /// <summary>Indicates whether users can copy cell text values to the Clipboard and whether row and column header text is included.</summary>
    internal static string @DataGridView_ClipboardCopyModeDescr => GetResourceString("DataGridView_ClipboardCopyModeDescr");
    /// <summary>Occurs when a column is added to the control.</summary>
    internal static string @DataGridView_ColumnAddedDescr => GetResourceString("DataGridView_ColumnAddedDescr");
    /// <summary>Provided column already belongs to the DataGridView control.</summary>
    internal static string @DataGridView_ColumnAlreadyBelongsToDataGridView => GetResourceString("DataGridView_ColumnAlreadyBelongsToDataGridView");
    /// <summary>DataGridView column bound to a read-only field must have ReadOnly set to True.</summary>
    internal static string @DataGridView_ColumnBoundToAReadOnlyFieldMustRemainReadOnly => GetResourceString("DataGridView_ColumnBoundToAReadOnlyFieldMustRemainReadOnly");
    /// <summary>Occurs when the DataGridViewColumn.ContextMenuStrip property of a column changes.</summary>
    internal static string @DataGridView_ColumnContextMenuStripChangedDescr => GetResourceString("DataGridView_ColumnContextMenuStripChangedDescr");
    /// <summary>The shortcut menu for the column.</summary>
    internal static string @DataGridView_ColumnContextMenuStripDescr => GetResourceString("DataGridView_ColumnContextMenuStripDescr");
    /// <summary>Occurs when the value of the DataGridViewColumn.DataPropertyName property for a column changes.</summary>
    internal static string @DataGridView_ColumnDataPropertyNameChangedDescr => GetResourceString("DataGridView_ColumnDataPropertyNameChangedDescr");
    /// <summary>The name of the data source property or database column to which the DataGridViewColumn is bound.</summary>
    internal static string @DataGridView_ColumnDataPropertyNameDescr => GetResourceString("DataGridView_ColumnDataPropertyNameDescr");
    /// <summary>Occurs when the value of the DataGridViewBand.DefaultCellStyle property for a column changes.</summary>
    internal static string @DataGridView_ColumnDefaultCellStyleChangedDescr => GetResourceString("DataGridView_ColumnDefaultCellStyleChangedDescr");
    /// <summary>The column's default cell style.</summary>
    internal static string @DataGridView_ColumnDefaultCellStyleDescr => GetResourceString("DataGridView_ColumnDefaultCellStyleDescr");
    /// <summary>Occurs when the value the DataGridViewColumn.DisplayIndex property for a column changes.</summary>
    internal static string @DataGridView_ColumnDisplayIndexChangedDescr => GetResourceString("DataGridView_ColumnDisplayIndexChangedDescr");
    /// <summary>Occurs when the user double-clicks a divider between two columns.</summary>
    internal static string @DataGridView_ColumnDividerDoubleClickDescr => GetResourceString("DataGridView_ColumnDividerDoubleClickDescr");
    /// <summary>Occurs when DataGridViewColumn.DividerWidth changes.</summary>
    internal static string @DataGridView_ColumnDividerWidthChangedDescr => GetResourceString("DataGridView_ColumnDividerWidthChangedDescr");
    /// <summary>The width of the column divider in pixels.</summary>
    internal static string @DataGridView_ColumnDividerWidthDescr => GetResourceString("DataGridView_ColumnDividerWidthDescr");
    /// <summary>Column provided does not belong to this DataGridView control.</summary>
    internal static string @DataGridView_ColumnDoesNotBelongToDataGridView => GetResourceString("DataGridView_ColumnDoesNotBelongToDataGridView");
    /// <summary>Indicates whether a column will move when a user scrolls the DataGridView control horizontally.</summary>
    internal static string @DataGridView_ColumnFrozenDescr => GetResourceString("DataGridView_ColumnFrozenDescr");
    /// <summary>Occurs when the contents of a column header cell change.</summary>
    internal static string @DataGridView_ColumnHeaderCellChangedDescr => GetResourceString("DataGridView_ColumnHeaderCellChangedDescr");
    /// <summary>Occurs when the user clicks a column header.</summary>
    internal static string @DataGridView_ColumnHeaderMouseClickDescr => GetResourceString("DataGridView_ColumnHeaderMouseClickDescr");
    /// <summary>Occurs when a column header is double-clicked.</summary>
    internal static string @DataGridView_ColumnHeaderMouseDoubleClickDescr => GetResourceString("DataGridView_ColumnHeaderMouseDoubleClickDescr");
    /// <summary>Occurs when the DataGridView.ColumnHeadersBorderStyle property changes.</summary>
    internal static string @DataGridView_ColumnHeadersBorderStyleChangedDescr => GetResourceString("DataGridView_ColumnHeadersBorderStyleChangedDescr");
    /// <summary>The border style applied to the column headers.</summary>
    internal static string @DataGridView_ColumnHeadersBorderStyleDescr => GetResourceString("DataGridView_ColumnHeadersBorderStyleDescr");
    /// <summary>Column headers cannot be made invisible because at least one column uses its header in its AutoSize mode.</summary>
    internal static string @DataGridView_ColumnHeadersCannotBeInvisible => GetResourceString("DataGridView_ColumnHeadersCannotBeInvisible");
    /// <summary>The default column header style.</summary>
    internal static string @DataGridView_ColumnHeadersDefaultCellStyleDescr => GetResourceString("DataGridView_ColumnHeadersDefaultCellStyleDescr");
    /// <summary>The height, in pixels, of the column headers row.</summary>
    internal static string @DataGridView_ColumnHeadersHeightDescr => GetResourceString("DataGridView_ColumnHeadersHeightDescr");
    /// <summary>Occurs when the value of the ColumnHeadersHeightSizeMode property changes.</summary>
    internal static string @DataGridView_ColumnHeadersHeightSizeModeChangedDescr => GetResourceString("DataGridView_ColumnHeadersHeightSizeModeChangedDescr");
    /// <summary>Determines the behavior for adjusting the column headers height.</summary>
    internal static string @DataGridView_ColumnHeadersHeightSizeModeDescr => GetResourceString("DataGridView_ColumnHeadersHeightSizeModeDescr");
    /// <summary>The caption text on the column's header cell.</summary>
    internal static string @DataGridView_ColumnHeaderTextDescr => GetResourceString("DataGridView_ColumnHeaderTextDescr");
    /// <summary>Occurs when the value of the DataGridViewColumn.MinimumWidth property for a column changes.</summary>
    internal static string @DataGridView_ColumnMinimumWidthChangedDescr => GetResourceString("DataGridView_ColumnMinimumWidthChangedDescr");
    /// <summary>The minimum width of the column in pixels.</summary>
    internal static string @DataGridView_ColumnMinimumWidthDescr => GetResourceString("DataGridView_ColumnMinimumWidthDescr");
    /// <summary>Occurs when the value of the DataGridViewColumn.Name property for a column changes.</summary>
    internal static string @DataGridView_ColumnNameChangedDescr => GetResourceString("DataGridView_ColumnNameChangedDescr");
    /// <summary>The name of the column.</summary>
    internal static string @DataGridView_ColumnNameDescr => GetResourceString("DataGridView_ColumnNameDescr");
    /// <summary>Data-bound DataGridView control can only be sorted on data-bound columns.</summary>
    internal static string @DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView => GetResourceString("DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView");
    /// <summary>Indicates whether the user can edit the column's cells.</summary>
    internal static string @DataGridView_ColumnReadOnlyDescr => GetResourceString("DataGridView_ColumnReadOnlyDescr");
    /// <summary>Occurs when a column is removed from the control.</summary>
    internal static string @DataGridView_ColumnRemovedDescr => GetResourceString("DataGridView_ColumnRemovedDescr");
    /// <summary>Indicates whether the column is resizable.</summary>
    internal static string @DataGridView_ColumnResizableDescr => GetResourceString("DataGridView_ColumnResizableDescr");
    /// <summary>The sort mode for the column.</summary>
    internal static string @DataGridView_ColumnSortModeDescr => GetResourceString("DataGridView_ColumnSortModeDescr");
    /// <summary>Occurs when a column changes state, such as gaining or losing focus.</summary>
    internal static string @DataGridView_ColumnStateChangedDescr => GetResourceString("DataGridView_ColumnStateChangedDescr");
    /// <summary>Occurs when the DataGridViewColumn.ToolTipText property value changes for a column in the DataGridView.</summary>
    internal static string @DataGridView_ColumnToolTipTextChangedDescr => GetResourceString("DataGridView_ColumnToolTipTextChangedDescr");
    /// <summary>The text used for ToolTips.</summary>
    internal static string @DataGridView_ColumnToolTipTextDescr => GetResourceString("DataGridView_ColumnToolTipTextDescr");
    /// <summary>Indicates whether the column is visible.</summary>
    internal static string @DataGridView_ColumnVisibleDescr => GetResourceString("DataGridView_ColumnVisibleDescr");
    /// <summary>Occurs when the value of the DataGridViewColumn.Width property for a column changes.</summary>
    internal static string @DataGridView_ColumnWidthChangedDescr => GetResourceString("DataGridView_ColumnWidthChangedDescr");
    /// <summary>The current width of the column.</summary>
    internal static string @DataGridView_ColumnWidthDescr => GetResourceString("DataGridView_ColumnWidthDescr");
    /// <summary>Indicates whether cells in the column will match the characters being entered in the cell with one from the possible selections.</summary>
    internal static string @DataGridView_ComboBoxColumnAutoCompleteDescr => GetResourceString("DataGridView_ComboBoxColumnAutoCompleteDescr");
    /// <summary>The data source that populates the selections for the combo boxes.</summary>
    internal static string @DataGridView_ComboBoxColumnDataSourceDescr => GetResourceString("DataGridView_ComboBoxColumnDataSourceDescr");
    /// <summary>A string that specifies the property or column from which to retrieve strings for display in the combo boxes.</summary>
    internal static string @DataGridView_ComboBoxColumnDisplayMemberDescr => GetResourceString("DataGridView_ComboBoxColumnDisplayMemberDescr");
    /// <summary>Determines how the combo box is displayed when not editing.</summary>
    internal static string @DataGridView_ComboBoxColumnDisplayStyleDescr => GetResourceString("DataGridView_ComboBoxColumnDisplayStyleDescr");
    /// <summary>Indicates if the display style only applies to the current cell.</summary>
    internal static string @DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr => GetResourceString("DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr");
    /// <summary>The width of the drop-down lists of the combo boxes.</summary>
    internal static string @DataGridView_ComboBoxColumnDropDownWidthDescr => GetResourceString("DataGridView_ComboBoxColumnDropDownWidthDescr");
    /// <summary>The flat style appearance of the column's cells.</summary>
    internal static string @DataGridView_ComboBoxColumnFlatStyleDescr => GetResourceString("DataGridView_ComboBoxColumnFlatStyleDescr");
    /// <summary>The collection of objects used as selections in the combo boxes.</summary>
    internal static string @DataGridView_ComboBoxColumnItemsDescr => GetResourceString("DataGridView_ComboBoxColumnItemsDescr");
    /// <summary>The maximum number of items in the drop-down list of the cells in the column.</summary>
    internal static string @DataGridView_ComboBoxColumnMaxDropDownItemsDescr => GetResourceString("DataGridView_ComboBoxColumnMaxDropDownItemsDescr");
    /// <summary>Indicates whether the items in the combo box are sorted.</summary>
    internal static string @DataGridView_ComboBoxColumnSortedDescr => GetResourceString("DataGridView_ComboBoxColumnSortedDescr");
    /// <summary>A string that specifies the property or column from which to get values that correspond to the selections in the drop-down list.</summary>
    internal static string @DataGridView_ComboBoxColumnValueMemberDescr => GetResourceString("DataGridView_ComboBoxColumnValueMemberDescr");
    /// <summary>Operation cannot be completed because the current cell could not be committed.</summary>
    internal static string @DataGridView_CommitFailedCannotCompleteOperation => GetResourceString("DataGridView_CommitFailedCannotCompleteOperation");
    /// <summary>Row associated with the currency manager's position cannot be made invisible.</summary>
    internal static string @DataGridView_CurrencyManagerRowCannotBeInvisible => GetResourceString("DataGridView_CurrencyManagerRowCannotBeInvisible");
    /// <summary>Current cell cannot be set to an invisible cell.</summary>
    internal static string @DataGridView_CurrentCellCannotBeInvisible => GetResourceString("DataGridView_CurrentCellCannotBeInvisible");
    /// <summary>Occurs when DataGridView.CurrentCell changes.</summary>
    internal static string @DataGridView_CurrentCellChangedDescr => GetResourceString("DataGridView_CurrentCellChangedDescr");
    /// <summary>Occurs when the state of a cell changes in relation to a change in its contents.</summary>
    internal static string @DataGridView_CurrentCellDirtyStateChangedDescr => GetResourceString("DataGridView_CurrentCellDirtyStateChangedDescr");
    /// <summary>Value DataGridViewCellBorderStyle. Custom cannot be used to set the {0} property.</summary>
    internal static string @DataGridView_CustomCellBorderStyleInvalid => GetResourceString("DataGridView_CustomCellBorderStyleInvalid");
    /// <summary>Event raised whenever the data source list changes.</summary>
    internal static string @DataGridView_DataBindingCompleteDescr => GetResourceString("DataGridView_DataBindingCompleteDescr");
    /// <summary>Occurs when an external data-parsing or validation operation throws an exception, or when an attempt to commit data to a data source does not succeed.</summary>
    internal static string @DataGridView_DataErrorDescr => GetResourceString("DataGridView_DataErrorDescr");
    /// <summary>The DataGridViewBand.DefaultCellStyle to be applied to the DataGridView if no other style is set.</summary>
    internal static string @DataGridView_DefaultCellStyleDescr => GetResourceString("DataGridView_DefaultCellStyleDescr");
    /// <summary>Occurs when the user enters the row for new records so that it can be populated with default values.</summary>
    internal static string @DataGridView_DefaultValuesNeededDescr => GetResourceString("DataGridView_DefaultValuesNeededDescr");
    /// <summary>Generating Clipboard content is not supported when the ClipboardCopyMode property is Disable.</summary>
    internal static string @DataGridView_DisabledClipboardCopy => GetResourceString("DataGridView_DisabledClipboardCopy");
    /// <summary>Occurs when a control for editing a cell is showing.</summary>
    internal static string @DataGridView_EditingControlShowingDescr => GetResourceString("DataGridView_EditingControlShowingDescr");
    /// <summary>Occurs when the value of the DataGridView.EditMode property changes.</summary>
    internal static string @DataGridView_EditModeChangedDescr => GetResourceString("DataGridView_EditModeChangedDescr");
    /// <summary>Identifies the mode that determines how cell editing is started.</summary>
    internal static string @DataGridView_EditModeDescr => GetResourceString("DataGridView_EditModeDescr");
    /// <summary>Value '{0}' cannot be set to an empty value.</summary>
    internal static string @DataGridView_EmptyColor => GetResourceString("DataGridView_EmptyColor");
    /// <summary>Indicates whether row and column headers use the visual styles of the user's current theme if visual styles are enabled for the application.</summary>
    internal static string @DataGridView_EnableHeadersVisualStylesDescr => GetResourceString("DataGridView_EnableHeadersVisualStylesDescr");
    /// <summary>DataGridView Default Error Dialog</summary>
    internal static string @DataGridView_ErrorMessageCaption => GetResourceString("DataGridView_ErrorMessageCaption");
    /// <summary>Exception occurred in the DataGridView.
    /// 
    /// To replace this default dialog box, handle the DataError event.</summary>
    internal static string @DataGridView_ErrorMessageText_NoException => GetResourceString("DataGridView_ErrorMessageText_NoException");
    /// <summary>The following exception occurred in the DataGridView:
    /// 
    /// {0}
    /// 
    /// To replace this default dialog please handle the DataError event.</summary>
    internal static string @DataGridView_ErrorMessageText_WithException => GetResourceString("DataGridView_ErrorMessageText_WithException");
    /// <summary>First displayed cell cannot be set to a header or shared cell.</summary>
    internal static string @DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell => GetResourceString("DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell");
    /// <summary>First displayed cell cannot be set to an invisible cell.</summary>
    internal static string @DataGridView_FirstDisplayedCellCannotBeInvisible => GetResourceString("DataGridView_FirstDisplayedCellCannotBeInvisible");
    /// <summary>FirstDisplayedScrollingColumnIndex property cannot be set to a frozen column.</summary>
    internal static string @DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen => GetResourceString("DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen");
    /// <summary>FirstDisplayedScrollingColumnIndex property cannot be set to an invisible column.</summary>
    internal static string @DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible => GetResourceString("DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible");
    /// <summary>FirstDisplayedScrollingRowIndex property cannot be set to a frozen row.</summary>
    internal static string @DataGridView_FirstDisplayedScrollingRowCannotBeFrozen => GetResourceString("DataGridView_FirstDisplayedScrollingRowCannotBeFrozen");
    /// <summary>FirstDisplayedScrollingRowIndex property cannot be set to an invisible row.</summary>
    internal static string @DataGridView_FirstDisplayedScrollingRowCannotBeInvisible => GetResourceString("DataGridView_FirstDisplayedScrollingRowCannotBeInvisible");
    /// <summary>Operation cannot be performed in this event handler.</summary>
    internal static string @DataGridView_ForbiddenOperationInEventHandler => GetResourceString("DataGridView_ForbiddenOperationInEventHandler");
    /// <summary>The frozen columns do not leave any room for a scrolling column to be displayed.</summary>
    internal static string @DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn => GetResourceString("DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn");
    /// <summary>The frozen rows do not leave any room for a scrolling row to be displayed.</summary>
    internal static string @DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow => GetResourceString("DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow");
    /// <summary>Property {0} of a DataGridViewHeaderCell cell cannot be set.</summary>
    internal static string @DataGridView_HeaderCellReadOnlyProperty => GetResourceString("DataGridView_HeaderCellReadOnlyProperty");
    /// <summary>DataGridView control cannot be sorted if it is bound to an IBindingList that does not support sorting.</summary>
    internal static string @DataGridView_IBindingListNeedsToSupportSorting => GetResourceString("DataGridView_IBindingListNeedsToSupportSorting");
    /// <summary>Parameter {0} is not a valid combination of DataGridViewElementState flags.</summary>
    internal static string @DataGridView_InvalidDataGridViewElementStateCombination => GetResourceString("DataGridView_InvalidDataGridViewElementStateCombination");
    /// <summary>Parameter {0} is not a valid combination of DataGridViewPaintParts flags.</summary>
    internal static string @DataGridView_InvalidDataGridViewPaintPartsCombination => GetResourceString("DataGridView_InvalidDataGridViewPaintPartsCombination");
    /// <summary>EditType property of the current cell does not point to a class that derives from System.Windows.Forms.Control and implements the interface IDataGridViewEditingControl.</summary>
    internal static string @DataGridView_InvalidEditingControl => GetResourceString("DataGridView_InvalidEditingControl");
    /// <summary>Operation is not valid when the DataGridView control is in virtual mode.</summary>
    internal static string @DataGridView_InvalidOperationInVirtualMode => GetResourceString("DataGridView_InvalidOperationInVirtualMode");
    /// <summary>Operation cannot be performed on a cell of a shared row.</summary>
    internal static string @DataGridView_InvalidOperationOnSharedCell => GetResourceString("DataGridView_InvalidOperationOnSharedCell");
    /// <summary>Operation cannot be performed on a shared row.</summary>
    internal static string @DataGridView_InvalidOperationOnSharedRow => GetResourceString("DataGridView_InvalidOperationOnSharedRow");
    /// <summary>Getting the {0} property of a cell in a shared row is not a valid operation.</summary>
    internal static string @DataGridView_InvalidPropertyGetOnSharedCell => GetResourceString("DataGridView_InvalidPropertyGetOnSharedCell");
    /// <summary>Getting the {0} property of a shared row is not a valid operation.</summary>
    internal static string @DataGridView_InvalidPropertyGetOnSharedRow => GetResourceString("DataGridView_InvalidPropertyGetOnSharedRow");
    /// <summary>Setting the {0} property of a shared row is not a valid operation.</summary>
    internal static string @DataGridView_InvalidPropertySetOnSharedRow => GetResourceString("DataGridView_InvalidPropertySetOnSharedRow");
    /// <summary>The color used to display an active link within cells in the column.</summary>
    internal static string @DataGridView_LinkColumnActiveLinkColorDescr => GetResourceString("DataGridView_LinkColumnActiveLinkColorDescr");
    /// <summary>A value that represents the behavior of links within cells in the column.</summary>
    internal static string @DataGridView_LinkColumnLinkBehaviorDescr => GetResourceString("DataGridView_LinkColumnLinkBehaviorDescr");
    /// <summary>The color used to display an unselected link within cells in the column.</summary>
    internal static string @DataGridView_LinkColumnLinkColorDescr => GetResourceString("DataGridView_LinkColumnLinkColorDescr");
    /// <summary>The link text displayed in all of the column's cells.</summary>
    internal static string @DataGridView_LinkColumnTextDescr => GetResourceString("DataGridView_LinkColumnTextDescr");
    /// <summary>Indicates whether the link changes color if it has been visited.</summary>
    internal static string @DataGridView_LinkColumnTrackVisitedStateDescr => GetResourceString("DataGridView_LinkColumnTrackVisitedStateDescr");
    /// <summary>Indicates whether the DataGridViewLinkColumn.Text property value is displayed as the link text.</summary>
    internal static string @DataGridView_LinkColumnUseColumnTextForLinkValueDescr => GetResourceString("DataGridView_LinkColumnUseColumnTextForLinkValueDescr");
    /// <summary>The color used to display a link that has been previously visited.</summary>
    internal static string @DataGridView_LinkColumnVisitedLinkColorDescr => GetResourceString("DataGridView_LinkColumnVisitedLinkColorDescr");
    /// <summary>Indicates whether the user is allowed to select more than one cell, row, or column of the DataGridView at a time.</summary>
    internal static string @DataGridView_MultiSelectDescr => GetResourceString("DataGridView_MultiSelectDescr");
    /// <summary>Parameter {0} is not valid for this operation. This parameter value must specify a mode which AutoSizes.</summary>
    internal static string @DataGridView_NeedAutoSizingCriteria => GetResourceString("DataGridView_NeedAutoSizingCriteria");
    /// <summary>Parameter {0} is not valid for this operation. It cannot be NotSet, None or Fill but needs to indicate a sizing criteria.</summary>
    internal static string @DataGridView_NeedColumnAutoSizingCriteria => GetResourceString("DataGridView_NeedColumnAutoSizingCriteria");
    /// <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView is true and the user navigates to the new row at the bottom of the DataGridView.</summary>
    internal static string @DataGridView_NewRowNeededDescr => GetResourceString("DataGridView_NewRowNeededDescr");
    /// <summary>Operation cannot be performed because there is no current cell. The CurrentCell property needs to be set first.</summary>
    internal static string @DataGridView_NoCurrentCell => GetResourceString("DataGridView_NoCurrentCell");
    /// <summary>No room is available to display columns.</summary>
    internal static string @DataGridView_NoRoomForDisplayedColumns => GetResourceString("DataGridView_NoRoomForDisplayedColumns");
    /// <summary>No room is available to display rows.</summary>
    internal static string @DataGridView_NoRoomForDisplayedRows => GetResourceString("DataGridView_NoRoomForDisplayedRows");
    /// <summary>Operation is not supported when VirtualMode is set to true.</summary>
    internal static string @DataGridView_OperationDisabledInVirtualMode => GetResourceString("DataGridView_OperationDisabledInVirtualMode");
    /// <summary>PreviousModes array has the wrong length. Its length must be equal to the number of columns in the DataGridView control.</summary>
    internal static string @DataGridView_PreviousModesHasWrongLength => GetResourceString("DataGridView_PreviousModesHasWrongLength");
    /// <summary>Property {0} must be set to 0.</summary>
    internal static string @DataGridView_PropertyMustBeZero => GetResourceString("DataGridView_PropertyMustBeZero");
    /// <summary>Operation not supported. Collection is read-only.</summary>
    internal static string @DataGridView_ReadOnlyCollection => GetResourceString("DataGridView_ReadOnlyCollection");
    /// <summary>Indicates whether the user can edit the cells of the DataGridView control.</summary>
    internal static string @DataGridView_ReadOnlyDescr => GetResourceString("DataGridView_ReadOnlyDescr");
    /// <summary>Row provided already belongs to a DataGridView control.</summary>
    internal static string @DataGridView_RowAlreadyBelongsToDataGridView => GetResourceString("DataGridView_RowAlreadyBelongsToDataGridView");
    /// <summary>Occurs when DataGridViewRow.ContextMenuStrip changes.</summary>
    internal static string @DataGridView_RowContextMenuStripChangedDescr => GetResourceString("DataGridView_RowContextMenuStripChangedDescr");
    /// <summary>The shortcut menu for the row.</summary>
    internal static string @DataGridView_RowContextMenuStripDescr => GetResourceString("DataGridView_RowContextMenuStripDescr");
    /// <summary>Occurs when the context menu strip is needed.</summary>
    internal static string @DataGridView_RowContextMenuStripNeededDescr => GetResourceString("DataGridView_RowContextMenuStripNeededDescr");
    /// <summary>Occurs when the value of the DataGridViewBand.DefaultCellStyle property for a row changes.</summary>
    internal static string @DataGridView_RowDefaultCellStyleChangedDescr => GetResourceString("DataGridView_RowDefaultCellStyleChangedDescr");
    /// <summary>The default cell style to be applied to the DataGridViewRow if no other style is set.</summary>
    internal static string @DataGridView_RowDefaultCellStyleDescr => GetResourceString("DataGridView_RowDefaultCellStyleDescr");
    /// <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true and the DataGridView needs to determine whether the current row has uncommitted changes.</summary>
    internal static string @DataGridView_RowDirtyStateNeededDescr => GetResourceString("DataGridView_RowDirtyStateNeededDescr");
    /// <summary>Occurs when the user double-clicks the divider between two rows.</summary>
    internal static string @DataGridView_RowDividerDoubleClickDescr => GetResourceString("DataGridView_RowDividerDoubleClickDescr");
    /// <summary>Occurs when the DataGridViewRow.DividerHeight property changes.</summary>
    internal static string @DataGridView_RowDividerHeightChangedDescr => GetResourceString("DataGridView_RowDividerHeightChangedDescr");
    /// <summary>The height of the row divider in pixels.</summary>
    internal static string @DataGridView_RowDividerHeightDescr => GetResourceString("DataGridView_RowDividerHeightDescr");
    /// <summary>Row provided does not belong to this DataGridView control.</summary>
    internal static string @DataGridView_RowDoesNotBelongToDataGridView => GetResourceString("DataGridView_RowDoesNotBelongToDataGridView");
    /// <summary>Operation can only be performed on rows that belong to a DataGridView control.</summary>
    internal static string @DataGridView_RowDoesNotYetBelongToDataGridView => GetResourceString("DataGridView_RowDoesNotYetBelongToDataGridView");
    /// <summary>Occurs when a row receives input focus and becomes the current row.</summary>
    internal static string @DataGridView_RowEnterDescr => GetResourceString("DataGridView_RowEnterDescr");
    /// <summary>Occurs when the DataGridViewRow.ErrorText property of a row changes.</summary>
    internal static string @DataGridView_RowErrorTextChangedDescr => GetResourceString("DataGridView_RowErrorTextChangedDescr");
    /// <summary>The error message text for row-level errors.</summary>
    internal static string @DataGridView_RowErrorTextDescr => GetResourceString("DataGridView_RowErrorTextDescr");
    /// <summary>Occurs when the DataGridView.VirtualMode property of the DataGridView control is true and the DataGridViewRow.ErrorText property for a row requires a value.</summary>
    internal static string @DataGridView_RowErrorTextNeededDescr => GetResourceString("DataGridView_RowErrorTextNeededDescr");
    /// <summary>Press to select row</summary>
    internal static string @DataGridView_RowHeaderCellAccDefaultAction => GetResourceString("DataGridView_RowHeaderCellAccDefaultAction");
    /// <summary>Occurs when the user changes the contents of a row header cell.</summary>
    internal static string @DataGridView_RowHeaderCellChangedDescr => GetResourceString("DataGridView_RowHeaderCellChangedDescr");
    /// <summary>Occurs when the user clicks within the boundaries of a row header.</summary>
    internal static string @DataGridView_RowHeaderMouseClickDescr => GetResourceString("DataGridView_RowHeaderMouseClickDescr");
    /// <summary>Occurs when a row header is double-clicked.</summary>
    internal static string @DataGridView_RowHeaderMouseDoubleClickDescr => GetResourceString("DataGridView_RowHeaderMouseDoubleClickDescr");
    /// <summary>Occurs when the DataGridView.RowHeadersBorderStyle property changes.</summary>
    internal static string @DataGridView_RowHeadersBorderStyleChangedDescr => GetResourceString("DataGridView_RowHeadersBorderStyleChangedDescr");
    /// <summary>The border style of the row header cells.</summary>
    internal static string @DataGridView_RowHeadersBorderStyleDescr => GetResourceString("DataGridView_RowHeadersBorderStyleDescr");
    /// <summary>Row headers cannot be made invisible because the DataGridView control includes the row headers in its AutoSize mode.</summary>
    internal static string @DataGridView_RowHeadersCannotBeInvisible => GetResourceString("DataGridView_RowHeadersCannotBeInvisible");
    /// <summary>The default style applied to the row header cells.</summary>
    internal static string @DataGridView_RowHeadersDefaultCellStyleDescr => GetResourceString("DataGridView_RowHeadersDefaultCellStyleDescr");
    /// <summary>The width, in pixels, of the column that contains the row headers.</summary>
    internal static string @DataGridView_RowHeadersWidthDescr => GetResourceString("DataGridView_RowHeadersWidthDescr");
    /// <summary>Occurs when the value of the RowHeadersWidthSizeMode property changes.</summary>
    internal static string @DataGridView_RowHeadersWidthSizeModeChangedDescr => GetResourceString("DataGridView_RowHeadersWidthSizeModeChangedDescr");
    /// <summary>Determines the behavior for adjusting the row headers width.</summary>
    internal static string @DataGridView_RowHeadersWidthSizeModeDescr => GetResourceString("DataGridView_RowHeadersWidthSizeModeDescr");
    /// <summary>Occurs when the value of the DataGridViewRow.Height property for a row changes.</summary>
    internal static string @DataGridView_RowHeightChangedDescr => GetResourceString("DataGridView_RowHeightChangedDescr");
    /// <summary>The current height of the row.</summary>
    internal static string @DataGridView_RowHeightDescr => GetResourceString("DataGridView_RowHeightDescr");
    /// <summary>Occurs when information about row height is requested.</summary>
    internal static string @DataGridView_RowHeightInfoNeededDescr => GetResourceString("DataGridView_RowHeightInfoNeededDescr");
    /// <summary>Occurs when the user changes the height of a row.</summary>
    internal static string @DataGridView_RowHeightInfoPushedDescr => GetResourceString("DataGridView_RowHeightInfoPushedDescr");
    /// <summary>Occurs when a row loses input focus and is no longer the current row.</summary>
    internal static string @DataGridView_RowLeaveDescr => GetResourceString("DataGridView_RowLeaveDescr");
    /// <summary>Occurs when the value of the DataGridViewRow.MinimumHeight property for a row changes.</summary>
    internal static string @DataGridView_RowMinimumHeightChangedDescr => GetResourceString("DataGridView_RowMinimumHeightChangedDescr");
    /// <summary>The minimum height of the row.</summary>
    internal static string @DataGridView_RowMinimumHeightDescr => GetResourceString("DataGridView_RowMinimumHeightDescr");
    /// <summary>Row provided must be unshared first.</summary>
    internal static string @DataGridView_RowMustBeUnshared => GetResourceString("DataGridView_RowMustBeUnshared");
    /// <summary>Event raised to perform row level painting, after all cell painting has occurred.</summary>
    internal static string @DataGridView_RowPostPaintDescr => GetResourceString("DataGridView_RowPostPaintDescr");
    /// <summary>Event raised to perform row level painting, before any cell painting has occurred.</summary>
    internal static string @DataGridView_RowPrePaintDescr => GetResourceString("DataGridView_RowPrePaintDescr");
    /// <summary>Indicates whether the row is read-only.</summary>
    internal static string @DataGridView_RowReadOnlyDescr => GetResourceString("DataGridView_RowReadOnlyDescr");
    /// <summary>Indicates whether users can resize the row or indicates that the behavior is inherited from the DataGridView.AllowUserToResizeRows property.</summary>
    internal static string @DataGridView_RowResizableDescr => GetResourceString("DataGridView_RowResizableDescr");
    /// <summary>Event raised when one or more rows are added to the rows collection.</summary>
    internal static string @DataGridView_RowsAddedDescr => GetResourceString("DataGridView_RowsAddedDescr");
    /// <summary>The default style applied to the row cells of the DataGridView.</summary>
    internal static string @DataGridView_RowsDefaultCellStyleDescr => GetResourceString("DataGridView_RowsDefaultCellStyleDescr");
    /// <summary>Event raised when one or more rows are removed from the rows collection.</summary>
    internal static string @DataGridView_RowsRemovedDescr => GetResourceString("DataGridView_RowsRemovedDescr");
    /// <summary>Occurs when a row changes state, such as losing or gaining input focus.</summary>
    internal static string @DataGridView_RowStateChangedDescr => GetResourceString("DataGridView_RowStateChangedDescr");
    /// <summary>Identifies the template row whose characteristics are used as the basis for all new implicitly added rows.</summary>
    internal static string @DataGridView_RowTemplateDescr => GetResourceString("DataGridView_RowTemplateDescr");
    /// <summary>Occurs when a row's state changes from shared to unshared.</summary>
    internal static string @DataGridView_RowUnsharedDescr => GetResourceString("DataGridView_RowUnsharedDescr");
    /// <summary>Occurs after a row has finished validating.</summary>
    internal static string @DataGridView_RowValidatedDescr => GetResourceString("DataGridView_RowValidatedDescr");
    /// <summary>Occurs when a row is validating.</summary>
    internal static string @DataGridView_RowValidatingDescr => GetResourceString("DataGridView_RowValidatingDescr");
    /// <summary>The type of scroll bars to display for the DataGridView control.</summary>
    internal static string @DataGridView_ScrollBarsDescr => GetResourceString("DataGridView_ScrollBarsDescr");
    /// <summary>Event raised when the grid scrolls horizontally or vertically. Use the ScrollEventArgs.Orientation to determine the direction scrolled.</summary>
    internal static string @DataGridView_ScrollDescr => GetResourceString("DataGridView_ScrollDescr");
    /// <summary>Occurs when the current selection changes.</summary>
    internal static string @DataGridView_SelectionChangedDescr => GetResourceString("DataGridView_SelectionChangedDescr");
    /// <summary>DataGridView control's SelectionMode cannot be set to {0} while it has a column with SortMode set to DataGridViewColumnSortMode.Automatic.</summary>
    internal static string @DataGridView_SelectionModeAndSortModeClash => GetResourceString("DataGridView_SelectionModeAndSortModeClash");
    /// <summary>Indicates how the cells of the DataGridView can be selected.</summary>
    internal static string @DataGridView_SelectionModeDescr => GetResourceString("DataGridView_SelectionModeDescr");
    /// <summary>{0} The SelectionMode property was reset to its default value {1}.</summary>
    internal static string @DataGridView_SelectionModeReset => GetResourceString("DataGridView_SelectionModeReset");
    /// <summary>Operation is not valid because it results in a reentrant call to the SetCurrentCellAddressCore function.</summary>
    internal static string @DataGridView_SetCurrentCellAddressCoreNotReentrant => GetResourceString("DataGridView_SetCurrentCellAddressCoreNotReentrant");
    /// <summary>Indicates whether to show cell errors.</summary>
    internal static string @DataGridView_ShowCellErrorsDescr => GetResourceString("DataGridView_ShowCellErrorsDescr");
    /// <summary>Indicates whether or not ToolTips will show when the mouse pointer pauses on a cell.</summary>
    internal static string @DataGridView_ShowCellToolTipsDescr => GetResourceString("DataGridView_ShowCellToolTipsDescr");
    /// <summary>Indicates whether or not the editing glyph is visible in the row header of the cell being edited.</summary>
    internal static string @DataGridView_ShowEditingIconDescr => GetResourceString("DataGridView_ShowEditingIconDescr");
    /// <summary>Indicates whether row headers will display error glyphs for each row that contains a data entry error.</summary>
    internal static string @DataGridView_ShowRowErrorsDescr => GetResourceString("DataGridView_ShowRowErrorsDescr");
    /// <summary>Width and height of the control cannot be set to values larger than {0}.</summary>
    internal static string @DataGridView_SizeTooLarge => GetResourceString("DataGridView_SizeTooLarge");
    /// <summary>Occurs when the DataGridView compares two cell values to perform a sort operation.</summary>
    internal static string @DataGridView_SortCompareDescr => GetResourceString("DataGridView_SortCompareDescr");
    /// <summary>Occurs when the DataGridView compares two cell values to perform a sort operation.</summary>
    internal static string @DataGridView_SortedDescr => GetResourceString("DataGridView_SortedDescr");
    /// <summary>Indicates whether the TAB key moves the focus to the next control in the tab order rather than moving focus to the next cell in the control.</summary>
    internal static string @DataGridView_StandardTabDescr => GetResourceString("DataGridView_StandardTabDescr");
    /// <summary>Specifies the maximum number of characters that can be entered into the text box.</summary>
    internal static string @DataGridView_TextBoxColumnMaxInputLengthDescr => GetResourceString("DataGridView_TextBoxColumnMaxInputLengthDescr");
    /// <summary>Color '{0}' cannot be set to a transparent color.</summary>
    internal static string @DataGridView_TransparentColor => GetResourceString("DataGridView_TransparentColor");
    /// <summary>Occurs when the user has finished adding a row to the DataGridView control.</summary>
    internal static string @DataGridView_UserAddedRowDescr => GetResourceString("DataGridView_UserAddedRowDescr");
    /// <summary>Occurs when the user has finished deleting a row from the DataGridView control.</summary>
    internal static string @DataGridView_UserDeletedRowDescr => GetResourceString("DataGridView_UserDeletedRowDescr");
    /// <summary>Occurs when the user deletes a row from the DataGridView control.</summary>
    internal static string @DataGridView_UserDeletingRowDescr => GetResourceString("DataGridView_UserDeletingRowDescr");
    /// <summary>Sum of the columns' FillWeight values cannot exceed {0}.</summary>
    internal static string @DataGridView_WeightSumCannotExceedLongMaxValue => GetResourceString("DataGridView_WeightSumCannotExceedLongMaxValue");
    /// <summary>Provided {0} must be of type {1} or derive from it.</summary>
    internal static string @DataGridView_WrongType => GetResourceString("DataGridView_WrongType");
    /// <summary>Occurs when the value of the AlternatingRowsDefaultCellStyle property changes.</summary>
    internal static string @DataGridViewAlternatingRowsDefaultCellStyleChangedDescr => GetResourceString("DataGridViewAlternatingRowsDefaultCellStyleChangedDescr");
    /// <summary>Occurs when the value of the AutoSizeMode property of a column changes.</summary>
    internal static string @DataGridViewAutoSizeColumnModeChangedDescr => GetResourceString("DataGridViewAutoSizeColumnModeChangedDescr");
    /// <summary>Occurs when the value of the AutoSizeColumnsMode property changes.</summary>
    internal static string @DataGridViewAutoSizeColumnsModeChangedDescr => GetResourceString("DataGridViewAutoSizeColumnsModeChangedDescr");
    /// <summary>Occurs when the value of the AutoSizeRowsMode property changes.</summary>
    internal static string @DataGridViewAutoSizeRowsModeChangedDescr => GetResourceString("DataGridViewAutoSizeRowsModeChangedDescr");
    /// <summary>Occurs when the value of the DataGridView.BackgroundColor property changes.</summary>
    internal static string @DataGridViewBackgroundColorChangedDescr => GetResourceString("DataGridViewBackgroundColorChangedDescr");
    /// <summary>The background color of the DataGridView.</summary>
    internal static string @DataGridViewBackgroundColorDescr => GetResourceString("DataGridViewBackgroundColorDescr");
    /// <summary>Selected property cannot be altered before this object is added to a DataGridView control.</summary>
    internal static string @DataGridViewBand_CannotSelect => GetResourceString("DataGridViewBand_CannotSelect");
    /// <summary>Minimum height provided cannot be smaller than {0}.</summary>
    internal static string @DataGridViewBand_MinimumHeightSmallerThanOne => GetResourceString("DataGridViewBand_MinimumHeightSmallerThanOne");
    /// <summary>Minimum width provided cannot be smaller than {0}.</summary>
    internal static string @DataGridViewBand_MinimumWidthSmallerThanOne => GetResourceString("DataGridViewBand_MinimumWidthSmallerThanOne");
    /// <summary>Uncommitted new row cannot be made invisible.</summary>
    internal static string @DataGridViewBand_NewRowCannotBeInvisible => GetResourceString("DataGridViewBand_NewRowCannotBeInvisible");
    /// <summary>BeginInit() has already been called without an EndInit().</summary>
    internal static string @DataGridViewBeginInit => GetResourceString("DataGridViewBeginInit");
    /// <summary>Occurs when the value of the BorderStyle property changes.</summary>
    internal static string @DataGridViewBorderStyleChangedDescr => GetResourceString("DataGridViewBorderStyleChangedDescr");
    /// <summary>ReadOnly property of a cell cannot be set before it is added to a row.</summary>
    internal static string @DataGridViewCell_CannotSetReadOnlyState => GetResourceString("DataGridViewCell_CannotSetReadOnlyState");
    /// <summary>Selected property of a cell cannot be set before the cell is added to a DataGridView control.</summary>
    internal static string @DataGridViewCell_CannotSetSelectedState => GetResourceString("DataGridViewCell_CannotSetSelectedState");
    /// <summary>Formatted value of the cell has a wrong type.</summary>
    internal static string @DataGridViewCell_FormattedValueHasWrongType => GetResourceString("DataGridViewCell_FormattedValueHasWrongType");
    /// <summary>FormattedValueType property of a cell cannot be null.</summary>
    internal static string @DataGridViewCell_FormattedValueTypeNull => GetResourceString("DataGridViewCell_FormattedValueTypeNull");
    /// <summary>ValueType property of a cell in a grid cannot be null.</summary>
    internal static string @DataGridViewCell_ValueTypeNull => GetResourceString("DataGridViewCell_ValueTypeNull");
    /// <summary>The owning DataGridViewCell object is already set.</summary>
    internal static string @DataGridViewCellAccessibleObject_OwnerAlreadySet => GetResourceString("DataGridViewCellAccessibleObject_OwnerAlreadySet");
    /// <summary>The owning DataGridViewCell object has not been set.</summary>
    internal static string @DataGridViewCellAccessibleObject_OwnerNotSet => GetResourceString("DataGridViewCellAccessibleObject_OwnerNotSet");
    /// <summary>At least one of the provided cells is null.</summary>
    internal static string @DataGridViewCellCollection_AtLeastOneCellIsNull => GetResourceString("DataGridViewCellCollection_AtLeastOneCellIsNull");
    /// <summary>At least two provided cells are identical. Each provided cell must be unique.</summary>
    internal static string @DataGridViewCellCollection_CannotAddIdenticalCells => GetResourceString("DataGridViewCellCollection_CannotAddIdenticalCells");
    /// <summary>Cell provided already belongs to a grid. This operation is not valid.</summary>
    internal static string @DataGridViewCellCollection_CellAlreadyBelongsToDataGridView => GetResourceString("DataGridViewCellCollection_CellAlreadyBelongsToDataGridView");
    /// <summary>Cell provided already belongs to a row. This operation is not valid.</summary>
    internal static string @DataGridViewCellCollection_CellAlreadyBelongsToDataGridViewRow => GetResourceString("DataGridViewCellCollection_CellAlreadyBelongsToDataGridViewRow");
    /// <summary>Cell provided cannot be found in the collection.</summary>
    internal static string @DataGridViewCellCollection_CellNotFound => GetResourceString("DataGridViewCellCollection_CellNotFound");
    /// <summary>Collection already belongs to a DataGridView control. This operation is no longer valid.</summary>
    internal static string @DataGridViewCellCollection_OwningRowAlreadyBelongsToDataGridView => GetResourceString("DataGridViewCellCollection_OwningRowAlreadyBelongsToDataGridView");
    /// <summary>DataGridViewCellStyle does not support transparent {0}.</summary>
    internal static string @DataGridViewCellStyle_TransparentColorNotAllowed => GetResourceString("DataGridViewCellStyle_TransparentColorNotAllowed");
    /// <summary>Indicates the position of the content within a cell.</summary>
    internal static string @DataGridViewCellStyleAlignmentDescr => GetResourceString("DataGridViewCellStyleAlignmentDescr");
    /// <summary>Selected</summary>
    internal static string @DataGridViewCheckBoxCell_ClipboardChecked => GetResourceString("DataGridViewCheckBoxCell_ClipboardChecked");
    /// <summary>False</summary>
    internal static string @DataGridViewCheckBoxCell_ClipboardFalse => GetResourceString("DataGridViewCheckBoxCell_ClipboardFalse");
    /// <summary>Indeterminate</summary>
    internal static string @DataGridViewCheckBoxCell_ClipboardIndeterminate => GetResourceString("DataGridViewCheckBoxCell_ClipboardIndeterminate");
    /// <summary>True</summary>
    internal static string @DataGridViewCheckBoxCell_ClipboardTrue => GetResourceString("DataGridViewCheckBoxCell_ClipboardTrue");
    /// <summary>Cleared</summary>
    internal static string @DataGridViewCheckBoxCell_ClipboardUnchecked => GetResourceString("DataGridViewCheckBoxCell_ClipboardUnchecked");
    /// <summary>The value provided for the DataGridViewCheckBoxCell has the wrong type.</summary>
    internal static string @DataGridViewCheckBoxCell_InvalidValueType => GetResourceString("DataGridViewCheckBoxCell_InvalidValueType");
    /// <summary>Column AutoSize mode cannot be based on the column headers alone while they are invisible.</summary>
    internal static string @DataGridViewColumn_AutoSizeCriteriaCannotUseInvisibleHeaders => GetResourceString("DataGridViewColumn_AutoSizeCriteriaCannotUseInvisibleHeaders");
    /// <summary>Determines the auto size mode for this column.</summary>
    internal static string @DataGridViewColumn_AutoSizeModeDescr => GetResourceString("DataGridViewColumn_AutoSizeModeDescr");
    /// <summary>Operation cannot be completed because this DataGridViewColumn does not have a CellTemplate.</summary>
    internal static string @DataGridViewColumn_CellTemplateRequired => GetResourceString("DataGridViewColumn_CellTemplateRequired");
    /// <summary>The DisplayIndex property of a DataGridViewColumn must be smaller than the number of columns.</summary>
    internal static string @DataGridViewColumn_DisplayIndexExceedsColumnCount => GetResourceString("DataGridViewColumn_DisplayIndexExceedsColumnCount");
    /// <summary>DisplayIndex property of a DataGridViewColumn cannot be negative.</summary>
    internal static string @DataGridViewColumn_DisplayIndexNegative => GetResourceString("DataGridViewColumn_DisplayIndexNegative");
    /// <summary>DisplayIndex property of a DataGridViewColumn must be smaller than {0}.</summary>
    internal static string @DataGridViewColumn_DisplayIndexTooLarge => GetResourceString("DataGridViewColumn_DisplayIndexTooLarge");
    /// <summary>The DisplayIndex property of a detached DataGridViewColumn cannot be smaller than -1.</summary>
    internal static string @DataGridViewColumn_DisplayIndexTooNegative => GetResourceString("DataGridViewColumn_DisplayIndexTooNegative");
    /// <summary>The weight that is used when sizing this column in the Fill auto size mode.</summary>
    internal static string @DataGridViewColumn_FillWeightDescr => GetResourceString("DataGridViewColumn_FillWeightDescr");
    /// <summary>Column's AutoSize mode cannot be set to Fill when it is also a frozen column.</summary>
    internal static string @DataGridViewColumn_FrozenColumnCannotAutoFill => GetResourceString("DataGridViewColumn_FrozenColumnCannotAutoFill");
    /// <summary>Column's SortMode cannot be set to {0} while the DataGridView control's SelectionMode is set to {1}.</summary>
    internal static string @DataGridViewColumn_SortModeAndSelectionModeClash => GetResourceString("DataGridViewColumn_SortModeAndSelectionModeClash");
    /// <summary>Column named {0} cannot be found.</summary>
    internal static string @DataGridViewColumnCollection_ColumnNotFound => GetResourceString("DataGridViewColumnCollection_ColumnNotFound");
    /// <summary>Column header's SortGlyphDirection cannot be set to {0} while the column's SortMode is set to NotSortable.</summary>
    internal static string @DataGridViewColumnHeaderCell_SortModeAndSortGlyphDirectionClash => GetResourceString("DataGridViewColumnHeaderCell_SortModeAndSortGlyphDirectionClash");
    /// <summary>Occurs when the value of the ColumnHeadersDefaultCellStyle property changes.</summary>
    internal static string @DataGridViewColumnHeadersDefaultCellStyleChangedDescr => GetResourceString("DataGridViewColumnHeadersDefaultCellStyleChangedDescr");
    /// <summary>Occurs when the value of the ColumnHeadersHeight property changes.</summary>
    internal static string @DataGridViewColumnHeadersHeightChangedDescr => GetResourceString("DataGridViewColumnHeadersHeightChangedDescr");
    /// <summary>Indicates whether the column headers row is displayed.</summary>
    internal static string @DataGridViewColumnHeadersVisibleDescr => GetResourceString("DataGridViewColumnHeadersVisibleDescr");
    /// <summary>Occurs when the value of the SortMode property for a column changes.</summary>
    internal static string @DataGridViewColumnSortModeChangedDescr => GetResourceString("DataGridViewColumnSortModeChangedDescr");
    /// <summary>DropDownWidth value cannot be smaller than {0}.</summary>
    internal static string @DataGridViewComboBoxCell_DropDownWidthOutOfRange => GetResourceString("DataGridViewComboBoxCell_DropDownWidthOutOfRange");
    /// <summary>Field called {0} does not exist.</summary>
    internal static string @DataGridViewComboBoxCell_FieldNotFound => GetResourceString("DataGridViewComboBoxCell_FieldNotFound");
    /// <summary>DataGridViewComboBoxCell value is not valid.</summary>
    internal static string @DataGridViewComboBoxCell_InvalidValue => GetResourceString("DataGridViewComboBoxCell_InvalidValue");
    /// <summary>MaxDropDownItems value cannot be smaller than {0} or larger than {1}.</summary>
    internal static string @DataGridViewComboBoxCell_MaxDropDownItemsOutOfRange => GetResourceString("DataGridViewComboBoxCell_MaxDropDownItemsOutOfRange");
    /// <summary>Occurs when the value of the DataMember property changes.</summary>
    internal static string @DataGridViewDataMemberChangedDescr => GetResourceString("DataGridViewDataMemberChangedDescr");
    /// <summary>Indicates a sub-list of the DataSource to show in the DataGridView control.</summary>
    internal static string @DataGridViewDataMemberDescr => GetResourceString("DataGridViewDataMemberDescr");
    /// <summary>Occurs when the value of the DataSource property changes.</summary>
    internal static string @DataGridViewDataSourceChangedDescr => GetResourceString("DataGridViewDataSourceChangedDescr");
    /// <summary>Indicates the source of data for the DataGridView control.</summary>
    internal static string @DataGridViewDataSourceDescr => GetResourceString("DataGridViewDataSourceDescr");
    /// <summary>Occurs when the value of the DefaultCellStyle property changes.</summary>
    internal static string @DataGridViewDefaultCellStyleChangedDescr => GetResourceString("DataGridViewDefaultCellStyleChangedDescr");
    /// <summary>ColumnIndex property is out of range.</summary>
    internal static string @DataGridViewElementPaintingEventArgs_ColumnIndexOutOfRange => GetResourceString("DataGridViewElementPaintingEventArgs_ColumnIndexOutOfRange");
    /// <summary>RowIndex property is out of range.</summary>
    internal static string @DataGridViewElementPaintingEventArgs_RowIndexOutOfRange => GetResourceString("DataGridViewElementPaintingEventArgs_RowIndexOutOfRange");
    /// <summary>The color of the grid lines separating the cells of the DataGridView.</summary>
    internal static string @DataGridViewGridColorDescr => GetResourceString("DataGridViewGridColorDescr");
    /// <summary>User-defined text associated with the image.</summary>
    internal static string @DataGridViewImageColumn_DescriptionDescr => GetResourceString("DataGridViewImageColumn_DescriptionDescr");
    /// <summary>The icon displayed in the cells of this column when the cell's DataGridViewCell.Value property is not set and the cell's DataGridViewImageCell.ValueIsIcon property is set to true.</summary>
    internal static string @DataGridViewImageColumn_IconDescr => GetResourceString("DataGridViewImageColumn_IconDescr");
    /// <summary>The image displayed in the cells of this column when the cell's DataGridViewCell.Value property is not set and the cell's DataGridViewImageCell.ValueIsIcon property is set to false.</summary>
    internal static string @DataGridViewImageColumn_ImageDescr => GetResourceString("DataGridViewImageColumn_ImageDescr");
    /// <summary>The image layout in the cells for this column.</summary>
    internal static string @DataGridViewImageColumn_ImageLayoutDescr => GetResourceString("DataGridViewImageColumn_ImageLayoutDescr");
    /// <summary>ImageColumnPadding</summary>
    internal static string @DataGridViewImageColumn_PaddingDescr => GetResourceString("DataGridViewImageColumn_PaddingDescr");
    /// <summary>Indicates whether cells in this column display System.Drawing.Icon values.</summary>
    internal static string @DataGridViewImageColumn_ValuesAreIconsDescr => GetResourceString("DataGridViewImageColumn_ValuesAreIconsDescr");
    /// <summary>Occurs when the value of the AllowUserToAddRows property changes.</summary>
    internal static string @DataGridViewOnAllowUserToAddRowsChangedDescr => GetResourceString("DataGridViewOnAllowUserToAddRowsChangedDescr");
    /// <summary>Occurs when the value of the AllowUserToDeleteRows property changes.</summary>
    internal static string @DataGridViewOnAllowUserToDeleteRowsChangedDescr => GetResourceString("DataGridViewOnAllowUserToDeleteRowsChangedDescr");
    /// <summary>Occurs when the value of the AllowUserToOrderColumns property changes.</summary>
    internal static string @DataGridViewOnAllowUserToOrderColumnsChangedDescr => GetResourceString("DataGridViewOnAllowUserToOrderColumnsChangedDescr");
    /// <summary>Occurs when the value of the AllowUserToResizeColumns property changes.</summary>
    internal static string @DataGridViewOnAllowUserToResizeColumnsChangedDescr => GetResourceString("DataGridViewOnAllowUserToResizeColumnsChangedDescr");
    /// <summary>Occurs when the value of the AllowUserToResizeRows property changes.</summary>
    internal static string @DataGridViewOnAllowUserToResizeRowsChangedDescr => GetResourceString("DataGridViewOnAllowUserToResizeRowsChangedDescr");
    /// <summary>Occurs when the value of the GridColor property changes.</summary>
    internal static string @DataGridViewOnGridColorChangedDescr => GetResourceString("DataGridViewOnGridColorChangedDescr");
    /// <summary>Occurs when the value of the MultiSelect property changes.</summary>
    internal static string @DataGridViewOnMultiSelectChangedDescr => GetResourceString("DataGridViewOnMultiSelectChangedDescr");
    /// <summary>Occurs when the value of the ReadOnly property changes.</summary>
    internal static string @DataGridViewOnReadOnlyChangedDescr => GetResourceString("DataGridViewOnReadOnlyChangedDescr");
    /// <summary>Owning DataGridViewRow object is already set.</summary>
    internal static string @DataGridViewRowAccessibleObject_OwnerAlreadySet => GetResourceString("DataGridViewRowAccessibleObject_OwnerAlreadySet");
    /// <summary>Owning DataGridViewRow object has not been set.</summary>
    internal static string @DataGridViewRowAccessibleObject_OwnerNotSet => GetResourceString("DataGridViewRowAccessibleObject_OwnerNotSet");
    /// <summary>Rows cannot be programmatically added to the DataGridView's rows collection when the control is data-bound.</summary>
    internal static string @DataGridViewRowCollection_AddUnboundRow => GetResourceString("DataGridViewRowCollection_AddUnboundRow");
    /// <summary>Selected row cannot be added to or inserted into the DataGridView control. The row must be deselected first.</summary>
    internal static string @DataGridViewRowCollection_CannotAddOrInsertSelectedRow => GetResourceString("DataGridViewRowCollection_CannotAddOrInsertSelectedRow");
    /// <summary>Uncommitted new row cannot be deleted.</summary>
    internal static string @DataGridViewRowCollection_CannotDeleteNewRow => GetResourceString("DataGridViewRowCollection_CannotDeleteNewRow");
    /// <summary>Rows collection cannot be programmatically cleared when the DataGridView control is data-bound to anything else than an IBindingList that supports change notification and allows deletion.</summary>
    internal static string @DataGridViewRowCollection_CantClearRowCollectionWithWrongSource => GetResourceString("DataGridViewRowCollection_CantClearRowCollectionWithWrongSource");
    /// <summary>Rows cannot be programmatically removed unless the DataGridView is data-bound to an IBindingList that supports change notification and allows deletion.</summary>
    internal static string @DataGridViewRowCollection_CantRemoveRowsWithWrongSource => GetResourceString("DataGridViewRowCollection_CantRemoveRowsWithWrongSource");
    /// <summary>Number of copies to create must be strictly positive.</summary>
    internal static string @DataGridViewRowCollection_CountOutOfRange => GetResourceString("DataGridViewRowCollection_CountOutOfRange");
    /// <summary>Enumeration already finished.</summary>
    internal static string @DataGridViewRowCollection_EnumFinished => GetResourceString("DataGridViewRowCollection_EnumFinished");
    /// <summary>Enumeration has not started. Call MoveNext.</summary>
    internal static string @DataGridViewRowCollection_EnumNotStarted => GetResourceString("DataGridViewRowCollection_EnumNotStarted");
    /// <summary>Index of the destination row is out of range.</summary>
    internal static string @DataGridViewRowCollection_IndexDestinationOutOfRange => GetResourceString("DataGridViewRowCollection_IndexDestinationOutOfRange");
    /// <summary>Index of the row to copy is out of range.</summary>
    internal static string @DataGridViewRowCollection_IndexSourceOutOfRange => GetResourceString("DataGridViewRowCollection_IndexSourceOutOfRange");
    /// <summary>No row can be added to a DataGridView control that does not have columns. Columns must be added first.</summary>
    internal static string @DataGridViewRowCollection_NoColumns => GetResourceString("DataGridViewRowCollection_NoColumns");
    /// <summary>No row can be inserted after the uncommitted new row.</summary>
    internal static string @DataGridViewRowCollection_NoInsertionAfterNewRow => GetResourceString("DataGridViewRowCollection_NoInsertionAfterNewRow");
    /// <summary>No row exists to make a copy of. A first row must be added to the DataGridView control before you can add copies of it.</summary>
    internal static string @DataGridViewRowCollection_NoRowToDuplicate => GetResourceString("DataGridViewRowCollection_NoRowToDuplicate");
    /// <summary>Row index provided is out of range.</summary>
    internal static string @DataGridViewRowCollection_RowIndexOutOfRange => GetResourceString("DataGridViewRowCollection_RowIndexOutOfRange");
    /// <summary>The RowTemplate row contains more cells than there are columns.</summary>
    internal static string @DataGridViewRowCollection_RowTemplateTooManyCells => GetResourceString("DataGridViewRowCollection_RowTemplateTooManyCells");
    /// <summary>Provided row contains more cells than there are columns.</summary>
    internal static string @DataGridViewRowCollection_TooManyCells => GetResourceString("DataGridViewRowCollection_TooManyCells");
    /// <summary>Occurs when the value of the RowHeadersDefaultCellStyle property changes.</summary>
    internal static string @DataGridViewRowHeadersDefaultCellStyleChangedDescr => GetResourceString("DataGridViewRowHeadersDefaultCellStyleChangedDescr");
    /// <summary>Indicates whether the column that contains row headers is displayed.</summary>
    internal static string @DataGridViewRowHeadersVisibleDescr => GetResourceString("DataGridViewRowHeadersVisibleDescr");
    /// <summary>Occurs when the value of the RowHeadersWidth property changes.</summary>
    internal static string @DataGridViewRowHeadersWidthChangedDescr => GetResourceString("DataGridViewRowHeadersWidthChangedDescr");
    /// <summary>Occurs when the value of the RowsDefaultCellStyle property changes.</summary>
    internal static string @DataGridViewRowsDefaultCellStyleChangedDescr => GetResourceString("DataGridViewRowsDefaultCellStyleChangedDescr");
    /// <summary>The owning DataGridView control is already set.</summary>
    internal static string @DataGridViewTopRowAccessibleObject_OwnerAlreadySet => GetResourceString("DataGridViewTopRowAccessibleObject_OwnerAlreadySet");
    /// <summary>The owning DataGridView control has not been set.</summary>
    internal static string @DataGridViewTopRowAccessibleObject_OwnerNotSet => GetResourceString("DataGridViewTopRowAccessibleObject_OwnerNotSet");
    /// <summary>Value provided for CellTemplate must be of type {0} or derive from it.</summary>
    internal static string @DataGridViewTypeColumn_WrongCellTemplateType => GetResourceString("DataGridViewTypeColumn_WrongCellTemplateType");
    /// <summary>Indicates whether you have provided your own data-management operations for the DataGridView control.</summary>
    internal static string @DataGridViewVirtualModeDescr => GetResourceString("DataGridViewVirtualModeDescr");
    /// <summary>Returns the count of visible columns in the grid.</summary>
    internal static string @DataGridVisibleColumnCountDescr => GetResourceString("DataGridVisibleColumnCountDescr");
    /// <summary>Returns the count of visible rows in the grid.</summary>
    internal static string @DataGridVisibleRowCountDescr => GetResourceString("DataGridVisibleRowCountDescr");
    /// <summary>Whitespace or empty string is not a valid value for parameter 'format'.</summary>
    internal static string @DataObjectWhitespaceEmptyFormatNotAllowed => GetResourceString("DataObjectWhitespaceEmptyFormatNotAllowed");
    /// <summary>Bitmap object does not directly support the device-independent bitmap format.  Either specify auto-conversion or perform a SetData with the Bitmap data format.</summary>
    internal static string @DataObjectDibNotSupported => GetResourceString("DataObjectDibNotSupported");
    /// <summary>DataMember property '{0}' cannot be found on the DataSource.</summary>
    internal static string @DataSourceDataMemberPropNotFound => GetResourceString("DataSourceDataMemberPropNotFound");
    /// <summary>Items collection cannot be modified when the DataSource property is set.</summary>
    internal static string @DataSourceLocksItems => GetResourceString("DataSourceLocksItems");
    /// <summary>Requested number of bytes did not get written to the underlying IStream implementation.</summary>
    internal static string @DataStreamWrite => GetResourceString("DataStreamWrite");
    /// <summary>The font used to display the calendar.</summary>
    internal static string @DateTimePickerCalendarFontDescr => GetResourceString("DateTimePickerCalendarFontDescr");
    /// <summary>The color used to display text within a month.</summary>
    internal static string @DateTimePickerCalendarForeColorDescr => GetResourceString("DateTimePickerCalendarForeColorDescr");
    /// <summary>The background color displayed within the month.</summary>
    internal static string @DateTimePickerCalendarMonthBackgroundDescr => GetResourceString("DateTimePickerCalendarMonthBackgroundDescr");
    /// <summary>The background color displayed in the calendar's title.</summary>
    internal static string @DateTimePickerCalendarTitleBackColorDescr => GetResourceString("DateTimePickerCalendarTitleBackColorDescr");
    /// <summary>The color used to display text within the calendar's title.</summary>
    internal static string @DateTimePickerCalendarTitleForeColorDescr => GetResourceString("DateTimePickerCalendarTitleForeColorDescr");
    /// <summary>The color used to display header day and trailing day text. Header and trailing days are the days from the previous and following months that appear on the current month calendar.</summary>
    internal static string @DateTimePickerCalendarTrailingForeColorDescr => GetResourceString("DateTimePickerCalendarTrailingForeColorDescr");
    /// <summary>When ShowSelectBox is true, determines if the check box is checked, indicating that the user has selected a value.</summary>
    internal static string @DateTimePickerCheckedDescr => GetResourceString("DateTimePickerCheckedDescr");
    /// <summary>The custom format string used to format the date and/or time displayed in the control.</summary>
    internal static string @DateTimePickerCustomFormatDescr => GetResourceString("DateTimePickerCustomFormatDescr");
    /// <summary>Controls how the month drop-down is aligned to the DateTimePicker. Can be LEFT or RIGHT.</summary>
    internal static string @DateTimePickerDropDownAlignDescr => GetResourceString("DateTimePickerDropDownAlignDescr");
    /// <summary>Determines whether dates and times are displayed using standard or custom formatting.</summary>
    internal static string @DateTimePickerFormatDescr => GetResourceString("DateTimePickerFormatDescr");
    /// <summary>DateTimePicker does not support dates after {0}.</summary>
    internal static string @DateTimePickerMaxDate => GetResourceString("DateTimePickerMaxDate");
    /// <summary>The maximum date that can be selected.</summary>
    internal static string @DateTimePickerMaxDateDescr => GetResourceString("DateTimePickerMaxDateDescr");
    /// <summary>DateTimePicker does not support dates before {0}.</summary>
    internal static string @DateTimePickerMinDate => GetResourceString("DateTimePickerMinDate");
    /// <summary>The minimum date that can be selected.</summary>
    internal static string @DateTimePickerMinDateDescr => GetResourceString("DateTimePickerMinDateDescr");
    /// <summary>Occurs when the user is finished selecting a date from the drop-down calendar.</summary>
    internal static string @DateTimePickerOnCloseUpDescr => GetResourceString("DateTimePickerOnCloseUpDescr");
    /// <summary>Occurs when the drop-down calendar is about to drop.</summary>
    internal static string @DateTimePickerOnDropDownDescr => GetResourceString("DateTimePickerOnDropDownDescr");
    /// <summary>Event raised when the value of the Format property is changed on DateTimePicker.</summary>
    internal static string @DateTimePickerOnFormatChangedDescr => GetResourceString("DateTimePickerOnFormatChangedDescr");
    /// <summary>Determines whether a check box is displayed in the control. When the box is unchecked, no value is selected.</summary>
    internal static string @DateTimePickerShowNoneDescr => GetResourceString("DateTimePickerShowNoneDescr");
    /// <summary>Indicates whether a spin box rather than a drop-down calendar is displayed for modifying the control value.</summary>
    internal static string @DateTimePickerShowUpDownDescr => GetResourceString("DateTimePickerShowUpDownDescr");
    /// <summary>The current date/time value for this control.</summary>
    internal static string @DateTimePickerValueDescr => GetResourceString("DateTimePickerValueDescr");
    /// <summary>{0} This exception is only raised if a debugger is attached to the process.</summary>
    internal static string @DebuggingExceptionOnly => GetResourceString("DebuggingExceptionOnly");
    /// <summary>Default manifest file required to enable visual styles cannot be found.</summary>
    internal static string @DefManifestNotFound => GetResourceString("DefManifestNotFound");
    /// <summary>Button</summary>
    internal static string @DefaultDataGridViewButtonCellTollTipText => GetResourceString("DefaultDataGridViewButtonCellTollTipText");
    /// <summary>ComboBox</summary>
    internal static string @DefaultDataGridViewComboBoxCellTollTipText => GetResourceString("DefaultDataGridViewComboBoxCellTollTipText");
    /// <summary>Image</summary>
    internal static string @DefaultDataGridViewImageCellToolTipText => GetResourceString("DefaultDataGridViewImageCellToolTipText");
    /// <summary>Link</summary>
    internal static string @DefaultDataGridViewLinkCellTollTipText => GetResourceString("DefaultDataGridViewLinkCellTollTipText");
    /// <summary>Edit</summary>
    internal static string @DefaultDataGridViewTextBoxCellTollTipText => GetResourceString("DefaultDataGridViewTextBoxCellTollTipText");
    /// <summary>Provides a user interface for navigation and manipulation of data bound to controls on a form.</summary>
    internal static string @DescriptionBindingNavigator => GetResourceString("DescriptionBindingNavigator");
    /// <summary>Encapsulates a data source for a form and provides navigation, filtering, sorting, and updating capabilities.</summary>
    internal static string @DescriptionBindingSource => GetResourceString("DescriptionBindingSource");
    /// <summary>Raises an event when the user clicks it.</summary>
    internal static string @DescriptionButton => GetResourceString("DescriptionButton");
    /// <summary>Enables the user to select or clear the associated option.</summary>
    internal static string @DescriptionCheckBox => GetResourceString("DescriptionCheckBox");
    /// <summary>Displays a list of items with a check box on the left side of each item.</summary>
    internal static string @DescriptionCheckedListBox => GetResourceString("DescriptionCheckedListBox");
    /// <summary>Displays available colors along with controls that enable the user to define custom colors.</summary>
    internal static string @DescriptionColorDialog => GetResourceString("DescriptionColorDialog");
    /// <summary>Displays an editable text box with a drop-down list of permitted values.</summary>
    internal static string @DescriptionComboBox => GetResourceString("DescriptionComboBox");
    /// <summary>Displays a shortcut menu when the user right-clicks the associated control.</summary>
    internal static string @DescriptionContextMenuStrip => GetResourceString("DescriptionContextMenuStrip");
    /// <summary>Displays rows and columns of data in a grid you can customize.</summary>
    internal static string @DescriptionDataGridView => GetResourceString("DescriptionDataGridView");
    /// <summary>Enables the user to select a date and time, and to display that date and time in a specified format.</summary>
    internal static string @DescriptionDateTimePicker => GetResourceString("DescriptionDateTimePicker");
    /// <summary>Displays a single string value that the user selected from a list of items by clicking up and down buttons in the control.</summary>
    internal static string @DescriptionDomainUpDown => GetResourceString("DescriptionDomainUpDown");
    /// <summary>Provides a user interface to indicate to the user that a control on a form has an error associated with it.</summary>
    internal static string @DescriptionErrorProvider => GetResourceString("DescriptionErrorProvider");
    /// <summary>Handles the layout of its components and arranges them in a flow layout automatically.</summary>
    internal static string @DescriptionFlowLayoutPanel => GetResourceString("DescriptionFlowLayoutPanel");
    /// <summary>Displays a dialog box that prompts the user to select a folder.</summary>
    internal static string @DescriptionFolderBrowserDialog => GetResourceString("DescriptionFolderBrowserDialog");
    /// <summary>Displays a dialog box that prompts the user to choose a font from those installed on the local computer.</summary>
    internal static string @DescriptionFontDialog => GetResourceString("DescriptionFontDialog");
    /// <summary>Displays a frame around a group of controls with an optional caption.</summary>
    internal static string @DescriptionGroupBox => GetResourceString("DescriptionGroupBox");
    /// <summary>Provides pop-up or online Help for controls.</summary>
    internal static string @DescriptionHelpProvider => GetResourceString("DescriptionHelpProvider");
    /// <summary>Enables its parent component to scroll content horizontally. Unnecessary if the parent has an autoscroll attribute, and that attribute is enabled.</summary>
    internal static string @DescriptionHScrollBar => GetResourceString("DescriptionHScrollBar");
    /// <summary>Manages a collection of images that are typically used by other controls such as ListView, TreeView, or ToolStrip.</summary>
    internal static string @DescriptionImageList => GetResourceString("DescriptionImageList");
    /// <summary>Provides run-time information or descriptive text for a control.</summary>
    internal static string @DescriptionLabel => GetResourceString("DescriptionLabel");
    /// <summary>Displays a label control that supports hyperlink functionality, formatting, and tracking.</summary>
    internal static string @DescriptionLinkLabel => GetResourceString("DescriptionLinkLabel");
    /// <summary>Displays a list from which the user can select items.</summary>
    internal static string @DescriptionListBox => GetResourceString("DescriptionListBox");
    /// <summary>Displays a collection of items in one of five different views.</summary>
    internal static string @DescriptionListView => GetResourceString("DescriptionListView");
    /// <summary>Uses a mask to distinguish between proper and improper user input.</summary>
    internal static string @DescriptionMaskedTextBox => GetResourceString("DescriptionMaskedTextBox");
    /// <summary>Displays application commands and options grouped by functionality.</summary>
    internal static string @DescriptionMenuStrip => GetResourceString("DescriptionMenuStrip");
    /// <summary>Displays a monthly calendar from which the user can select a date.</summary>
    internal static string @DescriptionMonthCalendar => GetResourceString("DescriptionMonthCalendar");
    /// <summary>Displays an icon in the notification area, on the right side of the Windows taskbar, during run time.</summary>
    internal static string @DescriptionNotifyIcon => GetResourceString("DescriptionNotifyIcon");
    /// <summary>Displays a single numeric value that the user can increment and decrement by clicking up and down buttons on the control.</summary>
    internal static string @DescriptionNumericUpDown => GetResourceString("DescriptionNumericUpDown");
    /// <summary>Displays a dialog box that prompts the user to open a file.</summary>
    internal static string @DescriptionOpenFileDialog => GetResourceString("DescriptionOpenFileDialog");
    /// <summary>Displays a dialog box that enables the user to change page-related print settings, including margins and paper orientation.</summary>
    internal static string @DescriptionPageSetupDialog => GetResourceString("DescriptionPageSetupDialog");
    /// <summary>Enables you to group collections of controls.</summary>
    internal static string @DescriptionPanel => GetResourceString("DescriptionPanel");
    /// <summary>Displays an image.</summary>
    internal static string @DescriptionPictureBox => GetResourceString("DescriptionPictureBox");
    /// <summary>Displays a dialog box that enables the user to select a printer and choose other print options such as the number of copies and page orientation.</summary>
    internal static string @DescriptionPrintDialog => GetResourceString("DescriptionPrintDialog");
    /// <summary>Represents only the portion of a print preview that shows the document being previewed. Does not contain any dialog boxes or buttons.</summary>
    internal static string @DescriptionPrintPreviewControl => GetResourceString("DescriptionPrintPreviewControl");
    /// <summary>Displays a dialog box that shows the user a preview of what the associated document will look like when printed.</summary>
    internal static string @DescriptionPrintPreviewDialog => GetResourceString("DescriptionPrintPreviewDialog");
    /// <summary>Displays a bar that fills to indicate to the user the progress of an operation.</summary>
    internal static string @DescriptionProgressBar => GetResourceString("DescriptionProgressBar");
    /// <summary>Provides a user interface for browsing the properties of an object.</summary>
    internal static string @DescriptionPropertyGrid => GetResourceString("DescriptionPropertyGrid");
    /// <summary>Enables the user to select a single option from a group of choices when paired with other RadioButtons.</summary>
    internal static string @DescriptionRadioButton => GetResourceString("DescriptionRadioButton");
    /// <summary>Provides advanced text entry and editing features such as character and paragraph formatting.</summary>
    internal static string @DescriptionRichTextBox => GetResourceString("DescriptionRichTextBox");
    /// <summary>Displays a dialog box that prompts the user to select a location for saving a file.</summary>
    internal static string @DescriptionSaveFileDialog => GetResourceString("DescriptionSaveFileDialog");
    /// <summary>Divides a container's display area into two resizable panels to which you can add controls.</summary>
    internal static string @DescriptionSplitContainer => GetResourceString("DescriptionSplitContainer");
    /// <summary>Divides a container's display area into two areas which can be resized.</summary>
    internal static string @DescriptionSplitter => GetResourceString("DescriptionSplitter");
    /// <summary>Displays information to the user about the object being viewed, the object's components, or the object's operation.</summary>
    internal static string @DescriptionStatusStrip => GetResourceString("DescriptionStatusStrip");
    /// <summary>Manages and displays to the user a related collection of tabs that can contain controls and components.</summary>
    internal static string @DescriptionTabControl => GetResourceString("DescriptionTabControl");
    /// <summary>Handles the layout of its components and arranges them in the format of a table automatically.</summary>
    internal static string @DescriptionTableLayoutPanel => GetResourceString("DescriptionTableLayoutPanel");
    /// <summary>Enables the user to enter text, and provides multiline editing and password character masking.</summary>
    internal static string @DescriptionTextBox => GetResourceString("DescriptionTextBox");
    /// <summary>Component that raises an event at user defined intervals</summary>
    internal static string @DescriptionTimer => GetResourceString("DescriptionTimer");
    /// <summary>Provides toolbars and other user interface elements that support many appearance options, and that support overflow and run-time item reordering.</summary>
    internal static string @DescriptionToolStrip => GetResourceString("DescriptionToolStrip");
    /// <summary>Displays information when the user moves the pointer over an associated control.</summary>
    internal static string @DescriptionToolTip => GetResourceString("DescriptionToolTip");
    /// <summary>Enables the user to choose between a range of values by sliding a small bar along another bar.</summary>
    internal static string @DescriptionTrackBar => GetResourceString("DescriptionTrackBar");
    /// <summary>Displays a hierarchical collection of labeled items to the user that optionally contain an image.</summary>
    internal static string @DescriptionTreeView => GetResourceString("DescriptionTreeView");
    /// <summary>Enables its parent component to scroll content vertically. Unnecessary if the parent has an autoscroll attribute, and the attribute is enabled.</summary>
    internal static string @DescriptionVScrollBar => GetResourceString("DescriptionVScrollBar");
    /// <summary>Enables the user to browse Web pages inside your form.</summary>
    internal static string @DescriptionWebBrowser => GetResourceString("DescriptionWebBrowser");
    /// <summary>Operation {0} on the component did not succeed, generating the error code 0x{1:X}.</summary>
    internal static string @DispInvokeFailed => GetResourceString("DispInvokeFailed");
    /// <summary>The allowable values of the DomainUpDown.</summary>
    internal static string @DomainUpDownItemsDescr => GetResourceString("DomainUpDownItemsDescr");
    /// <summary>Occurs when the selected item in the control changes.</summary>
    internal static string @DomainUpDownOnSelectedItemChangedDescr => GetResourceString("DomainUpDownOnSelectedItemChangedDescr");
    /// <summary>The index of the selected domain value.</summary>
    internal static string @DomainUpDownSelectedIndexDescr => GetResourceString("DomainUpDownSelectedIndexDescr");
    /// <summary>The currently selected domain value.</summary>
    internal static string @DomainUpDownSelectedItemDescr => GetResourceString("DomainUpDownSelectedItemDescr");
    /// <summary>Controls whether items in the domain list are sorted.</summary>
    internal static string @DomainUpDownSortedDescr => GetResourceString("DomainUpDownSortedDescr");
    /// <summary>Indicates whether values wrap around at either end of the item list.</summary>
    internal static string @DomainUpDownWrapDescr => GetResourceString("DomainUpDownWrapDescr");
    /// <summary>DragDrop registration did not succeed.</summary>
    internal static string @DragDropRegFailed => GetResourceString("DragDropRegFailed");
    /// <summary>Occurs whenever a particular item/area needs to be painted.</summary>
    internal static string @drawItemEventDescr => GetResourceString("drawItemEventDescr");
    /// <summary>inputLanguage is not recognized by the system.</summary>
    internal static string @ErrorBadInputLanguage => GetResourceString("ErrorBadInputLanguage");
    /// <summary>Collection has reached its maximum capacity.</summary>
    internal static string @ErrorCollectionFull => GetResourceString("ErrorCollectionFull");
    /// <summary>Error creating window handle.</summary>
    internal static string @ErrorCreatingHandle => GetResourceString("ErrorCreatingHandle");
    /// <summary>Invoke or BeginInvoke cannot be called on a control until the window handle has been created.</summary>
    internal static string @ErrorNoMarshalingThread => GetResourceString("ErrorNoMarshalingThread");
    /// <summary>Component did not succeed to show the property page.</summary>
    internal static string @ErrorPropertyPageFailed => GetResourceString("ErrorPropertyPageFailed");
    /// <summary>The rate in milliseconds at which the error icon blinks.</summary>
    internal static string @ErrorProviderBlinkRateDescr => GetResourceString("ErrorProviderBlinkRateDescr");
    /// <summary>Controls whether the error icon blinks when an error is set.</summary>
    internal static string @ErrorProviderBlinkStyleDescr => GetResourceString("ErrorProviderBlinkStyleDescr");
    /// <summary>The parent control, usually the form, that contains the data-bound controls on which the ErrorProvider can display error icons.</summary>
    internal static string @ErrorProviderContainerControlDescr => GetResourceString("ErrorProviderContainerControlDescr");
    /// <summary>Indicates the sub-list of data from the DataSource to bind errors against.</summary>
    internal static string @ErrorProviderDataMemberDescr => GetResourceString("ErrorProviderDataMemberDescr");
    /// <summary>Indicates the source of data to bind errors against.</summary>
    internal static string @ErrorProviderDataSourceDescr => GetResourceString("ErrorProviderDataSourceDescr");
    /// <summary>The error description for a control.</summary>
    internal static string @ErrorProviderErrorDescr => GetResourceString("ErrorProviderErrorDescr");
    /// <summary>The location of the error icon relative to the control.</summary>
    internal static string @ErrorProviderIconAlignmentDescr => GetResourceString("ErrorProviderIconAlignmentDescr");
    /// <summary>The icon used to indicate an error.</summary>
    internal static string @ErrorProviderIconDescr => GetResourceString("ErrorProviderIconDescr");
    /// <summary>The number of pixels to leave between the error icon and the control.</summary>
    internal static string @ErrorProviderIconPaddingDescr => GetResourceString("ErrorProviderIconPaddingDescr");
    /// <summary>Error occurred while trying to set the window region for the MDI client.</summary>
    internal static string @ErrorSettingWindowRegion => GetResourceString("ErrorSettingWindowRegion");
    /// <summary>Component did not succeed to show the editor.</summary>
    internal static string @ErrorTypeConverterFailed => GetResourceString("ErrorTypeConverterFailed");
    /// <summary>ComponentEditorControl: {0} cannot be created.</summary>
    internal static string @ExceptionCreatingCompEditorControl => GetResourceString("ExceptionCreatingCompEditorControl");
    /// <summary>Exception occurred while trying to create an instance of {0}. The exception was "{1}".</summary>
    internal static string @ExceptionCreatingObject => GetResourceString("ExceptionCreatingObject");
    /// <summary>Cancel</summary>
    internal static string @ExDlgCancel => GetResourceString("ExDlgCancel");
    /// <summary>Microsoft .NET</summary>
    internal static string @ExDlgCaption => GetResourceString("ExDlgCaption");
    /// <summary>{0}</summary>
    internal static string @ExDlgCaption2 => GetResourceString("ExDlgCaption2");
    /// <summary>&amp;Continue</summary>
    internal static string @ExDlgContinue => GetResourceString("ExDlgContinue");
    /// <summary>Unhandled exception has occurred in a component in your application. If you click Continue, the application will ignore this error and attempt to continue.
    /// 
    /// {0}.</summary>
    internal static string @ExDlgContinueErrorText => GetResourceString("ExDlgContinueErrorText");
    /// <summary>Error Text</summary>
    internal static string @ExDlgDetailsText => GetResourceString("ExDlgDetailsText");
    /// <summary>Unhandled exception has occurred in your application. If you click Continue, the application will ignore this error and attempt to continue. If you click Quit, the application will close immediately.
    /// 
    /// {0}.</summary>
    internal static string @ExDlgErrorText => GetResourceString("ExDlgErrorText");
    /// <summary>&amp;Help</summary>
    internal static string @ExDlgHelp => GetResourceString("ExDlgHelp");
    /// <summary>Exception Text</summary>
    internal static string @ExDlgMsgExceptionSection => GetResourceString("ExDlgMsgExceptionSection");
    /// <summary>Application does not support Windows Forms just-in-time (JIT)
    /// debugging. Contact the application author for more
    /// information.</summary>
    internal static string @ExDlgMsgFooterNonSwitchable => GetResourceString("ExDlgMsgFooterNonSwitchable");
    /// <summary></summary>
    internal static string @ExDlgMsgFooterSwitchable => GetResourceString("ExDlgMsgFooterSwitchable");
    /// <summary>Application does not support just-in-time (JIT)
    /// debugging. See the end of this message for details.</summary>
    internal static string @ExDlgMsgHeaderNonSwitchable => GetResourceString("ExDlgMsgHeaderNonSwitchable");
    /// <summary>See the end of this message for details on invoking 
    /// just-in-time (JIT) debugging instead of this dialog box.</summary>
    internal static string @ExDlgMsgHeaderSwitchable => GetResourceString("ExDlgMsgHeaderSwitchable");
    /// <summary>JIT Debugging</summary>
    internal static string @ExDlgMsgJITDebuggingSection => GetResourceString("ExDlgMsgJITDebuggingSection");
    /// <summary>{0}
    ///     Assembly Version: {1}
    ///     Win32 Version: {2}
    ///     CodeBase: {3}</summary>
    internal static string @ExDlgMsgLoadedAssembliesEntry => GetResourceString("ExDlgMsgLoadedAssembliesEntry");
    /// <summary>Loaded Assemblies</summary>
    internal static string @ExDlgMsgLoadedAssembliesSection => GetResourceString("ExDlgMsgLoadedAssembliesSection");
    /// <summary>************** {0} **************</summary>
    internal static string @ExDlgMsgSectionSeperator => GetResourceString("ExDlgMsgSectionSeperator");
    /// <summary>----------------------------------------</summary>
    internal static string @ExDlgMsgSeperator => GetResourceString("ExDlgMsgSeperator");
    /// <summary>OK</summary>
    internal static string @ExDlgOk => GetResourceString("ExDlgOk");
    /// <summary>&amp;Quit</summary>
    internal static string @ExDlgQuit => GetResourceString("ExDlgQuit");
    /// <summary>Application attempted to perform an operation not allowed by the security policy. To grant this application the required permission, contact your system administrator, or use the Microsoft .NET Configuration tool.
    /// 
    /// If you click Continue, the application wi ...</summary>
    internal static string @ExDlgSecurityContinueErrorText => GetResourceString("ExDlgSecurityContinueErrorText");
    /// <summary>Application attempted to perform an operation not allowed by the security policy. To grant this application the required permission, contact your system administrator, or use the Microsoft .NET Configuration tool.
    /// 
    /// If you click Continue, the application wi ...</summary>
    internal static string @ExDlgSecurityErrorText => GetResourceString("ExDlgSecurityErrorText");
    /// <summary>&amp;Details</summary>
    internal static string @ExDlgShowDetails => GetResourceString("ExDlgShowDetails");
    /// <summary>{0}.</summary>
    internal static string @ExDlgWarningText => GetResourceString("ExDlgWarningText");
    /// <summary>External exception</summary>
    internal static string @ExternalException => GetResourceString("ExternalException");
    /// <summary>Controls whether extensions are automatically added to file names.</summary>
    internal static string @FDaddExtensionDescr => GetResourceString("FDaddExtensionDescr");
    /// <summary>Checks that the specified file exists before returning from the dialog.</summary>
    internal static string @FDcheckFileExistsDescr => GetResourceString("FDcheckFileExistsDescr");
    /// <summary>Checks that the specified path exists before returning from the dialog.</summary>
    internal static string @FDcheckPathExistsDescr => GetResourceString("FDcheckPathExistsDescr");
    /// <summary>The default file name extension. If the user types a file name, this extension is added at the end of the file name if one is not specified.</summary>
    internal static string @FDdefaultExtDescr => GetResourceString("FDdefaultExtDescr");
    /// <summary>Controls whether shortcuts are dereferenced before returning from the dialog.</summary>
    internal static string @FDdereferenceLinksDescr => GetResourceString("FDdereferenceLinksDescr");
    /// <summary>The file first shown in the dialog box, or the last one selected by the user.</summary>
    internal static string @FDfileNameDescr => GetResourceString("FDfileNameDescr");
    /// <summary>Retrieves the file names of all selected files in the dialog box.</summary>
    internal static string @FDFileNamesDescr => GetResourceString("FDFileNamesDescr");
    /// <summary>Occurs when the user clicks the Open or Save button in the dialog box.</summary>
    internal static string @FDfileOkDescr => GetResourceString("FDfileOkDescr");
    /// <summary>The file filters to display in the dialog box, for example, "C# files|*.cs|All files|*.*".</summary>
    internal static string @FDfilterDescr => GetResourceString("FDfilterDescr");
    /// <summary>The index of the file filter selected in the dialog box. The first item has an index of 1.</summary>
    internal static string @FDfilterIndexDescr => GetResourceString("FDfilterIndexDescr");
    /// <summary>The initial directory for the dialog box.</summary>
    internal static string @FDinitialDirDescr => GetResourceString("FDinitialDirDescr");
    /// <summary>Controls whether the dialog box restores the current directory before closing.</summary>
    internal static string @FDrestoreDirectoryDescr => GetResourceString("FDrestoreDirectoryDescr");
    /// <summary>Enables the Help button.</summary>
    internal static string @FDshowHelpDescr => GetResourceString("FDshowHelpDescr");
    /// <summary>Controls whether multi-dotted extensions are supported.</summary>
    internal static string @FDsupportMultiDottedExtensionsDescr => GetResourceString("FDsupportMultiDottedExtensionsDescr");
    /// <summary>The string to display in the title bar of the dialog box.</summary>
    internal static string @FDtitleDescr => GetResourceString("FDtitleDescr");
    /// <summary>Controls whether the dialog box ensures that file names do not contain invalid characters or sequences.</summary>
    internal static string @FDvalidateNamesDescr => GetResourceString("FDvalidateNamesDescr");
    /// <summary>Too many files selected. Select fewer files and try again.</summary>
    internal static string @FileDialogBufferTooSmall => GetResourceString("FileDialogBufferTooSmall");
    /// <summary>File {0} does not exist.
    /// Do you want to create it?</summary>
    internal static string @FileDialogCreatePrompt => GetResourceString("FileDialogCreatePrompt");
    /// <summary>File {0} does not exist.
    /// Verify that the correct file name was given.</summary>
    internal static string @FileDialogFileNotFound => GetResourceString("FileDialogFileNotFound");
    /// <summary>File {0} is not a valid file name.</summary>
    internal static string @FileDialogInvalidFileName => GetResourceString("FileDialogInvalidFileName");
    /// <summary>Filter string you provided is not valid. The filter string must contain a description of the filter, followed by the vertical bar (|) and the filter pattern. The strings for different filtering options must also be separated by the vertical bar. Example: " ...</summary>
    internal static string @FileDialogInvalidFilter => GetResourceString("FileDialogInvalidFilter");
    /// <summary>Filter index not valid.</summary>
    internal static string @FileDialogInvalidFilterIndex => GetResourceString("FileDialogInvalidFilterIndex");
    /// <summary>File {0} already exists.
    /// Do you want to replace it?</summary>
    internal static string @FileDialogOverwritePrompt => GetResourceString("FileDialogOverwritePrompt");
    /// <summary>Attempt to subclass a list box did not succeed. Not enough memory is available.</summary>
    internal static string @FileDialogSubLassFailure => GetResourceString("FileDialogSubLassFailure");
    /// <summary>Can only set filter on an IBindingListView where SupportsFiltering is true.</summary>
    internal static string @FilterRequiresIBindingListView => GetResourceString("FilterRequiresIBindingListView");
    /// <summary>Key specified was either empty or null.</summary>
    internal static string @FindKeyMayNotBeEmptyOrNull => GetResourceString("FindKeyMayNotBeEmptyOrNull");
    /// <summary>Specifies the direction in which controls are laid out.</summary>
    internal static string @FlowPanelFlowDirectionDescr => GetResourceString("FlowPanelFlowDirectionDescr");
    /// <summary>Indicates whether contents are wrapped or clipped at the control boundary.</summary>
    internal static string @FlowPanelWrapContentsDescr => GetResourceString("FlowPanelWrapContentsDescr");
    /// <summary>Controls whether the character set of the font can be changed.</summary>
    internal static string @FnDallowScriptChangeDescr => GetResourceString("FnDallowScriptChangeDescr");
    /// <summary>Controls whether GDI font simulations are allowed.</summary>
    internal static string @FnDallowSimulationsDescr => GetResourceString("FnDallowSimulationsDescr");
    /// <summary>Controls whether vector fonts can be selected.</summary>
    internal static string @FnDallowVectorFontsDescr => GetResourceString("FnDallowVectorFontsDescr");
    /// <summary>Controls whether vertical fonts can be selected.</summary>
    internal static string @FnDallowVerticalFontsDescr => GetResourceString("FnDallowVerticalFontsDescr");
    /// <summary>Occurs when the user clicks the Apply button.</summary>
    internal static string @FnDapplyDescr => GetResourceString("FnDapplyDescr");
    /// <summary>The color selected in the dialog box.</summary>
    internal static string @FnDcolorDescr => GetResourceString("FnDcolorDescr");
    /// <summary>Controls whether only fixed pitch fonts can be selected.</summary>
    internal static string @FnDfixedPitchOnlyDescr => GetResourceString("FnDfixedPitchOnlyDescr");
    /// <summary>The font selected in the dialog box.</summary>
    internal static string @FnDfontDescr => GetResourceString("FnDfontDescr");
    /// <summary>Controls whether to report an error if the selected font does not exist.</summary>
    internal static string @FnDfontMustExistDescr => GetResourceString("FnDfontMustExistDescr");
    /// <summary>The maximum point size that can be Selected (or zero to disable).</summary>
    internal static string @FnDmaxSizeDescr => GetResourceString("FnDmaxSizeDescr");
    /// <summary>The minimum point size that can be Selected (or zero to disable).</summary>
    internal static string @FnDminSizeDescr => GetResourceString("FnDminSizeDescr");
    /// <summary>Controls whether to exclude OEM and Symbol character sets.</summary>
    internal static string @FnDscriptsOnlyDescr => GetResourceString("FnDscriptsOnlyDescr");
    /// <summary>Controls whether to show the Apply button.</summary>
    internal static string @FnDshowApplyDescr => GetResourceString("FnDshowApplyDescr");
    /// <summary>Controls whether to show a color choice.</summary>
    internal static string @FnDshowColorDescr => GetResourceString("FnDshowColorDescr");
    /// <summary>Controls whether to show the underline, strikeout, and font color selections.</summary>
    internal static string @FnDshowEffectsDescr => GetResourceString("FnDshowEffectsDescr");
    /// <summary>Controls whether to show the Help button.</summary>
    internal static string @FnDshowHelpDescr => GetResourceString("FnDshowHelpDescr");
    /// <summary>The string that is displayed above the tree view control in the dialog box. This string can be used to specify instructions to the user.</summary>
    internal static string @FolderBrowserDialogDescription => GetResourceString("FolderBrowserDialogDescription");
    /// <summary>Unable to retrieve the root folder.</summary>
    internal static string @FolderBrowserDialogNoRootFolder => GetResourceString("FolderBrowserDialogNoRootFolder");
    /// <summary>The location of the root folder from which to start browsing. Only the specified folder and any subfolders that are beneath it will appear in the dialog box.</summary>
    internal static string @FolderBrowserDialogRootFolder => GetResourceString("FolderBrowserDialogRootFolder");
    /// <summary>The path of the folder first selected in the dialog or the last one selected by the user.</summary>
    internal static string @FolderBrowserDialogSelectedPath => GetResourceString("FolderBrowserDialogSelectedPath");
    /// <summary>Include the New Folder button in the dialog box.</summary>
    internal static string @FolderBrowserDialogShowNewFolderButton => GetResourceString("FolderBrowserDialogShowNewFolderButton");
    /// <summary>The accept button of the form. If this is set, the button is 'clicked' whenever the user presses the 'ENTER' key.</summary>
    internal static string @FormAcceptButtonDescr => GetResourceString("FormAcceptButtonDescr");
    /// <summary>The currently active MDI child form.</summary>
    internal static string @FormActiveMDIChildDescr => GetResourceString("FormActiveMDIChildDescr");
    /// <summary>Indicates the Format object that this control is currently using to format its values.</summary>
    internal static string @FormatControlFormatDescr => GetResourceString("FormatControlFormatDescr");
    /// <summary>Value '{0}' cannot be converted to type '{1}'.</summary>
    internal static string @Formatter_CantConvert => GetResourceString("Formatter_CantConvert");
    /// <summary>Null value cannot be converted to type '{1}'.</summary>
    internal static string @Formatter_CantConvertNull => GetResourceString("Formatter_CantConvertNull");
    /// <summary>If set to true, the form will automatically scale with the screen font.</summary>
    internal static string @FormAutoScaleDescr => GetResourceString("FormAutoScaleDescr");
    /// <summary>Indicates whether scroll bars automatically appear when the control contents are larger than its visible area.</summary>
    internal static string @FormAutoScrollDescr => GetResourceString("FormAutoScrollDescr");
    /// <summary>The margin around controls during auto scroll.</summary>
    internal static string @FormAutoScrollMarginDescr => GetResourceString("FormAutoScrollMarginDescr");
    /// <summary>The minimum logical size for the auto scroll region.</summary>
    internal static string @FormAutoScrollMinSizeDescr => GetResourceString("FormAutoScrollMinSizeDescr");
    /// <summary>The current position of the auto-scrolling scroll bar.</summary>
    internal static string @FormAutoScrollPositionDescr => GetResourceString("FormAutoScrollPositionDescr");
    /// <summary>Indicates the appearance and behavior of the border and title bar of the form.</summary>
    internal static string @FormBorderStyleDescr => GetResourceString("FormBorderStyleDescr");
    /// <summary>The cancel button of the form. If this property is set, the button is 'clicked' whenever the user presses the 'ESC' key.</summary>
    internal static string @FormCancelButtonDescr => GetResourceString("FormCancelButtonDescr");
    /// <summary>Determines whether a form has a Control/System menu box.</summary>
    internal static string @FormControlBoxDescr => GetResourceString("FormControlBoxDescr");
    /// <summary>The bounds of this form in desktop coordinates.</summary>
    internal static string @FormDesktopBoundsDescr => GetResourceString("FormDesktopBoundsDescr");
    /// <summary>The location of this form in desktop coordinates.</summary>
    internal static string @FormDesktopLocationDescr => GetResourceString("FormDesktopLocationDescr");
    /// <summary>The value this form will return if displayed as a dialog box.</summary>
    internal static string @FormDialogResultDescr => GetResourceString("FormDialogResultDescr");
    /// <summary>Event raised when the help button is clicked.</summary>
    internal static string @FormHelpButtonClickedDescr => GetResourceString("FormHelpButtonClickedDescr");
    /// <summary>Determines whether a form has a Help button on the caption bar.</summary>
    internal static string @FormHelpButtonDescr => GetResourceString("FormHelpButtonDescr");
    /// <summary>Indicates the icon for a form. This icon is displayed in the form's system menu box and when the form is minimized.</summary>
    internal static string @FormIconDescr => GetResourceString("FormIconDescr");
    /// <summary>Determines whether the form is a child of a MDI container.</summary>
    internal static string @FormIsMDIChildDescr => GetResourceString("FormIsMDIChildDescr");
    /// <summary>Determines whether the form is an MDI container.</summary>
    internal static string @FormIsMDIContainerDescr => GetResourceString("FormIsMDIContainerDescr");
    /// <summary>Determines whether keyboard events for controls on the form are registered with the form.</summary>
    internal static string @FormKeyPreviewDescr => GetResourceString("FormKeyPreviewDescr");
    /// <summary>Determines whether a form has a maximize box in the upper-right corner of its caption bar.</summary>
    internal static string @FormMaximizeBoxDescr => GetResourceString("FormMaximizeBoxDescr");
    /// <summary>The maximum size the form can be resized to.</summary>
    internal static string @FormMaximumSizeDescr => GetResourceString("FormMaximumSizeDescr");
    /// <summary>Retrieves the MDI children of this form.</summary>
    internal static string @FormMDIChildrenDescr => GetResourceString("FormMDIChildrenDescr");
    /// <summary>Form cannot be both an MDI child and MDI parent.</summary>
    internal static string @FormMDIParentAndChild => GetResourceString("FormMDIParentAndChild");
    /// <summary>Form cannot be added to the Controls collection that has a valid MDI parent.</summary>
    internal static string @FormMDIParentCannotAdd => GetResourceString("FormMDIParentCannotAdd");
    /// <summary>Retrieves the MDI parent of this form.</summary>
    internal static string @FormMDIParentDescr => GetResourceString("FormMDIParentDescr");
    /// <summary>Specifies the primary MenuStrip for the Form. This property is used for keyboard activation and automatic merging in MDI.</summary>
    internal static string @FormMenuStripDescr => GetResourceString("FormMenuStripDescr");
    /// <summary>Determines whether a form has a minimize box in the upper-right corner of its caption bar.</summary>
    internal static string @FormMinimizeBoxDescr => GetResourceString("FormMinimizeBoxDescr");
    /// <summary>The minimum size the form can be resized to.</summary>
    internal static string @FormMinimumSizeDescr => GetResourceString("FormMinimumSizeDescr");
    /// <summary>Indicates if this form is currently being displayed as a modal dialog box.</summary>
    internal static string @FormModalDescr => GetResourceString("FormModalDescr");
    /// <summary>Occurs whenever the form is activated.</summary>
    internal static string @FormOnActivateDescr => GetResourceString("FormOnActivateDescr");
    /// <summary>Occurs whenever the user closes the form, after the form has been closed.</summary>
    internal static string @FormOnClosedDescr => GetResourceString("FormOnClosedDescr");
    /// <summary>Occurs whenever the user closes the form, before the form has been closed.</summary>
    internal static string @FormOnClosingDescr => GetResourceString("FormOnClosingDescr");
    /// <summary>Occurs whenever the form is deactivated.</summary>
    internal static string @FormOnDeactivateDescr => GetResourceString("FormOnDeactivateDescr");
    /// <summary>Occurs whenever the user closes the form, after the form has been closed and specifies the close reason.</summary>
    internal static string @FormOnFormClosedDescr => GetResourceString("FormOnFormClosedDescr");
    /// <summary>Occurs whenever the user closes the form, before the form has been closed and specifies the close reason.</summary>
    internal static string @FormOnFormClosingDescr => GetResourceString("FormOnFormClosingDescr");
    /// <summary>Occurs whenever the language used for input for this form changes.</summary>
    internal static string @FormOnInputLangChangeDescr => GetResourceString("FormOnInputLangChangeDescr");
    /// <summary>A request by the system to change the input language for this form. This request can be refused.</summary>
    internal static string @FormOnInputLangChangeRequestDescr => GetResourceString("FormOnInputLangChangeRequestDescr");
    /// <summary>Occurs whenever the user loads the form.</summary>
    internal static string @FormOnLoadDescr => GetResourceString("FormOnLoadDescr");
    /// <summary>Event raised when the value of the MaximizedBounds property is changed on Form.</summary>
    internal static string @FormOnMaximizedBoundsChangedDescr => GetResourceString("FormOnMaximizedBoundsChangedDescr");
    /// <summary>Event raised when the value of the MaximumSize property is changed on Form.</summary>
    internal static string @FormOnMaximumSizeChangedDescr => GetResourceString("FormOnMaximumSizeChangedDescr");
    /// <summary>Occurs when an MDI Child window is activated.</summary>
    internal static string @FormOnMDIChildActivateDescr => GetResourceString("FormOnMDIChildActivateDescr");
    /// <summary>Occurs when menu selection is completed and menu modal message loop has exited.</summary>
    internal static string @FormOnMenuCompleteDescr => GetResourceString("FormOnMenuCompleteDescr");
    /// <summary>Occurs when any menu is displayed and menu modal message loop is entered.</summary>
    internal static string @FormOnMenuStartDescr => GetResourceString("FormOnMenuStartDescr");
    /// <summary>Event raised when the value of the MinimumSize property is changed on Form.</summary>
    internal static string @FormOnMinimumSizeChangedDescr => GetResourceString("FormOnMinimumSizeChangedDescr");
    /// <summary>Occurs when the form enters the sizing modal loop.</summary>
    internal static string @FormOnResizeBeginDescr => GetResourceString("FormOnResizeBeginDescr");
    /// <summary>Occurs when the form exits the sizing modal loop.</summary>
    internal static string @FormOnResizeEndDescr => GetResourceString("FormOnResizeEndDescr");
    /// <summary>Occurs whenever the form is first shown.</summary>
    internal static string @FormOnShownDescr => GetResourceString("FormOnShownDescr");
    /// <summary>The opacity percentage of the control.</summary>
    internal static string @FormOpacityDescr => GetResourceString("FormOpacityDescr");
    /// <summary>Array of forms owned by this form.</summary>
    internal static string @FormOwnedFormsDescr => GetResourceString("FormOwnedFormsDescr");
    /// <summary>The owner of this form.</summary>
    internal static string @FormOwnerDescr => GetResourceString("FormOwnerDescr");
    /// <summary>Indicates whether an icon is displayed in the title bar of the form.</summary>
    internal static string @FormShowIconDescr => GetResourceString("FormShowIconDescr");
    /// <summary>Determines whether the form appears in the Windows Taskbar.</summary>
    internal static string @FormShowInTaskbarDescr => GetResourceString("FormShowInTaskbarDescr");
    /// <summary>Determines when the SizeGrip will be displayed for the form.</summary>
    internal static string @FormSizeGripStyleDescr => GetResourceString("FormSizeGripStyleDescr");
    /// <summary>Determines the position of a form when it first appears.</summary>
    internal static string @FormStartPositionDescr => GetResourceString("FormStartPositionDescr");
    /// <summary>Indicates whether the form always appears above all other forms that do not have this property set to true.</summary>
    internal static string @FormTopMostDescr => GetResourceString("FormTopMostDescr");
    /// <summary>A color which will appear transparent when painted on the form.</summary>
    internal static string @FormTransparencyKeyDescr => GetResourceString("FormTransparencyKeyDescr");
    /// <summary>Determines the initial visual state of the form.</summary>
    internal static string @FormWindowStateDescr => GetResourceString("FormWindowStateDescr");
    /// <summary>The GridItem has been disposed and is no longer usable.</summary>
    internal static string @GridItemDisposed => GetResourceString("GridItemDisposed");
    /// <summary>The GridItem cannot be expanded.</summary>
    internal static string @GridItemNotExpandable => GetResourceString("GridItemNotExpandable");
    /// <summary>Specifies the Row and Column position of the control.</summary>
    internal static string @GridPanelCellPositionDescr => GetResourceString("GridPanelCellPositionDescr");
    /// <summary>The column position of the specified child control.</summary>
    internal static string @GridPanelColumnDescr => GetResourceString("GridPanelColumnDescr");
    /// <summary>The number of columns on the table.</summary>
    internal static string @GridPanelColumnsDescr => GetResourceString("GridPanelColumnsDescr");
    /// <summary>The column styles of the table.</summary>
    internal static string @GridPanelColumnStylesDescr => GetResourceString("GridPanelColumnStylesDescr");
    /// <summary>The alignment of the control.</summary>
    internal static string @GridPanelGetAlignmentDescr => GetResourceString("GridPanelGetAlignmentDescr");
    /// <summary>The box stretch of the control.</summary>
    internal static string @GridPanelGetBoxStretchDescr => GetResourceString("GridPanelGetBoxStretchDescr");
    /// <summary>The column span of the control.</summary>
    internal static string @GridPanelGetColumnSpanDescr => GetResourceString("GridPanelGetColumnSpanDescr");
    /// <summary>The row span of the control.</summary>
    internal static string @GridPanelGetRowSpanDescr => GetResourceString("GridPanelGetRowSpanDescr");
    /// <summary>The row position of the absolutely positioned element.</summary>
    internal static string @GridPanelRowDescr => GetResourceString("GridPanelRowDescr");
    /// <summary>The number of rows on the table.</summary>
    internal static string @GridPanelRowsDescr => GetResourceString("GridPanelRowsDescr");
    /// <summary>The row styles of the table.</summary>
    internal static string @GridPanelRowStylesDescr => GetResourceString("GridPanelRowStylesDescr");
    /// <summary>Window handle already exists.</summary>
    internal static string @HandleAlreadyExists => GetResourceString("HandleAlreadyExists");
    /// <summary>Help</summary>
    internal static string @HelpCaption => GetResourceString("HelpCaption");
    /// <summary>Help URL '{0}' is not valid.</summary>
    internal static string @HelpInvalidURL => GetResourceString("HelpInvalidURL");
    /// <summary>Determines the Help keyword associated with this control.</summary>
    internal static string @HelpProviderHelpKeywordDescr => GetResourceString("HelpProviderHelpKeywordDescr");
    /// <summary>The Help namespace (for example HTML 1.0 Help file) that will be used. It is only used for controls that have the HelpKeyword set.</summary>
    internal static string @HelpProviderHelpNamespaceDescr => GetResourceString("HelpProviderHelpNamespaceDescr");
    /// <summary>Determines the Help string associated with this control.</summary>
    internal static string @HelpProviderHelpStringDescr => GetResourceString("HelpProviderHelpStringDescr");
    /// <summary>Determines the kind of Help associated with this control.</summary>
    internal static string @HelpProviderNavigatorDescr => GetResourceString("HelpProviderNavigatorDescr");
    /// <summary>Determines if Help should be displayed for this control.</summary>
    internal static string @HelpProviderShowHelpDescr => GetResourceString("HelpProviderShowHelpDescr");
    /// <summary>Argument for the Domain property must be a fully qualified domain name using Domain Name System (DNS) conventions.</summary>
    internal static string @HtmlDocumentInvalidDomain => GetResourceString("HtmlDocumentInvalidDomain");
    /// <summary>The attribute you specified is not supported on this element.</summary>
    internal static string @HtmlElementAttributeNotSupported => GetResourceString("HtmlElementAttributeNotSupported");
    /// <summary>Method is not supported on this type of HtmlElement.</summary>
    internal static string @HtmlElementMethodNotSupported => GetResourceString("HtmlElementMethodNotSupported");
    /// <summary>Property is not supported on this type of HtmlElement.</summary>
    internal static string @HtmlElementPropertyNotSupported => GetResourceString("HtmlElementPropertyNotSupported");
    /// <summary>Provides custom binding management for components.</summary>
    internal static string @ICurrencyManagerProviderDescr => GetResourceString("ICurrencyManagerProviderDescr");
    /// <summary>Cross-thread operation not valid: Control '{0}' accessed from a thread other than the thread it was created on.</summary>
    internal static string @IllegalCrossThreadCall => GetResourceString("IllegalCrossThreadCall");
    /// <summary>Cross-thread operation not valid: Control '{0}' accessed from a thread other than the thread it was created on.
    /// Stack trace where the illegal operation occurred was:
    /// {1}"</summary>
    internal static string @IllegalCrossThreadCallWithStack => GetResourceString("IllegalCrossThreadCallWithStack");
    /// <summary>Internal state of the {1} class is not valid.</summary>
    internal static string @IllegalState => GetResourceString("IllegalState");
    /// <summary>Image cannot be added to the ImageList.</summary>
    internal static string @ImageListAddFailed => GetResourceString("ImageListAddFailed");
    /// <summary>Indicates whether the images in the list should be mirrored.</summary>
    internal static string @ImageListAllowMirroringDescr => GetResourceString("ImageListAllowMirroringDescr");
    /// <summary>Parameter must be of type Image.</summary>
    internal static string @ImageListBadImage => GetResourceString("ImageListBadImage");
    /// <summary>Image must be a Bitmap.</summary>
    internal static string @ImageListBitmap => GetResourceString("ImageListBitmap");
    /// <summary>The number of colors to use to render images.</summary>
    internal static string @ImageListColorDepthDescr => GetResourceString("ImageListColorDepthDescr");
    /// <summary>Creation of the ImageList handle did not succeed.</summary>
    internal static string @ImageListCreateFailed => GetResourceString("ImageListCreateFailed");
    /// <summary>Duplication of the ImageList handle did not succeed.</summary>
    internal static string @ImageListDuplicateFailed => GetResourceString("ImageListDuplicateFailed");
    /// <summary>Image added to an ImageList must either derive from Image or be an Icon.</summary>
    internal static string @ImageListEntryType => GetResourceString("ImageListEntryType");
    /// <summary>Retrieval of the image from ImageList did not succeed.</summary>
    internal static string @ImageListGetFailed => GetResourceString("ImageListGetFailed");
    /// <summary>Indicates if the native handle has been created for this ImageList.</summary>
    internal static string @ImageListHandleCreatedDescr => GetResourceString("ImageListHandleCreatedDescr");
    /// <summary>The native handle of the ImageList.</summary>
    internal static string @ImageListHandleDescr => GetResourceString("ImageListHandleDescr");
    /// <summary>The images stored in this ImageList.</summary>
    internal static string @ImageListImagesDescr => GetResourceString("ImageListImagesDescr");
    /// <summary>Retrieves an ImageList streamer for persisting images.</summary>
    internal static string @ImageListImageStreamDescr => GetResourceString("ImageListImageStreamDescr");
    /// <summary>Image strip shorter than the ImageSize property cannot be added.</summary>
    internal static string @ImageListImageTooShort => GetResourceString("ImageListImageTooShort");
    /// <summary>Occurs when the ImageList needs to recreate its handle.</summary>
    internal static string @ImageListOnRecreateHandleDescr => GetResourceString("ImageListOnRecreateHandleDescr");
    /// <summary>Removal of the image from ImageList did not succeed.</summary>
    internal static string @ImageListRemoveFailed => GetResourceString("ImageListRemoveFailed");
    /// <summary>Replacement of the image in ImageList did not succeed.</summary>
    internal static string @ImageListReplaceFailed => GetResourceString("ImageListReplaceFailed");
    /// <summary>'Inherit' is not a valid value for this property.  Must be set to 'Yes' or 'No'.</summary>
    internal static string @ImageListRightToLeftInvalidArgument => GetResourceString("ImageListRightToLeftInvalidArgument");
    /// <summary>The size of individual images in the ImageList.</summary>
    internal static string @ImageListSizeDescr => GetResourceString("ImageListSizeDescr");
    /// <summary>Loading of the ImageList did not succeed.</summary>
    internal static string @ImageListStreamerLoadFailed => GetResourceString("ImageListStreamerLoadFailed");
    /// <summary>Saving of the ImageList did not succeed.</summary>
    internal static string @ImageListStreamerSaveFailed => GetResourceString("ImageListStreamerSaveFailed");
    /// <summary>Width of the image strip must be a positive multiple of ImageSize.Width.</summary>
    internal static string @ImageListStripBadWidth => GetResourceString("ImageListStripBadWidth");
    /// <summary>The color that is treated as transparent.</summary>
    internal static string @ImageListTransparentColorDescr => GetResourceString("ImageListTransparentColorDescr");
    /// <summary>Index {0} is out of range.</summary>
    internal static string @IndexOutOfRange => GetResourceString("IndexOutOfRange");
    /// <summary>Attribute {0} must be set to true or false.</summary>
    internal static string @Invalid_boolean_attribute => GetResourceString("Invalid_boolean_attribute");
    /// <summary>InvalidArgument=Value of '{1}' is not valid for '{0}'.</summary>
    internal static string @InvalidArgument => GetResourceString("InvalidArgument");
    /// <summary>Value of '{1}' is not valid for '{0}'. '{0}' should be between {2} and {3}.</summary>
    internal static string @InvalidBoundArgument => GetResourceString("InvalidBoundArgument");
    /// <summary>Action being performed on this control is being called from the wrong thread. Marshal to the correct thread using Control.Invoke or Control.BeginInvoke to perform this action.</summary>
    internal static string @InvalidCrossThreadControlCall => GetResourceString("InvalidCrossThreadControlCall");
    /// <summary>Value of '{1}' is not valid for '{0}'. '{0}' should be greater than {2} and less than {3}.</summary>
    internal static string @InvalidExBoundArgument => GetResourceString("InvalidExBoundArgument");
    /// <summary>File format is not valid.</summary>
    internal static string @InvalidFileFormat => GetResourceString("InvalidFileFormat");
    /// <summary>File type is not valid.</summary>
    internal static string @InvalidFileType => GetResourceString("InvalidFileType");
    /// <summary>Win32 handle passed to {0} is not valid or is the wrong type.</summary>
    internal static string @InvalidGDIHandle => GetResourceString("InvalidGDIHandle");
    /// <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be less than {2}.</summary>
    internal static string @InvalidHighBoundArgument => GetResourceString("InvalidHighBoundArgument");
    /// <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be less than or equal to {2}.</summary>
    internal static string @InvalidHighBoundArgumentEx => GetResourceString("InvalidHighBoundArgumentEx");
    /// <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be greater than {2}.</summary>
    internal static string @InvalidLowBoundArgument => GetResourceString("InvalidLowBoundArgument");
    /// <summary>Value of '{1}' is not valid for '{0}'. '{0}' must be greater than or equal to {2}.</summary>
    internal static string @InvalidLowBoundArgumentEx => GetResourceString("InvalidLowBoundArgumentEx");
    /// <summary>Null is not a valid value for '{0}'.</summary>
    internal static string @InvalidNullArgument => GetResourceString("InvalidNullArgument");
    /// <summary>One or more items in the collection are null.</summary>
    internal static string @InvalidNullItemInCollection => GetResourceString("InvalidNullItemInCollection");
    /// <summary>Image format is not valid. The image file may be corrupted.</summary>
    internal static string @InvalidPictureFormat => GetResourceString("InvalidPictureFormat");
    /// <summary>Argument '{0}' must be a picture that can be used as a {1}.</summary>
    internal static string @InvalidPictureType => GetResourceString("InvalidPictureType");
    /// <summary>Property can be changed only before the enumeration.</summary>
    internal static string @InvalidResXBasePathOperation => GetResourceString("InvalidResXBasePathOperation");
    /// <summary>ResX file {0} cannot be parsed.</summary>
    internal static string @InvalidResXFile => GetResourceString("InvalidResXFile");
    /// <summary>ResX input is not valid. Cannot find valid "resheader" tags for the ResX reader and writer type names.</summary>
    internal static string @InvalidResXFileReaderWriterTypes => GetResourceString("InvalidResXFileReaderWriterTypes");
    /// <summary>Could not find a type for a name.  The type name was '{0}'.</summary>
    internal static string @InvalidResXNoType => GetResourceString("InvalidResXNoType");
    /// <summary>Cannot find a name for the resource with the value '{0}'.</summary>
    internal static string @InvalidResXResourceNoName => GetResourceString("InvalidResXResourceNoName");
    /// <summary>Keyword "{0}" is not valid.</summary>
    internal static string @InvalidSendKeysKeyword => GetResourceString("InvalidSendKeysKeyword");
    /// <summary>Specified repeat count is not valid.</summary>
    internal static string @InvalidSendKeysRepeat => GetResourceString("InvalidSendKeysRepeat");
    /// <summary>SendKeys string '{0}' is not valid.</summary>
    internal static string @InvalidSendKeysString => GetResourceString("InvalidSendKeysString");
    /// <summary>MonthCalendar size information cannot be retrieved.</summary>
    internal static string @InvalidSingleMonthSize => GetResourceString("InvalidSingleMonthSize");
    /// <summary>Window class name is not valid.</summary>
    internal static string @InvalidWndClsName => GetResourceString("InvalidWndClsName");
    /// <summary>Type {0} in the data at line {1}, position {2}, cannot be loaded because it threw the following exception during construction: {3}</summary>
    internal static string @InvocationException => GetResourceString("InvocationException");
    /// <summary>Indicates whether the control is mirrored.</summary>
    internal static string @IsMirroredDescr => GetResourceString("IsMirroredDescr");
    /// <summary>Specifies support for transacted initialization.</summary>
    internal static string @ISupportInitializeDescr => GetResourceString("ISupportInitializeDescr");
    /// <summary>Key combination is not valid.</summary>
    internal static string @KeysConverterInvalidKeyCombination => GetResourceString("KeysConverterInvalidKeyCombination");
    /// <summary>Key name is not valid.</summary>
    internal static string @KeysConverterInvalidKeyName => GetResourceString("KeysConverterInvalidKeyName");
    /// <summary>Enables the automatic handling of text that extends beyond the width of the label control.</summary>
    internal static string @LabelAutoEllipsisDescr => GetResourceString("LabelAutoEllipsisDescr");
    /// <summary>Enables automatic resizing based on font size. Note that this is only valid for label controls that do not wrap text.</summary>
    internal static string @LabelAutoSizeDescr => GetResourceString("LabelAutoSizeDescr");
    /// <summary>The background image of this control.</summary>
    internal static string @LabelBackgroundImageDescr => GetResourceString("LabelBackgroundImageDescr");
    /// <summary>Determines if the label has a visible border.</summary>
    internal static string @LabelBorderDescr => GetResourceString("LabelBorderDescr");
    /// <summary>Event raised when the value of the TextAlign property is changed on Label.</summary>
    internal static string @LabelOnTextAlignChangedDescr => GetResourceString("LabelOnTextAlignChangedDescr");
    /// <summary>The preferred height of this control.</summary>
    internal static string @LabelPreferredHeightDescr => GetResourceString("LabelPreferredHeightDescr");
    /// <summary>The preferred width of this control.</summary>
    internal static string @LabelPreferredWidthDescr => GetResourceString("LabelPreferredWidthDescr");
    /// <summary>Determines the position of the text within the label.</summary>
    internal static string @LabelTextAlignDescr => GetResourceString("LabelTextAlignDescr");
    /// <summary>If true, the first character preceded by an ampersand (&amp;&amp;) will be used as the label's mnemonic key.</summary>
    internal static string @LabelUseMnemonicDescr => GetResourceString("LabelUseMnemonicDescr");
    /// <summary>LayoutEngine cannot arrange objects of type '{0}'.</summary>
    internal static string @LayoutEngineUnsupportedType => GetResourceString("LayoutEngineUnsupportedType");
    /// <summary>Determines the color of the hyperlink when the user clicks the link.</summary>
    internal static string @LinkLabelActiveLinkColorDescr => GetResourceString("LinkLabelActiveLinkColorDescr");
    /// <summary>LinkArea length cannot be negative.</summary>
    internal static string @LinkLabelAreaLength => GetResourceString("LinkLabelAreaLength");
    /// <summary>LinkArea start cannot be negative.</summary>
    internal static string @LinkLabelAreaStart => GetResourceString("LinkLabelAreaStart");
    /// <summary>Parameter must be of type Link.</summary>
    internal static string @LinkLabelBadLink => GetResourceString("LinkLabelBadLink");
    /// <summary>Determines the color of the hyperlink when disabled.</summary>
    internal static string @LinkLabelDisabledLinkColorDescr => GetResourceString("LinkLabelDisabledLinkColorDescr");
    /// <summary>Portion of the text in the label to render as a hyperlink.</summary>
    internal static string @LinkLabelLinkAreaDescr => GetResourceString("LinkLabelLinkAreaDescr");
    /// <summary>Determines the underline behavior of the hyperlink.</summary>
    internal static string @LinkLabelLinkBehaviorDescr => GetResourceString("LinkLabelLinkBehaviorDescr");
    /// <summary>Occurs when the link is clicked.</summary>
    internal static string @LinkLabelLinkClickedDescr => GetResourceString("LinkLabelLinkClickedDescr");
    /// <summary>Determines the color of the hyperlink in its default state.</summary>
    internal static string @LinkLabelLinkColorDescr => GetResourceString("LinkLabelLinkColorDescr");
    /// <summary>Determines if the hyperlink should be rendered as visited.</summary>
    internal static string @LinkLabelLinkVisitedDescr => GetResourceString("LinkLabelLinkVisitedDescr");
    /// <summary>Overlapping link regions.</summary>
    internal static string @LinkLabelOverlap => GetResourceString("LinkLabelOverlap");
    /// <summary>Determines the color of the hyperlink when the LinkVisited property is set to true.</summary>
    internal static string @LinkLabelVisitedLinkColorDescr => GetResourceString("LinkLabelVisitedLinkColorDescr");
    /// <summary>Cannot bind to the property or column {0} on the DataSource.</summary>
    internal static string @ListBindingBindField => GetResourceString("ListBindingBindField");
    /// <summary>Cannot bind to the property '{0}' on the target control.</summary>
    internal static string @ListBindingBindProperty => GetResourceString("ListBindingBindProperty");
    /// <summary>Cannot bind to property '{0}' because it is read-only.</summary>
    internal static string @ListBindingBindPropertyReadOnly => GetResourceString("ListBindingBindPropertyReadOnly");
    /// <summary>Cannot format the value to the desired type.</summary>
    internal static string @ListBindingFormatFailed => GetResourceString("ListBindingFormatFailed");
    /// <summary>Controls what type of border is drawn around the ListBox.</summary>
    internal static string @ListBoxBorderDescr => GetResourceString("ListBoxBorderDescr");
    /// <summary>ListBox.IntegerCollection is sorted, and items cannot be inserted into it.</summary>
    internal static string @ListBoxCantInsertIntoIntegerCollection => GetResourceString("ListBoxCantInsertIntoIntegerCollection");
    /// <summary>Indicates how wide each column should be in a multicolumn ListBox.</summary>
    internal static string @ListBoxColumnWidthDescr => GetResourceString("ListBoxColumnWidthDescr");
    /// <summary>The collection of pixel offsets each corresponding TAB character will be placed from the near edge of the client area.</summary>
    internal static string @ListBoxCustomTabOffsetsDescr => GetResourceString("ListBoxCustomTabOffsetsDescr");
    /// <summary>Controls list box painting. Either the system [NORMAL] or the user [OWNERDRAW] paints each item.</summary>
    internal static string @ListBoxDrawModeDescr => GetResourceString("ListBoxDrawModeDescr");
    /// <summary>The width, in pixels, by which a list box can be scrolled horizontally. Only valid if HorizontalScrollBars is true.</summary>
    internal static string @ListBoxHorizontalExtentDescr => GetResourceString("ListBoxHorizontalExtentDescr");
    /// <summary>Indicates whether the ListBox will display a horizontal scroll bar for items beyond the right edge of the ListBox.</summary>
    internal static string @ListBoxHorizontalScrollbarDescr => GetResourceString("ListBoxHorizontalScrollbarDescr");
    /// <summary>Indicates whether the list can contain only complete items.</summary>
    internal static string @ListBoxIntegralHeightDescr => GetResourceString("ListBoxIntegralHeightDescr");
    /// <summary>Cannot call this method when SelectionMode is SelectionMode.NONE.</summary>
    internal static string @ListBoxInvalidSelectionMode => GetResourceString("ListBoxInvalidSelectionMode");
    /// <summary>The height, in pixels, of items in a fixed-height owner-draw list box.</summary>
    internal static string @ListBoxItemHeightDescr => GetResourceString("ListBoxItemHeightDescr");
    /// <summary>List box contains too many items.</summary>
    internal static string @ListBoxItemOverflow => GetResourceString("ListBoxItemOverflow");
    /// <summary>The items in the list box.</summary>
    internal static string @ListBoxItemsDescr => GetResourceString("ListBoxItemsDescr");
    /// <summary>Indicates if values should be displayed in columns horizontally.</summary>
    internal static string @ListBoxMultiColumnDescr => GetResourceString("ListBoxMultiColumnDescr");
    /// <summary>The preferred height of this control.</summary>
    internal static string @ListBoxPreferredHeightDescr => GetResourceString("ListBoxPreferredHeightDescr");
    /// <summary>Indicates if the list box should always have a scroll bar present, regardless of how many items are in it.</summary>
    internal static string @ListBoxScrollIsVisibleDescr => GetResourceString("ListBoxScrollIsVisibleDescr");
    /// <summary>ListBox.SelectedIndexCollection is read only.</summary>
    internal static string @ListBoxSelectedIndexCollectionIsReadOnly => GetResourceString("ListBoxSelectedIndexCollectionIsReadOnly");
    /// <summary>Retrieves the index of the first selection in the list box, or -1 if there is no selection.</summary>
    internal static string @ListBoxSelectedIndexDescr => GetResourceString("ListBoxSelectedIndexDescr");
    /// <summary>A collection of indexes for the currently selected items in the list box.</summary>
    internal static string @ListBoxSelectedIndicesDescr => GetResourceString("ListBoxSelectedIndicesDescr");
    /// <summary>The currently selected item in the list box, or null.</summary>
    internal static string @ListBoxSelectedItemDescr => GetResourceString("ListBoxSelectedItemDescr");
    /// <summary>A collection of currently selected items.</summary>
    internal static string @ListBoxSelectedItemsDescr => GetResourceString("ListBoxSelectedItemsDescr");
    /// <summary>ListBox.SelectedObjectCollection is read only.</summary>
    internal static string @ListBoxSelectedObjectCollectionIsReadOnly => GetResourceString("ListBoxSelectedObjectCollectionIsReadOnly");
    /// <summary>Indicates if the list box is to be single-select, multi-select, or not selectable.</summary>
    internal static string @ListBoxSelectionModeDescr => GetResourceString("ListBoxSelectionModeDescr");
    /// <summary>Controls whether the list is sorted.</summary>
    internal static string @ListBoxSortedDescr => GetResourceString("ListBoxSortedDescr");
    /// <summary>The index of the first visible item in the list box.</summary>
    internal static string @ListBoxTopIndexDescr => GetResourceString("ListBoxTopIndexDescr");
    /// <summary>Indicates if TAB characters should be expanded into full spacing.</summary>
    internal static string @ListBoxUseTabStopsDescr => GetResourceString("ListBoxUseTabStopsDescr");
    /// <summary>ListBox cannot have variable height and be multicolumn. Either make the ListBox owner-draw fixed height, or make the ListBox single column.</summary>
    internal static string @ListBoxVarHeightMultiCol => GetResourceString("ListBoxVarHeightMultiCol");
    /// <summary>Indicates the list that this control will use to get its items.</summary>
    internal static string @ListControlDataSourceDescr => GetResourceString("ListControlDataSourceDescr");
    /// <summary>Indicates the property to display for the items in this control.</summary>
    internal static string @ListControlDisplayMemberDescr => GetResourceString("ListControlDisplayMemberDescr");
    /// <summary>Cannot set the SelectedValue in a ListControl with an empty ValueMember.</summary>
    internal static string @ListControlEmptyValueMemberInSettingSelectedValue => GetResourceString("ListControlEmptyValueMemberInSettingSelectedValue");
    /// <summary>Event raised to allow you to convert the value to a value suitable for display.</summary>
    internal static string @ListControlFormatDescr => GetResourceString("ListControlFormatDescr");
    /// <summary>Event raised when the value of the FormatInfo property changed.</summary>
    internal static string @ListControlFormatInfoChangedDescr => GetResourceString("ListControlFormatInfoChangedDescr");
    /// <summary>Event raised when the value of the FormatString property is changed.</summary>
    internal static string @ListControlFormatStringChangedDescr => GetResourceString("ListControlFormatStringChangedDescr");
    /// <summary>The format specifier characters that indicate how a value is to be displayed.</summary>
    internal static string @ListControlFormatStringDescr => GetResourceString("ListControlFormatStringDescr");
    /// <summary>Event raised when the value of the FormattingEnabled property is changed.</summary>
    internal static string @ListControlFormattingEnabledChangedDescr => GetResourceString("ListControlFormattingEnabledChangedDescr");
    /// <summary>If this property is true, the value of FormatString is used to convert the value of DisplayMember into a value that can be displayed.</summary>
    internal static string @ListControlFormattingEnabledDescr => GetResourceString("ListControlFormattingEnabledDescr");
    /// <summary>Event raised when the value of the DataSource property is changed on ListControl.</summary>
    internal static string @ListControlOnDataSourceChangedDescr => GetResourceString("ListControlOnDataSourceChangedDescr");
    /// <summary>Event raised when the value of the DisplayMember property is changed on ListControl.</summary>
    internal static string @ListControlOnDisplayMemberChangedDescr => GetResourceString("ListControlOnDisplayMemberChangedDescr");
    /// <summary>Event raised when the value of the SelectedValue property is changed on ListControl.</summary>
    internal static string @ListControlOnSelectedValueChangedDescr => GetResourceString("ListControlOnSelectedValueChangedDescr");
    /// <summary>Event raised when the value of the ValueMember property is changed on ListControl.</summary>
    internal static string @ListControlOnValueMemberChangedDescr => GetResourceString("ListControlOnValueMemberChangedDescr");
    /// <summary>Indicates the actual value of the currently selected item. Setting it will cause the item whose actual value is equal to become selected.</summary>
    internal static string @ListControlSelectedValueDescr => GetResourceString("ListControlSelectedValueDescr");
    /// <summary>Indicates the property to use as the actual value for the items in the control.</summary>
    internal static string @ListControlValueMemberDescr => GetResourceString("ListControlValueMemberDescr");
    /// <summary>Cannot bind to the new display member.</summary>
    internal static string @ListControlWrongDisplayMember => GetResourceString("ListControlWrongDisplayMember");
    /// <summary>Cannot bind to the new value member.</summary>
    internal static string @ListControlWrongValueMember => GetResourceString("ListControlWrongValueMember");
    /// <summary>Enumerator's current position is out of the bounds of the list.</summary>
    internal static string @ListEnumCurrentOutOfRange => GetResourceString("ListEnumCurrentOutOfRange");
    /// <summary>List that this enumerator is bound to has been modified. An enumerator can only be used if the list does not change.</summary>
    internal static string @ListEnumVersionMismatch => GetResourceString("ListEnumVersionMismatch");
    /// <summary>Position is either less than 0 or greater than the number of items in the data source.</summary>
    internal static string @ListManagerBadPosition => GetResourceString("ListManagerBadPosition");
    /// <summary>Cannot operate with an empty list.</summary>
    internal static string @ListManagerEmptyList => GetResourceString("ListManagerEmptyList");
    /// <summary>Index {0} does not have a value.</summary>
    internal static string @ListManagerNoValue => GetResourceString("ListManagerNoValue");
    /// <summary>Data sources of type {0} are not supported.</summary>
    internal static string @ListManagerSetDataSource => GetResourceString("ListManagerSetDataSource");
    /// <summary>Indicates the type of action required by the user to activate an item, and the feedback given.</summary>
    internal static string @ListViewActivationDescr => GetResourceString("ListViewActivationDescr");
    /// <summary>When HotTracking is on, activation must be ItemActivation.OneClick.</summary>
    internal static string @ListViewActivationMustBeOnWhenHotTrackingIsOn => GetResourceString("ListViewActivationMustBeOnWhenHotTrackingIsOn");
    /// <summary>Column cannot be added to ListView.</summary>
    internal static string @ListViewAddColumnFailed => GetResourceString("ListViewAddColumnFailed");
    /// <summary>Item cannot be added to ListView.</summary>
    internal static string @ListViewAddItemFailed => GetResourceString("ListViewAddItemFailed");
    /// <summary>Occurs when the text of an item has been edited by the user.</summary>
    internal static string @ListViewAfterLabelEditDescr => GetResourceString("ListViewAfterLabelEditDescr");
    /// <summary>Indicates how items are aligned within the ListView.</summary>
    internal static string @ListViewAlignmentDescr => GetResourceString("ListViewAlignmentDescr");
    /// <summary>Indicates whether the user can reorder columns in Details view.</summary>
    internal static string @ListViewAllowColumnReorderDescr => GetResourceString("ListViewAllowColumnReorderDescr");
    /// <summary>Indicates whether items are kept arranged automatically when in LargeIcon or SmallIcon view.</summary>
    internal static string @ListViewAutoArrangeDescr => GetResourceString("ListViewAutoArrangeDescr");
    /// <summary>Indicates whether the background image will be tiled to fill the entire background of the control.</summary>
    internal static string @ListViewBackgroundImageTiledDescr => GetResourceString("ListViewBackgroundImageTiledDescr");
    /// <summary>Parameter must be of type ListViewSubItem.</summary>
    internal static string @ListViewBadListViewSubItem => GetResourceString("ListViewBadListViewSubItem");
    /// <summary>Occurs when the text of an item is about to be edited by the user.</summary>
    internal static string @ListViewBeforeLabelEditDescr => GetResourceString("ListViewBeforeLabelEditDescr");
    /// <summary>BeginEdit did not succeed because the LabelEdit property is false.</summary>
    internal static string @ListViewBeginEditFailed => GetResourceString("ListViewBeginEditFailed");
    /// <summary>Notifies users of virtual ListView controls that they should prepare their cache.</summary>
    internal static string @ListViewCacheVirtualItemsEventDescr => GetResourceString("ListViewCacheVirtualItemsEventDescr");
    /// <summary>Cannot access the checked items collection when the ListView is in virtual mode.</summary>
    internal static string @ListViewCantAccessCheckedItemsCollectionWhenInVirtualMode => GetResourceString("ListViewCantAccessCheckedItemsCollectionWhenInVirtualMode");
    /// <summary>Cannot access the selected items collection when the ListView is in virtual mode.</summary>
    internal static string @ListViewCantAccessSelectedItemsCollectionWhenInVirtualMode => GetResourceString("ListViewCantAccessSelectedItemsCollectionWhenInVirtualMode");
    /// <summary>When the ListView is in virtual mode, you cannot add items to the ListView items collection. Use  the VirtualListSize property instead to change the size of the ListView items collection.</summary>
    internal static string @ListViewCantAddItemsToAVirtualListView => GetResourceString("ListViewCantAddItemsToAVirtualListView");
    /// <summary>When the ListView is in virtual mode, you cannot enumerate through the ListView items collection using an enumerator or call GetEnumerator. Use the ListView items indexer instead and access an item by index value.</summary>
    internal static string @ListViewCantGetEnumeratorInVirtualMode => GetResourceString("ListViewCantGetEnumeratorInVirtualMode");
    /// <summary>Cannot modify the items collection in a virtual ListView.</summary>
    internal static string @ListViewCantModifyTheItemCollInAVirtualListView => GetResourceString("ListViewCantModifyTheItemCollInAVirtualListView");
    /// <summary>When the ListView is in virtual mode, you cannot remove items from the ListView items collection. Use the VirtualListSize property instead to change the size of the ListView items collection.</summary>
    internal static string @ListViewCantRemoveItemsFromAVirtualListView => GetResourceString("ListViewCantRemoveItemsFromAVirtualListView");
    /// <summary>Tile view is not supported in VirtualMode.</summary>
    internal static string @ListViewCantSetViewToTileViewInVirtualMode => GetResourceString("ListViewCantSetViewToTileViewInVirtualMode");
    /// <summary>VirtualMode is not supported in Tile view.</summary>
    internal static string @ListViewCantSetVirtualModeWhenInTileView => GetResourceString("ListViewCantSetVirtualModeWhenInTileView");
    /// <summary>Indicates whether check boxes are displayed beside items.</summary>
    internal static string @ListViewCheckBoxesDescr => GetResourceString("ListViewCheckBoxesDescr");
    /// <summary>CheckBoxes are not supported in Tile view. Choose a different view or set CheckBoxes to false.</summary>
    internal static string @ListViewCheckBoxesNotSupportedInTileView => GetResourceString("ListViewCheckBoxesNotSupportedInTileView");
    /// <summary>Occurs when a column header is clicked.</summary>
    internal static string @ListViewColumnClickDescr => GetResourceString("ListViewColumnClickDescr");
    /// <summary>ColumnInfo cannot be set.</summary>
    internal static string @ListViewColumnInfoSet => GetResourceString("ListViewColumnInfoSet");
    /// <summary>Occurs when the ListView column header has been reordered.</summary>
    internal static string @ListViewColumnReorderedDscr => GetResourceString("ListViewColumnReorderedDscr");
    /// <summary>The columns shown in Details view.</summary>
    internal static string @ListViewColumnsDescr => GetResourceString("ListViewColumnsDescr");
    /// <summary>Occurs when the user stops dragging the column header divider. Works only in Details mode.</summary>
    internal static string @ListViewColumnWidthChangedDscr => GetResourceString("ListViewColumnWidthChangedDscr");
    /// <summary>Occurs when the user drags the column header divider. Works only in Details mode.</summary>
    internal static string @ListViewColumnWidthChangingDscr => GetResourceString("ListViewColumnWidthChangingDscr");
    /// <summary>Occurs in owner draw mode, when a column header needs to be drawn.</summary>
    internal static string @ListViewDrawColumnHeaderEventDescr => GetResourceString("ListViewDrawColumnHeaderEventDescr");
    /// <summary>Occurs in owner-draw mode, when an item needs to be drawn.</summary>
    internal static string @ListViewDrawItemEventDescr => GetResourceString("ListViewDrawItemEventDescr");
    /// <summary>Occurs in owner-draw mode, when a SubItem (Details view only) needs to be drawn.</summary>
    internal static string @ListViewDrawSubItemEventDescr => GetResourceString("ListViewDrawSubItemEventDescr");
    /// <summary>FindNearestItem is supported only when the ListView is in SMALLICON or LARGEICON view.</summary>
    internal static string @ListViewFindNearestItemWorksOnlyInIconView => GetResourceString("ListViewFindNearestItemWorksOnlyInIconView");
    /// <summary>The ListView item that currently has the user focus.</summary>
    internal static string @ListViewFocusedItemDescr => GetResourceString("ListViewFocusedItemDescr");
    /// <summary>Indicates whether all SubItems are highlighted along with the item when selected.</summary>
    internal static string @ListViewFullRowSelectDescr => GetResourceString("ListViewFullRowSelectDescr");
    /// <summary>Cannot get the top item in LargeIcon, SmallIcon, or Tile view.</summary>
    internal static string @ListViewGetTopItem => GetResourceString("ListViewGetTopItem");
    /// <summary>Displays grid lines around items and SubItems. Only shown when in Details view.</summary>
    internal static string @ListViewGridLinesDescr => GetResourceString("ListViewGridLinesDescr");
    /// <summary>Default</summary>
    internal static string @ListViewGroupDefaultGroup => GetResourceString("ListViewGroupDefaultGroup");
    /// <summary>ListViewGroup</summary>
    internal static string @ListViewGroupDefaultHeader => GetResourceString("ListViewGroupDefaultHeader");
    /// <summary>The name of this group.</summary>
    internal static string @ListViewGroupNameDescr => GetResourceString("ListViewGroupNameDescr");
    /// <summary>The groups in the ListView.</summary>
    internal static string @ListViewGroupsDescr => GetResourceString("ListViewGroupsDescr");
    /// <summary>Parameter must be of type ListViewGroup.</summary>
    internal static string @ListViewGroupCollectionBadListViewGroup => GetResourceString("ListViewGroupCollectionBadListViewGroup");
    /// <summary>The style of the column headers in Details view.</summary>
    internal static string @ListViewHeaderStyleDescr => GetResourceString("ListViewHeaderStyleDescr");
    /// <summary>Removes highlighting from the selected item when the control does not have focus.</summary>
    internal static string @ListViewHideSelectionDescr => GetResourceString("ListViewHideSelectionDescr");
    /// <summary>Allows items to appear as hyperlinks when the mouse hovers over them.</summary>
    internal static string @ListViewHotTrackingDescr => GetResourceString("ListViewHotTrackingDescr");
    /// <summary>When HotTracking is on, HoverSelection must also be enabled.</summary>
    internal static string @ListViewHoverMustBeOnWhenHotTrackingIsOn => GetResourceString("ListViewHoverMustBeOnWhenHotTrackingIsOn");
    /// <summary>Allows items to be selected by hovering over them with the mouse.</summary>
    internal static string @ListViewHoverSelectDescr => GetResourceString("ListViewHoverSelectDescr");
    /// <summary>IndentCount property on the ListViewItem class does not accept negative values.</summary>
    internal static string @ListViewIndentCountCantBeNegative => GetResourceString("ListViewIndentCountCantBeNegative");
    /// <summary>Allows insertion mark attributes to be changed.</summary>
    internal static string @ListViewInsertionMarkDescr => GetResourceString("ListViewInsertionMarkDescr");
    /// <summary>Event raised when the checked property of a ListView item changes.</summary>
    internal static string @ListViewItemCheckedDescr => GetResourceString("ListViewItemCheckedDescr");
    /// <summary>Occurs when an item is activated.</summary>
    internal static string @ListViewItemClickDescr => GetResourceString("ListViewItemClickDescr");
    /// <summary>Occurs when the user begins dragging an item.</summary>
    internal static string @ListViewItemDragDescr => GetResourceString("ListViewItemDragDescr");
    /// <summary>The ImageList index value of the image displayed when the list view item is in the unselected state.</summary>
    internal static string @ListViewItemImageIndexDescr => GetResourceString("ListViewItemImageIndexDescr");
    /// <summary>The key in the image-list value that represents the image to display. when the list view item is in the unselected state.</summary>
    internal static string @ListViewItemImageKeyDescr => GetResourceString("ListViewItemImageKeyDescr");
    /// <summary>Number of indents for a list ListViewItem</summary>
    internal static string @ListViewItemIndentCountDescr => GetResourceString("ListViewItemIndentCountDescr");
    /// <summary>Occurs when the mouse hovers over an item.</summary>
    internal static string @ListViewItemMouseHoverDescr => GetResourceString("ListViewItemMouseHoverDescr");
    /// <summary>The items in the ListView.</summary>
    internal static string @ListViewItemsDescr => GetResourceString("ListViewItemsDescr");
    /// <summary>Event raised when the selection state of an item has changed.</summary>
    internal static string @ListViewItemSelectionChangedDescr => GetResourceString("ListViewItemSelectionChangedDescr");
    /// <summary>The sorting comparer for this view.</summary>
    internal static string @ListViewItemSorterDescr => GetResourceString("ListViewItemSorterDescr");
    /// <summary>The image-list index value of the state image displayed.</summary>
    internal static string @ListViewItemStateImageIndexDescr => GetResourceString("ListViewItemStateImageIndexDescr");
    /// <summary>The key in the image-list value that represents the image to display.</summary>
    internal static string @ListViewItemStateImageKeyDescr => GetResourceString("ListViewItemStateImageKeyDescr");
    /// <summary>The SubItems for this ListViewItem.</summary>
    internal static string @ListViewItemSubItemsDescr => GetResourceString("ListViewItemSubItemsDescr");
    /// <summary>Allows item labels to be edited in place by the user.</summary>
    internal static string @ListViewLabelEditDescr => GetResourceString("ListViewLabelEditDescr");
    /// <summary>Determines whether label text can wrap to a new line.</summary>
    internal static string @ListViewLabelWrapDescr => GetResourceString("ListViewLabelWrapDescr");
    /// <summary>The ImageList control used by the ListView for images in Large Icon View.</summary>
    internal static string @ListViewLargeImageListDescr => GetResourceString("ListViewLargeImageListDescr");
    /// <summary>Allows multiple items to be selected.</summary>
    internal static string @ListViewMultiSelectDescr => GetResourceString("ListViewMultiSelectDescr");
    /// <summary>Controls whether the system or the user paints items/SubItems.</summary>
    internal static string @ListViewOwnerDrawDescr => GetResourceString("ListViewOwnerDrawDescr");
    /// <summary>Retrieves the virtual item from the user.</summary>
    internal static string @ListViewRetrieveVirtualItemEventDescr => GetResourceString("ListViewRetrieveVirtualItemEventDescr");
    /// <summary>Indicates whether the control will display scroll bars if it contains more items than can fit in the client area.</summary>
    internal static string @ListViewScrollableDescr => GetResourceString("ListViewScrollableDescr");
    /// <summary>Notifies the user that a search is taking place on a virtual ListView.</summary>
    internal static string @ListViewSearchForVirtualItemDescr => GetResourceString("ListViewSearchForVirtualItemDescr");
    /// <summary>Occurs whenever the 'SelectedIndex' property for this ListView changes.</summary>
    internal static string @ListViewSelectedIndexChangedDescr => GetResourceString("ListViewSelectedIndexChangedDescr");
    /// <summary>A collection of items that are currently selected in the ListView.</summary>
    internal static string @ListViewSelectedItemsDescr => GetResourceString("ListViewSelectedItemsDescr");
    /// <summary>Cannot set the TopItem in LargeIcon, SmallIcon, or Tile View.</summary>
    internal static string @ListViewSetTopItem => GetResourceString("ListViewSetTopItem");
    /// <summary>Indicates whether the control will display the items in group form.</summary>
    internal static string @ListViewShowGroupsDescr => GetResourceString("ListViewShowGroupsDescr");
    /// <summary>Allows ListViewItems to display ToolTips.</summary>
    internal static string @ListViewShowItemToolTipsDescr => GetResourceString("ListViewShowItemToolTipsDescr");
    /// <summary>The ImageList control used by the ListView for images in all views except for the large icon view.</summary>
    internal static string @ListViewSmallImageListDescr => GetResourceString("ListViewSmallImageListDescr");
    /// <summary>Indicates the manner in which items are to be sorted.</summary>
    internal static string @ListViewSortingDescr => GetResourceString("ListViewSortingDescr");
    /// <summary>Sorting is not allowed in a virtual ListView.</summary>
    internal static string @ListViewSortNotAllowedInVirtualListView => GetResourceString("ListViewSortNotAllowedInVirtualListView");
    /// <summary>The startIndex value cannot be larger than the endIndex value.</summary>
    internal static string @ListViewStartIndexCannotBeLargerThanEndIndex => GetResourceString("ListViewStartIndexCannotBeLargerThanEndIndex");
    /// <summary>The ImageList control used by the ListView for custom states.</summary>
    internal static string @ListViewStateImageListDescr => GetResourceString("ListViewStateImageListDescr");
    /// <summary>Argument must be of type ListViewSubItem.</summary>
    internal static string @ListViewSubItemCollectionInvalidArgument => GetResourceString("ListViewSubItemCollectionInvalidArgument");
    /// <summary>The size of the tile in Tile view.</summary>
    internal static string @ListViewTileSizeDescr => GetResourceString("ListViewTileSizeDescr");
    /// <summary>TileSize must be positive.</summary>
    internal static string @ListViewTileSizeMustBePositive => GetResourceString("ListViewTileSizeMustBePositive");
    /// <summary>Tile view does not support CheckBoxes. Choose a different view or set CheckBoxes to false.</summary>
    internal static string @ListViewTileViewDoesNotSupportCheckBoxes => GetResourceString("ListViewTileViewDoesNotSupportCheckBoxes");
    /// <summary>The first item that is visible to the user.</summary>
    internal static string @ListViewTopItemDescr => GetResourceString("ListViewTopItemDescr");
    /// <summary>Selects one of five different views that items can be shown in.</summary>
    internal static string @ListViewViewDescr => GetResourceString("ListViewViewDescr");
    /// <summary>ListView virtualization requires a valid ListViewItem to be provided by the RetrieveVirtualItem event or in the OnRetrieveVirtualItem method.</summary>
    internal static string @ListViewVirtualItemRequired => GetResourceString("ListViewVirtualItemRequired");
    /// <summary>Event raised when the selection state of a range of items has changed. This event in raised only in virtual mode.</summary>
    internal static string @ListViewVirtualItemsSelectionRangeChangedDescr => GetResourceString("ListViewVirtualItemsSelectionRangeChangedDescr");
    /// <summary>Occurs whenever the state of a virtual item is changed.</summary>
    internal static string @ListViewVirtualItemStateChangedDescr => GetResourceString("ListViewVirtualItemStateChangedDescr");
    /// <summary>Sets the count of the item collection when the ListView is in virtual mode.</summary>
    internal static string @ListViewVirtualListSizeDescr => GetResourceString("ListViewVirtualListSizeDescr");
    /// <summary>Value of '{1}' is not valid for '{0}'. {0} should be greater than or equal to 0.</summary>
    internal static string @ListViewVirtualListSizeInvalidArgument => GetResourceString("ListViewVirtualListSizeInvalidArgument");
    /// <summary>Cannot set VirtualMode=true on a list whose checked items collection is not empty.</summary>
    internal static string @ListViewVirtualListViewRequiresNoCheckedItems => GetResourceString("ListViewVirtualListViewRequiresNoCheckedItems");
    /// <summary>Cannot set VirtualMode=true on a ListView that has items.</summary>
    internal static string @ListViewVirtualListViewRequiresNoItems => GetResourceString("ListViewVirtualListViewRequiresNoItems");
    /// <summary>Cannot set VirtualMode=true on a ListView whose selected items collection is not empty.</summary>
    internal static string @ListViewVirtualListViewRequiresNoSelectedItems => GetResourceString("ListViewVirtualListViewRequiresNoSelectedItems");
    /// <summary>When in VirtualMode the ListView RetrieveVirtualListItem event needs a list view SubItem for each ListView column.</summary>
    internal static string @ListViewVirtualModeCantAccessSubItem => GetResourceString("ListViewVirtualModeCantAccessSubItem");
    /// <summary>Enables ListView virtual mode.</summary>
    internal static string @ListViewVirtualModeDescr => GetResourceString("ListViewVirtualModeDescr");
    /// <summary>Cannot load the "{0}" DLL into memory.</summary>
    internal static string @LoadDLLError => GetResourceString("LoadDLLError");
    /// <summary>Cannot load the text.</summary>
    internal static string @LoadTextError => GetResourceString("LoadTextError");
    /// <summary>Indicates whether the prompt character is valid as input.</summary>
    internal static string @MaskedTextBoxAllowPromptAsInputDescr => GetResourceString("MaskedTextBoxAllowPromptAsInputDescr");
    /// <summary>Indicates whether only ASCII characters are accepted as valid input.</summary>
    internal static string @MaskedTextBoxAsciiOnlyDescr => GetResourceString("MaskedTextBoxAsciiOnlyDescr");
    /// <summary>Indicates whether the control will beep when an invalid character is typed.</summary>
    internal static string @MaskedTextBoxBeepOnErrorDescr => GetResourceString("MaskedTextBoxBeepOnErrorDescr");
    /// <summary>The culture that determines the value of the localizable mask language separators and placeholders.</summary>
    internal static string @MaskedTextBoxCultureDescr => GetResourceString("MaskedTextBoxCultureDescr");
    /// <summary>Indicates whether the text to be copied to the clipboard includes literals and/or prompt characters.</summary>
    internal static string @MaskedTextBoxCutCopyMaskFormat => GetResourceString("MaskedTextBoxCutCopyMaskFormat");
    /// <summary>Indicates whether prompt characters are displayed when the control does not have focus.</summary>
    internal static string @MaskedTextBoxHidePromptOnLeaveDescr => GetResourceString("MaskedTextBoxHidePromptOnLeaveDescr");
    /// <summary>Mask input is not complete.</summary>
    internal static string @MaskedTextBoxIncompleteMsg => GetResourceString("MaskedTextBoxIncompleteMsg");
    /// <summary>Indicates the masked text box input character typing mode.</summary>
    internal static string @MaskedTextBoxInsertKeyModeDescr => GetResourceString("MaskedTextBoxInsertKeyModeDescr");
    /// <summary>Specified character value is not allowed for this property.</summary>
    internal static string @MaskedTextBoxInvalidCharError => GetResourceString("MaskedTextBoxInvalidCharError");
    /// <summary>Occurs when the value of IsOverwriteMode property changes.</summary>
    internal static string @MaskedTextBoxIsOverwriteModeChangedDescr => GetResourceString("MaskedTextBoxIsOverwriteModeChangedDescr");
    /// <summary>Occurs when the value of Mask property changes.</summary>
    internal static string @MaskedTextBoxMaskChangedDescr => GetResourceString("MaskedTextBoxMaskChangedDescr");
    /// <summary>Sets the string governing the input allowed for this control.</summary>
    internal static string @MaskedTextBoxMaskDescr => GetResourceString("MaskedTextBoxMaskDescr");
    /// <summary>Occurs when the input character or text does not comply with the mask specification.</summary>
    internal static string @MaskedTextBoxMaskInputRejectedDescr => GetResourceString("MaskedTextBoxMaskInputRejectedDescr");
    /// <summary>Specified mask contains characters that are not valid.</summary>
    internal static string @MaskedTextBoxMaskInvalidChar => GetResourceString("MaskedTextBoxMaskInvalidChar");
    /// <summary>PasswordChar and PromptChar values cannot be the same.</summary>
    internal static string @MaskedTextBoxPasswordAndPromptCharError => GetResourceString("MaskedTextBoxPasswordAndPromptCharError");
    /// <summary>Indicates the character to display for password input.</summary>
    internal static string @MaskedTextBoxPasswordCharDescr => GetResourceString("MaskedTextBoxPasswordCharDescr");
    /// <summary>Indicates the character used as the placeholder.</summary>
    internal static string @MaskedTextBoxPromptCharDescr => GetResourceString("MaskedTextBoxPromptCharDescr");
    /// <summary>If true, the input text is rejected whenever a character fails to comply with the mask; otherwise, characters in the text are processed one by one as individual inputs.</summary>
    internal static string @MaskedTextBoxRejectInputOnFirstFailureDescr => GetResourceString("MaskedTextBoxRejectInputOnFirstFailureDescr");
    /// <summary>Specifies whether to reset and skip the current position if editable, when the input character has the same value as the prompt.</summary>
    internal static string @MaskedTextBoxResetOnPrompt => GetResourceString("MaskedTextBoxResetOnPrompt");
    /// <summary>Specifies whether to reset and skip the current position if editable, when the input is the space character.</summary>
    internal static string @MaskedTextBoxResetOnSpace => GetResourceString("MaskedTextBoxResetOnSpace");
    /// <summary>Specifies whether to skip the current position if non-editable and the input character has the same value as the literal at that position.</summary>
    internal static string @MaskedTextBoxSkipLiterals => GetResourceString("MaskedTextBoxSkipLiterals");
    /// <summary>Indicates whether the string returned from the Text property includes literals and/or prompt characters.</summary>
    internal static string @MaskedTextBoxTextMaskFormat => GetResourceString("MaskedTextBoxTextMaskFormat");
    /// <summary>Occurs when the ValidatingType object has completed parsing the input text.</summary>
    internal static string @MaskedTextBoxTypeValidationCompletedDescr => GetResourceString("MaskedTextBoxTypeValidationCompletedDescr");
    /// <summary>Type validation succeeded.</summary>
    internal static string @MaskedTextBoxTypeValidationSucceeded => GetResourceString("MaskedTextBoxTypeValidationSucceeded");
    /// <summary>Indicates if the text in the edit control should appear as the default password character.</summary>
    internal static string @MaskedTextBoxUseSystemPasswordCharDescr => GetResourceString("MaskedTextBoxUseSystemPasswordCharDescr");
    /// <summary>Occurs when the ValidatedValue changes after type validation has been completed.</summary>
    internal static string @MaskedTextBoxValidatedValueChangedDescr => GetResourceString("MaskedTextBoxValidatedValueChangedDescr");
    /// <summary>Specifies the Type of the object to be used for parsing the input text when the control looses focus.</summary>
    internal static string @MaskedTextBoxValidatingTypeDescr => GetResourceString("MaskedTextBoxValidatingTypeDescr");
    /// <summary>MDI child forms can be added only to an MdiClient.</summary>
    internal static string @MDIChildAddToNonMDIParent => GetResourceString("MDIChildAddToNonMDIParent");
    /// <summary>MDI container forms must be top-level.</summary>
    internal static string @MDIContainerMustBeTopLevel => GetResourceString("MDIContainerMustBeTopLevel");
    /// <summary>&amp;More Windows...</summary>
    internal static string @MDIMenuMoreWindows => GetResourceString("MDIMenuMoreWindows");
    /// <summary>Form that was specified to be the MdiParent for this form is not an MdiContainer.</summary>
    internal static string @MDIParentNotContainer => GetResourceString("MDIParentNotContainer");
    /// <summary>Occurs whenever a particular item's height needs to be calculated.</summary>
    internal static string @measureItemEventDescr => GetResourceString("measureItemEventDescr");
    /// <summary>The shortcut key associated with the menu item.</summary>
    internal static string @MenuItemShortCutDescr => GetResourceString("MenuItemShortCutDescr");
    /// <summary>Indicates whether the shorcut key for the menu item is displayed on the item.</summary>
    internal static string @MenuItemShowShortCutDescr => GetResourceString("MenuItemShowShortCutDescr");
    /// <summary>Specifies the item whose DropDown will show the list of MDI windows.</summary>
    internal static string @MenuStripMdiWindowListItem => GetResourceString("MenuStripMdiWindowListItem");
    /// <summary>Occurs when the user has started accessing the menu through the keyboard or mouse.</summary>
    internal static string @MenuStripMenuActivateDescr => GetResourceString("MenuStripMenuActivateDescr");
    /// <summary>Occurs when the user has finished accessing the menu through the keyboard or mouse.</summary>
    internal static string @MenuStripMenuDeactivateDescr => GetResourceString("MenuStripMenuDeactivateDescr");
    /// <summary>Indicates which annual dates should be boldface.</summary>
    internal static string @MonthCalendarAnnuallyBoldedDatesDescr => GetResourceString("MonthCalendarAnnuallyBoldedDatesDescr");
    /// <summary>Calendar body</summary>
    internal static string @MonthCalendarBodyAccessibleName => GetResourceString("MonthCalendarBodyAccessibleName");
    /// <summary>The number of rows and columns of months in a month calendar.</summary>
    internal static string @MonthCalendarDimensionsDescr => GetResourceString("MonthCalendarDimensionsDescr");
    /// <summary>The first day of the week.</summary>
    internal static string @MonthCalendarFirstDayOfWeekDescr => GetResourceString("MonthCalendarFirstDayOfWeekDescr");
    /// <summary>The color used to display text within a month.</summary>
    internal static string @MonthCalendarForeColorDescr => GetResourceString("MonthCalendarForeColorDescr");
    /// <summary>Calendar dimensions ({0}, {1}) are not valid.</summary>
    internal static string @MonthCalendarInvalidDimensions => GetResourceString("MonthCalendarInvalidDimensions");
    /// <summary>The maximum date that can be selected for a month calendar control.</summary>
    internal static string @MonthCalendarMaxDateDescr => GetResourceString("MonthCalendarMaxDateDescr");
    /// <summary>Unable to set the MonthCalendar maximum selection count to {0}.</summary>
    internal static string @MonthCalendarMaxSelCount => GetResourceString("MonthCalendarMaxSelCount");
    /// <summary>The total number of days that can be selected for the control.</summary>
    internal static string @MonthCalendarMaxSelectionCountDescr => GetResourceString("MonthCalendarMaxSelectionCountDescr");
    /// <summary>The minimum date that can be selected for a month calendar control.</summary>
    internal static string @MonthCalendarMinDateDescr => GetResourceString("MonthCalendarMinDateDescr");
    /// <summary>The background color displayed within the month.</summary>
    internal static string @MonthCalendarMonthBackColorDescr => GetResourceString("MonthCalendarMonthBackColorDescr");
    /// <summary>Indicates which monthly dates to bold.</summary>
    internal static string @MonthCalendarMonthlyBoldedDatesDescr => GetResourceString("MonthCalendarMonthlyBoldedDatesDescr");
    /// <summary>Next</summary>
    internal static string @MonthCalendarNextButtonAccessibleName => GetResourceString("MonthCalendarNextButtonAccessibleName");
    /// <summary>Occurs when the range of dates changes due to user selection, or through next/previous month navigation.</summary>
    internal static string @MonthCalendarOnDateChangedDescr => GetResourceString("MonthCalendarOnDateChangedDescr");
    /// <summary>Occurs when the user selects a date or a range of dates.</summary>
    internal static string @MonthCalendarOnDateSelectedDescr => GetResourceString("MonthCalendarOnDateSelectedDescr");
    /// <summary>Previous</summary>
    internal static string @MonthCalendarPreviousButtonAccessibleName => GetResourceString("MonthCalendarPreviousButtonAccessibleName");
    /// <summary>Unable to set the MonthCalendar range from {0} to {1}.</summary>
    internal static string @MonthCalendarRange => GetResourceString("MonthCalendarRange");
    /// <summary>The number of months that a single click on a next/previous button moves the display by.</summary>
    internal static string @MonthCalendarScrollChangeDescr => GetResourceString("MonthCalendarScrollChangeDescr");
    /// <summary>The end date in a range of dates selected in a month calendar control.</summary>
    internal static string @MonthCalendarSelectionEndDescr => GetResourceString("MonthCalendarSelectionEndDescr");
    /// <summary>The range of dates selected in a month calendar control.</summary>
    internal static string @MonthCalendarSelectionRangeDescr => GetResourceString("MonthCalendarSelectionRangeDescr");
    /// <summary>The start date in a range of dates selected in a month calendar control.</summary>
    internal static string @MonthCalendarSelectionStartDescr => GetResourceString("MonthCalendarSelectionStartDescr");
    /// <summary>Indicates whether the month calendar control will circle the \"today\" date.</summary>
    internal static string @MonthCalendarShowTodayCircleDescr => GetResourceString("MonthCalendarShowTodayCircleDescr");
    /// <summary>Indicates whether the month calendar control will display the \"today\" date at the bottom of the control.</summary>
    internal static string @MonthCalendarShowTodayDescr => GetResourceString("MonthCalendarShowTodayDescr");
    /// <summary>Indicates whether the month calendar control will display week numbers (1 to 52) to the left of each row of days.</summary>
    internal static string @MonthCalendarShowWeekNumbersDescr => GetResourceString("MonthCalendarShowWeekNumbersDescr");
    /// <summary>The minimum size required to display a full month.</summary>
    internal static string @MonthCalendarSingleMonthSizeDescr => GetResourceString("MonthCalendarSingleMonthSizeDescr");
    /// <summary>The background color displayed in the calendar's title.</summary>
    internal static string @MonthCalendarTitleBackColorDescr => GetResourceString("MonthCalendarTitleBackColorDescr");
    /// <summary>The color used to display text within the calendar's title.</summary>
    internal static string @MonthCalendarTitleForeColorDescr => GetResourceString("MonthCalendarTitleForeColorDescr");
    /// <summary>Today: {0}</summary>
    internal static string @MonthCalendarTodayButtonAccessibleName => GetResourceString("MonthCalendarTodayButtonAccessibleName");
    /// <summary>The current day.</summary>
    internal static string @MonthCalendarTodayDateDescr => GetResourceString("MonthCalendarTodayDateDescr");
    /// <summary>Indicates if the current day has been set.</summary>
    internal static string @MonthCalendarTodayDateSetDescr => GetResourceString("MonthCalendarTodayDateSetDescr");
    /// <summary>The color used to display the previous and following months that appear on the month calendar.</summary>
    internal static string @MonthCalendarTrailingForeColorDescr => GetResourceString("MonthCalendarTrailingForeColorDescr");
    /// <summary>AllowNew can only be set to true on an IBindingList or on a read-write list with a default public constructor.</summary>
    internal static string @NoAllowNewOnReadOnlyList => GetResourceString("NoAllowNewOnReadOnlyList");
    /// <summary>AllowRemove can only be set to true on an IBindingList or on a read-write list.</summary>
    internal static string @NoAllowRemoveOnReadOnlyList => GetResourceString("NoAllowRemoveOnReadOnlyList");
    /// <summary>Type '{0}' must have a public constructor, without parameters, to be serialized.</summary>
    internal static string @NoDefaultConstructor => GetResourceString("NoDefaultConstructor");
    /// <summary>There are no more columns in the table. Use NextRow() to start printing on the next row.</summary>
    internal static string @NoMoreColumns => GetResourceString("NoMoreColumns");
    /// <summary>Only top-level controls can have an owner.</summary>
    internal static string @NonTopLevelCantHaveOwner => GetResourceString("NonTopLevelCantHaveOwner");
    /// <summary>n/a</summary>
    internal static string @NotAvailable => GetResourceString("NotAvailable");
    /// <summary>The icon to associate with the balloon ToolTip.</summary>
    internal static string @NotifyIconBalloonTipIconDescr => GetResourceString("NotifyIconBalloonTipIconDescr");
    /// <summary>The text to associate with the balloon ToolTip.</summary>
    internal static string @NotifyIconBalloonTipTextDescr => GetResourceString("NotifyIconBalloonTipTextDescr");
    /// <summary>The title of the balloon ToolTip.</summary>
    internal static string @NotifyIconBalloonTipTitleDescr => GetResourceString("NotifyIconBalloonTipTitleDescr");
    /// <summary>Balloon tip text must have a non-empty value.</summary>
    internal static string @NotifyIconEmptyOrNullTipText => GetResourceString("NotifyIconEmptyOrNullTipText");
    /// <summary>The icon to display in the system tray.</summary>
    internal static string @NotifyIconIconDescr => GetResourceString("NotifyIconIconDescr");
    /// <summary>The shortcut menu to show when the user right-clicks the icon.</summary>
    internal static string @NotifyIconMenuDescr => GetResourceString("NotifyIconMenuDescr");
    /// <summary>Occurs when the component is clicked with the mouse.</summary>
    internal static string @NotifyIconMouseClickDescr => GetResourceString("NotifyIconMouseClickDescr");
    /// <summary>Occurs when the component is double-clicked with the mouse.</summary>
    internal static string @NotifyIconMouseDoubleClickDescr => GetResourceString("NotifyIconMouseDoubleClickDescr");
    /// <summary>Occurs when a balloon ToolTip is clicked.</summary>
    internal static string @NotifyIconOnBalloonTipClickedDescr => GetResourceString("NotifyIconOnBalloonTipClickedDescr");
    /// <summary>Occurs when a balloon ToolTip is closed.</summary>
    internal static string @NotifyIconOnBalloonTipClosedDescr => GetResourceString("NotifyIconOnBalloonTipClosedDescr");
    /// <summary>Occurs when a balloon tip is shown.</summary>
    internal static string @NotifyIconOnBalloonTipShownDescr => GetResourceString("NotifyIconOnBalloonTipShownDescr");
    /// <summary>The text that will be displayed when the mouse hovers over the icon.</summary>
    internal static string @NotifyIconTextDescr => GetResourceString("NotifyIconTextDescr");
    /// <summary>Determines whether the control is visible or hidden.</summary>
    internal static string @NotifyIconVisDescr => GetResourceString("NotifyIconVisDescr");
    /// <summary>Item named '{0}' of type '{1}' cannot be added to the resource file because it is not serializable.</summary>
    internal static string @NotSerializableType => GetResourceString("NotSerializableType");
    /// <summary>The type {0} on line {1}, position {2} threw the following exception while being converted: {3}</summary>
    internal static string @NotSupported => GetResourceString("NotSupported");
    /// <summary>At least one of the NumericUpDownAcceleration elements is null.</summary>
    internal static string @NumericUpDownAccelerationCollectionAtLeastOneEntryIsNull => GetResourceString("NumericUpDownAccelerationCollectionAtLeastOneEntryIsNull");
    /// <summary>Argument is null or is not a NumericUpDownAcceleration object.</summary>
    internal static string @NumericUpDownAccelerationCompareException => GetResourceString("NumericUpDownAccelerationCompareException");
    /// <summary>Indicates the number of decimal places to display.</summary>
    internal static string @NumericUpDownDecimalPlacesDescr => GetResourceString("NumericUpDownDecimalPlacesDescr");
    /// <summary>Indicates whether the numeric up-down should display its value in hexadecimal.</summary>
    internal static string @NumericUpDownHexadecimalDescr => GetResourceString("NumericUpDownHexadecimalDescr");
    /// <summary>Indicates the amount to increment or decrement on each button click.</summary>
    internal static string @NumericUpDownIncrementDescr => GetResourceString("NumericUpDownIncrementDescr");
    /// <summary>Parameter value must be greater than or equal to 0.</summary>
    internal static string @NumericUpDownLessThanZeroError => GetResourceString("NumericUpDownLessThanZeroError");
    /// <summary>Indicates the maximum value for the numeric up-down control.</summary>
    internal static string @NumericUpDownMaximumDescr => GetResourceString("NumericUpDownMaximumDescr");
    /// <summary>Indicates the minimum value for the numeric up-down control.</summary>
    internal static string @NumericUpDownMinimumDescr => GetResourceString("NumericUpDownMinimumDescr");
    /// <summary>Occurs when the value in the up-down control changes.</summary>
    internal static string @NumericUpDownOnValueChangedDescr => GetResourceString("NumericUpDownOnValueChangedDescr");
    /// <summary>Indicates whether the thousands separator will be inserted between every three decimal digits.</summary>
    internal static string @NumericUpDownThousandsSeparatorDescr => GetResourceString("NumericUpDownThousandsSeparatorDescr");
    /// <summary>The current value of the numeric up-down control.</summary>
    internal static string @NumericUpDownValueDescr => GetResourceString("NumericUpDownValueDescr");
    /// <summary>Disposed '{0}' can no longer be used.</summary>
    internal static string @ObjectDisposed => GetResourceString("ObjectDisposed");
    /// <summary>Object already has a parent.</summary>
    internal static string @ObjectHasParent => GetResourceString("ObjectHasParent");
    /// <summary>Indicates whether a warning appears when the user specifies a file that does not exist.</summary>
    internal static string @OFDcheckFileExistsDescr => GetResourceString("OFDcheckFileExistsDescr");
    /// <summary>Controls whether multiple files can be selected in the dialog.</summary>
    internal static string @OFDmultiSelectDescr => GetResourceString("OFDmultiSelectDescr");
    /// <summary>The state of the read-only check box in the dialog.</summary>
    internal static string @OFDreadOnlyCheckedDescr => GetResourceString("OFDreadOnlyCheckedDescr");
    /// <summary>Controls whether to show the read-only check box in the dialog.</summary>
    internal static string @OFDshowReadOnlyDescr => GetResourceString("OFDshowReadOnlyDescr");
    /// <summary>OK</summary>
    internal static string @OKCaption => GetResourceString("OKCaption");
    /// <summary>Cannot add or insert the item '{0}' in more than one place. You must first remove it from its current location or clone it.</summary>
    internal static string @OnlyOneControl => GetResourceString("OnlyOneControl");
    /// <summary>This operation requires an IBindingList.</summary>
    internal static string @OperationRequiresIBindingList => GetResourceString("OperationRequiresIBindingList");
    /// <summary>This operation requires an IBindingListView.</summary>
    internal static string @OperationRequiresIBindingListView => GetResourceString("OperationRequiresIBindingListView");
    /// <summary>Cannot allocate needed memory.</summary>
    internal static string @OutOfMemory => GetResourceString("OutOfMemory");
    /// <summary>Form {0} tried to set an ineligible form as its owner. Forms cannot own themselves or their owners.</summary>
    internal static string @OwnsSelfOrOwner => GetResourceString("OwnsSelfOrOwner");
    /// <summary>Number of pixels along all borders to pad docked controls.</summary>
    internal static string @PaddingAllDescr => GetResourceString("PaddingAllDescr");
    /// <summary>Number of pixels along the bottom border to pad docked controls.</summary>
    internal static string @PaddingBottomDescr => GetResourceString("PaddingBottomDescr");
    /// <summary>Number of pixels along the left border to pad docked controls.</summary>
    internal static string @PaddingLeftDescr => GetResourceString("PaddingLeftDescr");
    /// <summary>Number of pixels along the right border to pad docked controls.</summary>
    internal static string @PaddingRightDescr => GetResourceString("PaddingRightDescr");
    /// <summary>Number of pixels along the top border to pad docked controls.</summary>
    internal static string @PaddingTopDescr => GetResourceString("PaddingTopDescr");
    /// <summary>Indicates whether the panel should have a border.</summary>
    internal static string @PanelBorderStyleDescr => GetResourceString("PanelBorderStyleDescr");
    /// <summary>Description</summary>
    internal static string @PBRSDocCommentPaneTitle => GetResourceString("PBRSDocCommentPaneTitle");
    /// <summary>Property value is not valid.</summary>
    internal static string @PBRSErrorInvalidPropertyValue => GetResourceString("PBRSErrorInvalidPropertyValue");
    /// <summary>Properties Window</summary>
    internal static string @PBRSErrorTitle => GetResourceString("PBRSErrorTitle");
    /// <summary>Drop-down list option is not valid.</summary>
    internal static string @PBRSFormatExceptionMessage => GetResourceString("PBRSFormatExceptionMessage");
    /// <summary>Alphabetical</summary>
    internal static string @PBRSToolTipAlphabetic => GetResourceString("PBRSToolTipAlphabetic");
    /// <summary>Categorized</summary>
    internal static string @PBRSToolTipCategorized => GetResourceString("PBRSToolTipCategorized");
    /// <summary>Events</summary>
    internal static string @PBRSToolTipEvents => GetResourceString("PBRSToolTipEvents");
    /// <summary>Properties</summary>
    internal static string @PBRSToolTipProperties => GetResourceString("PBRSToolTipProperties");
    /// <summary>Property Pages</summary>
    internal static string @PBRSToolTipPropertyPages => GetResourceString("PBRSToolTipPropertyPages");
    /// <summary>Enables and disables the Current Page option button.</summary>
    internal static string @PDallowCurrentPageDescr => GetResourceString("PDallowCurrentPageDescr");
    /// <summary>Enables and disables the Pages option button.</summary>
    internal static string @PDallowPagesDescr => GetResourceString("PDallowPagesDescr");
    /// <summary>Enables and disables the Print To File check box.</summary>
    internal static string @PDallowPrintToFileDescr => GetResourceString("PDallowPrintToFileDescr");
    /// <summary>Enables and disables the Selection option button.</summary>
    internal static string @PDallowSelectionDescr => GetResourceString("PDallowSelectionDescr");
    /// <summary>PrintDialog needs a PrinterSettings object to display. Set PrintDialog.Document (preferred) or PrintDialog.PrinterSettings.</summary>
    internal static string @PDcantShowWithoutPrinter => GetResourceString("PDcantShowWithoutPrinter");
    /// <summary>The PrintDocument to get printer settings from.</summary>
    internal static string @PDdocumentDescr => GetResourceString("PDdocumentDescr");
    /// <summary>Value {0} is out of range.</summary>
    internal static string @PDpageOutOfRange => GetResourceString("PDpageOutOfRange");
    /// <summary>The PrinterSettings to use.</summary>
    internal static string @PDprinterSettingsDescr => GetResourceString("PDprinterSettingsDescr");
    /// <summary>Determines whether the Print To File check box is selected.</summary>
    internal static string @PDprintToFileDescr => GetResourceString("PDprintToFileDescr");
    /// <summary>Controls whether the Help button is displayed.</summary>
    internal static string @PDshowHelpDescr => GetResourceString("PDshowHelpDescr");
    /// <summary>Controls whether the Network button is displayed.</summary>
    internal static string @PDshowNetworkDescr => GetResourceString("PDshowNetworkDescr");
    /// <summary>Gets or sets a value indicating whether the print dialog box in the Windows XP style should be shown for systems running Windows XP and later.</summary>
    internal static string @PDuseEXDialog => GetResourceString("PDuseEXDialog");
    /// <summary>Controls what type of border the PictureBox should have.</summary>
    internal static string @PictureBoxBorderStyleDescr => GetResourceString("PictureBoxBorderStyleDescr");
    /// <summary>Attempts to cancel any current image-loading operation.</summary>
    internal static string @PictureBoxCancelAsyncDescr => GetResourceString("PictureBoxCancelAsyncDescr");
    /// <summary>Image to display when the load of another image fails.</summary>
    internal static string @PictureBoxErrorImageDescr => GetResourceString("PictureBoxErrorImageDescr");
    /// <summary>The image displayed in the PictureBox.</summary>
    internal static string @PictureBoxImageDescr => GetResourceString("PictureBoxImageDescr");
    /// <summary>Disk or Web location to load image from.</summary>
    internal static string @PictureBoxImageLocationDescr => GetResourceString("PictureBoxImageLocationDescr");
    /// <summary>Image to display while another image is loading.</summary>
    internal static string @PictureBoxInitialImageDescr => GetResourceString("PictureBoxInitialImageDescr");
    /// <summary>Loads the image from the location specified in ImageLocation.</summary>
    internal static string @PictureBoxLoad0Descr => GetResourceString("PictureBoxLoad0Descr");
    /// <summary>Loads the image from the provided location.</summary>
    internal static string @PictureBoxLoad1Descr => GetResourceString("PictureBoxLoad1Descr");
    /// <summary>Initiates asynchronous loading of the image from the location specified in ImageLocation.</summary>
    internal static string @PictureBoxLoadAsync0Descr => GetResourceString("PictureBoxLoadAsync0Descr");
    /// <summary>Initiates asynchronous loading of the image from the provided location.</summary>
    internal static string @PictureBoxLoadAsync1Descr => GetResourceString("PictureBoxLoadAsync1Descr");
    /// <summary>Event raised when loading into a PictureBox finishes.</summary>
    internal static string @PictureBoxLoadCompletedDescr => GetResourceString("PictureBoxLoadCompletedDescr");
    /// <summary>Event raised when progress is reported during loading into a PictureBox.</summary>
    internal static string @PictureBoxLoadProgressChangedDescr => GetResourceString("PictureBoxLoadProgressChangedDescr");
    /// <summary>Indicates the progress of the background download task.</summary>
    internal static string @PictureBoxLoadProgressDescr => GetResourceString("PictureBoxLoadProgressDescr");
    /// <summary>ImageLocation must be set.</summary>
    internal static string @PictureBoxNoImageLocation => GetResourceString("PictureBoxNoImageLocation");
    /// <summary>Event raised when the value of the SizeMode property is changed on the PictureBox.</summary>
    internal static string @PictureBoxOnSizeModeChangedDescr => GetResourceString("PictureBoxOnSizeModeChangedDescr");
    /// <summary>Controls how the PictureBox will handle image placement and control sizing.</summary>
    internal static string @PictureBoxSizeModeDescr => GetResourceString("PictureBoxSizeModeDescr");
    /// <summary>Controls whether processing will stop until the image is loaded.</summary>
    internal static string @PictureBoxWaitOnLoadDescr => GetResourceString("PictureBoxWaitOnLoadDescr");
    /// <summary>Cannot set the ParentPopup to be yourself.</summary>
    internal static string @PopupControlBadParentArgument => GetResourceString("PopupControlBadParentArgument");
    /// <summary>Occurs before the KeyDown event when a key is pressed while focus is on this control.</summary>
    internal static string @PreviewKeyDownDescr => GetResourceString("PreviewKeyDownDescr");
    /// <summary>Cancel</summary>
    internal static string @PrintControllerWithStatusDialog_Cancel => GetResourceString("PrintControllerWithStatusDialog_Cancel");
    /// <summary>Canceling Print...</summary>
    internal static string @PrintControllerWithStatusDialog_Canceling => GetResourceString("PrintControllerWithStatusDialog_Canceling");
    /// <summary>Generating Previews</summary>
    internal static string @PrintControllerWithStatusDialog_DialogTitlePreview => GetResourceString("PrintControllerWithStatusDialog_DialogTitlePreview");
    /// <summary>Printing</summary>
    internal static string @PrintControllerWithStatusDialog_DialogTitlePrint => GetResourceString("PrintControllerWithStatusDialog_DialogTitlePrint");
    /// <summary>Page {0} of {1}</summary>
    internal static string @PrintControllerWithStatusDialog_NowPrinting => GetResourceString("PrintControllerWithStatusDialog_NowPrinting");
    /// <summary>Controls if the print preview will be rendered with anti-aliasing. Using AntiAlias provides a more accurate display of the document, but it is slower.</summary>
    internal static string @PrintPreviewAntiAliasDescr => GetResourceString("PrintPreviewAntiAliasDescr");
    /// <summary>Determines whether to automatically adjust zoom to fill available space.</summary>
    internal static string @PrintPreviewAutoZoomDescr => GetResourceString("PrintPreviewAutoZoomDescr");
    /// <summary>Number of pages across.</summary>
    internal static string @PrintPreviewColumnsDescr => GetResourceString("PrintPreviewColumnsDescr");
    /// <summary>Zoom must be 0 or greater. Negative values are not permitted.</summary>
    internal static string @PrintPreviewControlZoomNegative => GetResourceString("PrintPreviewControlZoomNegative");
    /// <summary>Print preview</summary>
    internal static string @PrintPreviewDialog_PrintPreview => GetResourceString("PrintPreviewDialog_PrintPreview");
    /// <summary>PrintDocument to be previewed.</summary>
    internal static string @PrintPreviewDocumentDescr => GetResourceString("PrintPreviewDocumentDescr");
    /// <summary>Document cannot be displayed.</summary>
    internal static string @PrintPreviewExceptionPrinting => GetResourceString("PrintPreviewExceptionPrinting");
    /// <summary>Document does not contain any pages.</summary>
    internal static string @PrintPreviewNoPages => GetResourceString("PrintPreviewNoPages");
    /// <summary>PrintPreviewControl to use as the dialog's core.</summary>
    internal static string @PrintPreviewPrintPreviewControlDescr => GetResourceString("PrintPreviewPrintPreviewControlDescr");
    /// <summary>The number of pages displayed vertically down the screen.</summary>
    internal static string @PrintPreviewRowsDescr => GetResourceString("PrintPreviewRowsDescr");
    /// <summary>Indicates the page number to start previewing.</summary>
    internal static string @PrintPreviewStartPageDescr => GetResourceString("PrintPreviewStartPageDescr");
    /// <summary>Indicates how large the pages will appear.</summary>
    internal static string @PrintPreviewZoomDescr => GetResourceString("PrintPreviewZoomDescr");
    /// <summary>Starting color of the gradient used when the button is checked.</summary>
    internal static string @ProfessionalColorsButtonCheckedGradientBeginDescr => GetResourceString("ProfessionalColorsButtonCheckedGradientBeginDescr");
    /// <summary>End color of the gradient used when the button is checked.</summary>
    internal static string @ProfessionalColorsButtonCheckedGradientEndDescr => GetResourceString("ProfessionalColorsButtonCheckedGradientEndDescr");
    /// <summary>Middle color of the gradient used when the button is checked.</summary>
    internal static string @ProfessionalColorsButtonCheckedGradientMiddleDescr => GetResourceString("ProfessionalColorsButtonCheckedGradientMiddleDescr");
    /// <summary>Border color to use with ButtonCheckedHighlight.</summary>
    internal static string @ProfessionalColorsButtonCheckedHighlightBorderDescr => GetResourceString("ProfessionalColorsButtonCheckedHighlightBorderDescr");
    /// <summary>Solid color used when the button is checked.</summary>
    internal static string @ProfessionalColorsButtonCheckedHighlightDescr => GetResourceString("ProfessionalColorsButtonCheckedHighlightDescr");
    /// <summary>Border color to use with the pressed button gradient colors (ButtonPressedGradient*).</summary>
    internal static string @ProfessionalColorsButtonPressedBorderDescr => GetResourceString("ProfessionalColorsButtonPressedBorderDescr");
    /// <summary>Starting color of the gradient used when the button is pressed.</summary>
    internal static string @ProfessionalColorsButtonPressedGradientBeginDescr => GetResourceString("ProfessionalColorsButtonPressedGradientBeginDescr");
    /// <summary>End color of the gradient used when the button is pressed.</summary>
    internal static string @ProfessionalColorsButtonPressedGradientEndDescr => GetResourceString("ProfessionalColorsButtonPressedGradientEndDescr");
    /// <summary>Middle color of the gradient used when the button is pressed.</summary>
    internal static string @ProfessionalColorsButtonPressedGradientMiddleDescr => GetResourceString("ProfessionalColorsButtonPressedGradientMiddleDescr");
    /// <summary>Border color to use with ButtonPressedHighlight.</summary>
    internal static string @ProfessionalColorsButtonPressedHighlightBorderDescr => GetResourceString("ProfessionalColorsButtonPressedHighlightBorderDescr");
    /// <summary>Solid color used when the button is pressed.</summary>
    internal static string @ProfessionalColorsButtonPressedHighlightDescr => GetResourceString("ProfessionalColorsButtonPressedHighlightDescr");
    /// <summary>Border color to use with the selected button gradient colors (ButtonCheckedGradient*).</summary>
    internal static string @ProfessionalColorsButtonSelectedBorderDescr => GetResourceString("ProfessionalColorsButtonSelectedBorderDescr");
    /// <summary>Starting color of the gradient used when the button is selected.</summary>
    internal static string @ProfessionalColorsButtonSelectedGradientBeginDescr => GetResourceString("ProfessionalColorsButtonSelectedGradientBeginDescr");
    /// <summary>End color of the gradient used when the button is selected.</summary>
    internal static string @ProfessionalColorsButtonSelectedGradientEndDescr => GetResourceString("ProfessionalColorsButtonSelectedGradientEndDescr");
    /// <summary>Middle color of the gradient used when the button is selected.</summary>
    internal static string @ProfessionalColorsButtonSelectedGradientMiddleDescr => GetResourceString("ProfessionalColorsButtonSelectedGradientMiddleDescr");
    /// <summary>Border color to use with ButtonSelectedHighlight.</summary>
    internal static string @ProfessionalColorsButtonSelectedHighlightBorderDescr => GetResourceString("ProfessionalColorsButtonSelectedHighlightBorderDescr");
    /// <summary>Solid color used when the button is selected.</summary>
    internal static string @ProfessionalColorsButtonSelectedHighlightDescr => GetResourceString("ProfessionalColorsButtonSelectedHighlightDescr");
    /// <summary>Solid color to use when the button is checked and gradients are being used.</summary>
    internal static string @ProfessionalColorsCheckBackgroundDescr => GetResourceString("ProfessionalColorsCheckBackgroundDescr");
    /// <summary>Solid color to use when the button is checked and selected and gradients are being used.</summary>
    internal static string @ProfessionalColorsCheckPressedBackgroundDescr => GetResourceString("ProfessionalColorsCheckPressedBackgroundDescr");
    /// <summary>Solid color to use when the button is checked and selected and gradients are being used.</summary>
    internal static string @ProfessionalColorsCheckSelectedBackgroundDescr => GetResourceString("ProfessionalColorsCheckSelectedBackgroundDescr");
    /// <summary>Color to use to for shadow effects on the grip.</summary>
    internal static string @ProfessionalColorsGripDarkDescr => GetResourceString("ProfessionalColorsGripDarkDescr");
    /// <summary>Color to use to for highlight effects on the grip.</summary>
    internal static string @ProfessionalColorsGripLightDescr => GetResourceString("ProfessionalColorsGripLightDescr");
    /// <summary>Starting color of the gradient used in the image margin.</summary>
    internal static string @ProfessionalColorsImageMarginGradientBeginDescr => GetResourceString("ProfessionalColorsImageMarginGradientBeginDescr");
    /// <summary>End color of the gradient used in the image margin.</summary>
    internal static string @ProfessionalColorsImageMarginGradientEndDescr => GetResourceString("ProfessionalColorsImageMarginGradientEndDescr");
    /// <summary>Middle color of the gradient used in the image margin.</summary>
    internal static string @ProfessionalColorsImageMarginGradientMiddleDescr => GetResourceString("ProfessionalColorsImageMarginGradientMiddleDescr");
    /// <summary>Starting color of the gradient used in the image margin when an item is revealed.</summary>
    internal static string @ProfessionalColorsImageMarginRevealedGradientBeginDescr => GetResourceString("ProfessionalColorsImageMarginRevealedGradientBeginDescr");
    /// <summary>End color of the gradient used in the image margin when an item is revealed.</summary>
    internal static string @ProfessionalColorsImageMarginRevealedGradientEndDescr => GetResourceString("ProfessionalColorsImageMarginRevealedGradientEndDescr");
    /// <summary>Middle color of the gradient used in the image margin when an item is revealed.</summary>
    internal static string @ProfessionalColorsImageMarginRevealedGradientMiddleDescr => GetResourceString("ProfessionalColorsImageMarginRevealedGradientMiddleDescr");
    /// <summary>The border color to use around the edge of a drop-down menu.</summary>
    internal static string @ProfessionalColorsMenuBorderDescr => GetResourceString("ProfessionalColorsMenuBorderDescr");
    /// <summary>The border color to use with MenuItem.</summary>
    internal static string @ProfessionalColorsMenuItemBorderDescr => GetResourceString("ProfessionalColorsMenuItemBorderDescr");
    /// <summary>Starting color of the gradient used when a top level menu item is pressed.</summary>
    internal static string @ProfessionalColorsMenuItemPressedGradientBeginDescr => GetResourceString("ProfessionalColorsMenuItemPressedGradientBeginDescr");
    /// <summary>End color of the gradient used when a top level menu item is pressed.</summary>
    internal static string @ProfessionalColorsMenuItemPressedGradientEndDescr => GetResourceString("ProfessionalColorsMenuItemPressedGradientEndDescr");
    /// <summary>Middle color of the gradient used when a top level menu item is pressed.</summary>
    internal static string @ProfessionalColorsMenuItemPressedGradientMiddleDescr => GetResourceString("ProfessionalColorsMenuItemPressedGradientMiddleDescr");
    /// <summary>Solid color to use when a non-top level menu item is selected</summary>
    internal static string @ProfessionalColorsMenuItemSelectedDescr => GetResourceString("ProfessionalColorsMenuItemSelectedDescr");
    /// <summary>Starting color of the gradient used when the menu item is selected.</summary>
    internal static string @ProfessionalColorsMenuItemSelectedGradientBeginDescr => GetResourceString("ProfessionalColorsMenuItemSelectedGradientBeginDescr");
    /// <summary>End color of the gradient used when the menu item is selected.</summary>
    internal static string @ProfessionalColorsMenuItemSelectedGradientEndDescr => GetResourceString("ProfessionalColorsMenuItemSelectedGradientEndDescr");
    /// <summary>Starting color of the gradient used in the MenuStrip.</summary>
    internal static string @ProfessionalColorsMenuStripGradientBeginDescr => GetResourceString("ProfessionalColorsMenuStripGradientBeginDescr");
    /// <summary>Middle color of the gradient used in the MenuStrip.</summary>
    internal static string @ProfessionalColorsMenuStripGradientEndDescr => GetResourceString("ProfessionalColorsMenuStripGradientEndDescr");
    /// <summary>Starting color of the gradient used in the overflow button.</summary>
    internal static string @ProfessionalColorsOverflowButtonGradientBeginDescr => GetResourceString("ProfessionalColorsOverflowButtonGradientBeginDescr");
    /// <summary>End color of the gradient used in the overflow button.</summary>
    internal static string @ProfessionalColorsOverflowButtonGradientEndDescr => GetResourceString("ProfessionalColorsOverflowButtonGradientEndDescr");
    /// <summary>Middle color of the gradient used in the overflow button.</summary>
    internal static string @ProfessionalColorsOverflowButtonGradientMiddleDescr => GetResourceString("ProfessionalColorsOverflowButtonGradientMiddleDescr");
    /// <summary>Starting color of the gradient used in the RaftingContainer.</summary>
    internal static string @ProfessionalColorsRaftingContainerGradientBeginDescr => GetResourceString("ProfessionalColorsRaftingContainerGradientBeginDescr");
    /// <summary>End color of the gradient used in the RaftingContainer.</summary>
    internal static string @ProfessionalColorsRaftingContainerGradientEndDescr => GetResourceString("ProfessionalColorsRaftingContainerGradientEndDescr");
    /// <summary>Color to use to for shadow effects on the separator.</summary>
    internal static string @ProfessionalColorsSeparatorDarkDescr => GetResourceString("ProfessionalColorsSeparatorDarkDescr");
    /// <summary>Color to use to for highlight effects on the separator.</summary>
    internal static string @ProfessionalColorsSeparatorLightDescr => GetResourceString("ProfessionalColorsSeparatorLightDescr");
    /// <summary>Starting color of the gradient used in the StatusStrip.</summary>
    internal static string @ProfessionalColorsStatusStripGradientBeginDescr => GetResourceString("ProfessionalColorsStatusStripGradientBeginDescr");
    /// <summary>End color of the gradient used in the StatusStrip.</summary>
    internal static string @ProfessionalColorsStatusStripGradientEndDescr => GetResourceString("ProfessionalColorsStatusStripGradientEndDescr");
    /// <summary>Border color to use on the bottom edge of the ToolStrip.</summary>
    internal static string @ProfessionalColorsToolStripBorderDescr => GetResourceString("ProfessionalColorsToolStripBorderDescr");
    /// <summary>Starting color of the gradient used in the ToolStripContentPanel.</summary>
    internal static string @ProfessionalColorsToolStripContentPanelGradientBeginDescr => GetResourceString("ProfessionalColorsToolStripContentPanelGradientBeginDescr");
    /// <summary>End color of the gradient used in the ToolStripContentPanel.</summary>
    internal static string @ProfessionalColorsToolStripContentPanelGradientEndDescr => GetResourceString("ProfessionalColorsToolStripContentPanelGradientEndDescr");
    /// <summary>Solid background color of the ToolStripDropDown.</summary>
    internal static string @ProfessionalColorsToolStripDropDownBackgroundDescr => GetResourceString("ProfessionalColorsToolStripDropDownBackgroundDescr");
    /// <summary>Starting color of the gradient used in the ToolStrip background.</summary>
    internal static string @ProfessionalColorsToolStripGradientBeginDescr => GetResourceString("ProfessionalColorsToolStripGradientBeginDescr");
    /// <summary>End color of the gradient used in the ToolStrip background.</summary>
    internal static string @ProfessionalColorsToolStripGradientEndDescr => GetResourceString("ProfessionalColorsToolStripGradientEndDescr");
    /// <summary>Middle color of the gradient used in the ToolStrip background.</summary>
    internal static string @ProfessionalColorsToolStripGradientMiddleDescr => GetResourceString("ProfessionalColorsToolStripGradientMiddleDescr");
    /// <summary>Starting color of the gradient used in the ToolStripPanel.</summary>
    internal static string @ProfessionalColorsToolStripPanelGradientBeginDescr => GetResourceString("ProfessionalColorsToolStripPanelGradientBeginDescr");
    /// <summary>End color of the gradient used in the ToolStripPanel.</summary>
    internal static string @ProfessionalColorsToolStripPanelGradientEndDescr => GetResourceString("ProfessionalColorsToolStripPanelGradientEndDescr");
    /// <summary>ProgressBar</summary>
    internal static string @ProgressBarDefaultAccessibleName => GetResourceString("ProgressBarDefaultAccessibleName");
    /// <summary>Increment should not be called if the style is Marquee.</summary>
    internal static string @ProgressBarIncrementMarqueeException => GetResourceString("ProgressBarIncrementMarqueeException");
    /// <summary>The speed of the marquee animation in milliseconds.</summary>
    internal static string @ProgressBarMarqueeAnimationSpeed => GetResourceString("ProgressBarMarqueeAnimationSpeed");
    /// <summary>The upper bound of the range this ProgressBar is working with.</summary>
    internal static string @ProgressBarMaximumDescr => GetResourceString("ProgressBarMaximumDescr");
    /// <summary>The lower bound of the range this ProgressBar is working with.</summary>
    internal static string @ProgressBarMinimumDescr => GetResourceString("ProgressBarMinimumDescr");
    /// <summary>PerformStep should not be called if the style is Marquee.</summary>
    internal static string @ProgressBarPerformStepMarqueeException => GetResourceString("ProgressBarPerformStepMarqueeException");
    /// <summary>The amount to increment the current value of the control by when the PerformStep() method is called.</summary>
    internal static string @ProgressBarStepDescr => GetResourceString("ProgressBarStepDescr");
    /// <summary>This property allows the user to set the style of the ProgressBar.</summary>
    internal static string @ProgressBarStyleDescr => GetResourceString("ProgressBarStyleDescr");
    /// <summary>The current value for the ProgressBar, in the range specified by the minimum and maximum properties.</summary>
    internal static string @ProgressBarValueDescr => GetResourceString("ProgressBarValueDescr");
    /// <summary>Value must not be set if the style is Marquee.</summary>
    internal static string @ProgressBarValueMarqueeException => GetResourceString("ProgressBarValueMarqueeException");
    /// <summary>Appearance</summary>
    internal static string @PropertyCategoryAppearance => GetResourceString("PropertyCategoryAppearance");
    /// <summary>Behavior</summary>
    internal static string @PropertyCategoryBehavior => GetResourceString("PropertyCategoryBehavior");
    /// <summary>Data</summary>
    internal static string @PropertyCategoryData => GetResourceString("PropertyCategoryData");
    /// <summary>DDE</summary>
    internal static string @PropertyCategoryDDE => GetResourceString("PropertyCategoryDDE");
    /// <summary>Font</summary>
    internal static string @PropertyCategoryFont => GetResourceString("PropertyCategoryFont");
    /// <summary>List</summary>
    internal static string @PropertyCategoryList => GetResourceString("PropertyCategoryList");
    /// <summary>Misc</summary>
    internal static string @PropertyCategoryMisc => GetResourceString("PropertyCategoryMisc");
    /// <summary>Position</summary>
    internal static string @PropertyCategoryPosition => GetResourceString("PropertyCategoryPosition");
    /// <summary>Scale</summary>
    internal static string @PropertyCategoryScale => GetResourceString("PropertyCategoryScale");
    /// <summary>Text</summary>
    internal static string @PropertyCategoryText => GetResourceString("PropertyCategoryText");
    /// <summary>Tab index not valid.</summary>
    internal static string @PropertyGridBadTabIndex => GetResourceString("PropertyGridBadTabIndex");
    /// <summary>Sets whether the commands window will be displayed for components with commands.</summary>
    internal static string @PropertyGridCanShowCommandsDesc => GetResourceString("PropertyGridCanShowCommandsDesc");
    /// <summary>Sets whether OS-enabled visual style glyphs can be used for the expansion nodes in the grid area.</summary>
    internal static string @PropertyGridCanShowVisualStyleGlyphsDesc => GetResourceString("PropertyGridCanShowVisualStyleGlyphsDesc");
    /// <summary>The text color used for category headings. The background color is determined by the LineColor property.</summary>
    internal static string @PropertyGridCategoryForeColorDesc => GetResourceString("PropertyGridCategoryForeColorDesc");
    /// <summary>The color of the line that separates categories.</summary>
    internal static string @PropertyGridCategorySplitterColorDesc => GetResourceString("PropertyGridCategorySplitterColorDesc");
    /// <summary>The color of active links in the hot commands region.</summary>
    internal static string @PropertyGridCommandsActiveLinkColorDesc => GetResourceString("PropertyGridCommandsActiveLinkColorDesc");
    /// <summary>The background color of the hot commands region.</summary>
    internal static string @PropertyGridCommandsBackColorDesc => GetResourceString("PropertyGridCommandsBackColorDesc");
    /// <summary>The color of the border surrounding the hot commands region.</summary>
    internal static string @PropertyGridCommandsBorderColorDesc => GetResourceString("PropertyGridCommandsBorderColorDesc");
    /// <summary>The color of disabled links in the hot commands region.</summary>
    internal static string @PropertyGridCommandsDisabledLinkColorDesc => GetResourceString("PropertyGridCommandsDisabledLinkColorDesc");
    /// <summary>The foreground color of the hot commands region.</summary>
    internal static string @PropertyGridCommandsForeColorDesc => GetResourceString("PropertyGridCommandsForeColorDesc");
    /// <summary>The color of enabled links in the hot commands region.</summary>
    internal static string @PropertyGridCommandsLinkColorDesc => GetResourceString("PropertyGridCommandsLinkColorDesc");
    /// <summary>Show the commands pane if the selected object exposes verbs.</summary>
    internal static string @PropertyGridCommandsVisibleIfAvailable => GetResourceString("PropertyGridCommandsVisibleIfAvailable");
    /// <summary>Properties Window</summary>
    internal static string @PropertyGridDefaultAccessibleName => GetResourceString("PropertyGridDefaultAccessibleName");
    /// <summary>{0} Properties Window</summary>
    internal static string @PropertyGridDefaultAccessibleNameTemplate => GetResourceString("PropertyGridDefaultAccessibleNameTemplate");
    /// <summary>{0} Description</summary>
    internal static string @PropertyGridDocCommentAccessibleNameTemplate => GetResourceString("PropertyGridDocCommentAccessibleNameTemplate");
    /// <summary>The foreground color of disabled text in the grid area.</summary>
    internal static string @PropertyGridDisabledItemForeColorDesc => GetResourceString("PropertyGridDisabledItemForeColorDesc");
    /// <summary>Browse...</summary>
    internal static string @PropertyGridDropDownButtonAccessibleName => GetResourceString("PropertyGridDropDownButtonAccessibleName");
    /// <summary>Error Information</summary>
    internal static string @PropertyGridExceptionInfo => GetResourceString("PropertyGridExceptionInfo");
    /// <summary>Exception has occurred while painting the label for property '{0}'. See below for details."</summary>
    internal static string @PropertyGridExceptionWhilePaintingLabel => GetResourceString("PropertyGridExceptionWhilePaintingLabel");
    /// <summary>The background color of the description pane.</summary>
    internal static string @PropertyGridHelpBackColorDesc => GetResourceString("PropertyGridHelpBackColorDesc");
    /// <summary>The color of the border surrounding the description pane.</summary>
    internal static string @PropertyGridHelpBorderColorDesc => GetResourceString("PropertyGridHelpBorderColorDesc");
    /// <summary>The foreground color of the description pane.</summary>
    internal static string @PropertyGridHelpForeColorDesc => GetResourceString("PropertyGridHelpForeColorDesc");
    /// <summary>Sets whether to show the description pane.</summary>
    internal static string @PropertyGridHelpVisibleDesc => GetResourceString("PropertyGridHelpVisibleDesc");
    /// <summary>The background color of selected items that have focus.</summary>
    internal static string @PropertyGridSelectedItemWithFocusBackColorDesc => GetResourceString("PropertyGridSelectedItemWithFocusBackColorDesc");
    /// <summary>The foreground color of selected items that have focus.</summary>
    internal static string @PropertyGridSelectedItemWithFocusForeColorDesc => GetResourceString("PropertyGridSelectedItemWithFocusForeColorDesc");
    /// <summary>Get of properties did not succeed.  Log at {0}</summary>
    internal static string @PropertyGridInternalNoProp => GetResourceString("PropertyGridInternalNoProp");
    /// <summary>GridItem specified to PropertyGrid.SelectedGridItem must be a valid GridItem.</summary>
    internal static string @PropertyGridInvalidGridEntry => GetResourceString("PropertyGridInvalidGridEntry");
    /// <summary>Sets buttons to large (32x32) on the PropertyGrid tool bar.</summary>
    internal static string @PropertyGridLargeButtonsDesc => GetResourceString("PropertyGridLargeButtonsDesc");
    /// <summary>Sets the color of the borders and grid lines within the grid area.</summary>
    internal static string @PropertyGridLineColorDesc => GetResourceString("PropertyGridLineColorDesc");
    /// <summary>Tab '{0}' does not have a bitmap.</summary>
    internal static string @PropertyGridNoBitmap => GetResourceString("PropertyGridNoBitmap");
    /// <summary>Occurs when the PropertySort property on the PropertyGrid has changed.</summary>
    internal static string @PropertyGridPropertySortChangedDescr => GetResourceString("PropertyGridPropertySortChangedDescr");
    /// <summary>Sets the type of sorting that the PropertyGrid will use to display properties.</summary>
    internal static string @PropertyGridPropertySortDesc => GetResourceString("PropertyGridPropertySortDesc");
    /// <summary>Occurs when a property tab changes.</summary>
    internal static string @PropertyGridPropertyTabchangedDescr => GetResourceString("PropertyGridPropertyTabchangedDescr");
    /// <summary>PropertyTabCollection is read-only.</summary>
    internal static string @PropertyGridPropertyTabCollectionReadOnly => GetResourceString("PropertyGridPropertyTabCollectionReadOnly");
    /// <summary>Occurs when a property value changes.</summary>
    internal static string @PropertyGridPropertyValueChangedDescr => GetResourceString("PropertyGridPropertyValueChangedDescr");
    /// <summary>Static tabs cannot be removed from the PropertyGrid.</summary>
    internal static string @PropertyGridRemoveStaticTabs => GetResourceString("PropertyGridRemoveStaticTabs");
    /// <summary>Reset property '{0}'</summary>
    internal static string @PropertyGridResetValue => GetResourceString("PropertyGridResetValue");
    /// <summary>Occurs when the selected grid item has changed.</summary>
    internal static string @PropertyGridSelectedGridItemChangedDescr => GetResourceString("PropertyGridSelectedGridItemChangedDescr");
    /// <summary>Sets the currently selected object that the grid will browse.</summary>
    internal static string @PropertyGridSelectedObjectDesc => GetResourceString("PropertyGridSelectedObjectDesc");
    /// <summary>Occurs when the SelectedObjects property has changed.</summary>
    internal static string @PropertyGridSelectedObjectsChangedDescr => GetResourceString("PropertyGridSelectedObjectsChangedDescr");
    /// <summary>'objs' array must have at least {0} members.</summary>
    internal static string @PropertyGridSet => GetResourceString("PropertyGridSet");
    /// <summary>Item {0} in the 'objs' array is null.  The array must begin with at least {1} members.</summary>
    internal static string @PropertyGridSetNull => GetResourceString("PropertyGridSetNull");
    /// <summary>Set Property '{0}'</summary>
    internal static string @PropertyGridSetValue => GetResourceString("PropertyGridSetValue");
    /// <summary>Tab '{0}' must have a valid name.</summary>
    internal static string @PropertyGridTabName => GetResourceString("PropertyGridTabName");
    /// <summary>TabScope must be TabScopeEnum.Component or TabScopeEnum.Document</summary>
    internal static string @PropertyGridTabScope => GetResourceString("PropertyGridTabScope");
    /// <summary>PropertyGrid</summary>
    internal static string @PropertyGridTitle => GetResourceString("PropertyGridTitle");
    /// <summary>PropertyGrid</summary>
    internal static string @PropertyGridToolbarAccessibleName => GetResourceString("PropertyGridToolbarAccessibleName");
    /// <summary>Sets whether to display the ToolBar at the top of the PropertyGrid.</summary>
    internal static string @PropertyGridToolbarVisibleDesc => GetResourceString("PropertyGridToolbarVisibleDesc");
    /// <summary>Sets the background color of the grid area.</summary>
    internal static string @PropertyGridViewBackColorDesc => GetResourceString("PropertyGridViewBackColorDesc");
    /// <summary>The color of the border surrounding the grid area.</summary>
    internal static string @PropertyGridViewBorderColorDesc => GetResourceString("PropertyGridViewBorderColorDesc");
    /// <summary>Editor created an object that is not valid.  The created object must be of type '{0}'.</summary>
    internal static string @PropertyGridViewEditorCreatedInvalidObject => GetResourceString("PropertyGridViewEditorCreatedInvalidObject");
    /// <summary>Sets the foreground color of the grid area.</summary>
    internal static string @PropertyGridViewForeColorDesc => GetResourceString("PropertyGridViewForeColorDesc");
    /// <summary>Property {0} does not exist in {1}.</summary>
    internal static string @PropertyManagerPropDoesNotExist => GetResourceString("PropertyManagerPropDoesNotExist");
    /// <summary>One or more entries are not valid in the IDictionary parameter. Verify that all values match up to the object's properties.</summary>
    internal static string @PropertyValueInvalidEntry => GetResourceString("PropertyValueInvalidEntry");
    /// <summary>Enables and disables editing of margins.</summary>
    internal static string @PSDallowMarginsDescr => GetResourceString("PSDallowMarginsDescr");
    /// <summary>Enables and disables the Orientation radio buttons.</summary>
    internal static string @PSDallowOrientationDescr => GetResourceString("PSDallowOrientationDescr");
    /// <summary>Enables and disables editing of paper size.</summary>
    internal static string @PSDallowPaperDescr => GetResourceString("PSDallowPaperDescr");
    /// <summary>Enables and disables Printer button.</summary>
    internal static string @PSDallowPrinterDescr => GetResourceString("PSDallowPrinterDescr");
    /// <summary>PageSetupDialog needs a PageSettings object to display. Set PageSetupDialog.Document (preferred), PageSetupDialog.PrinterSettings, or PageSetupDialog.PageSettings.</summary>
    internal static string @PSDcantShowWithoutPage => GetResourceString("PSDcantShowWithoutPage");
    /// <summary>Gets or sets a value indicating whether the margin settings, when displayed in millimeters, should be automatically converted to and from hundredths of an inch.</summary>
    internal static string @PSDenableMetricDescr => GetResourceString("PSDenableMetricDescr");
    /// <summary>The smallest margins the user is allowed to select.</summary>
    internal static string @PSDminMarginsDescr => GetResourceString("PSDminMarginsDescr");
    /// <summary>The PageSettings the dialog box will modify.</summary>
    internal static string @PSDpageSettingsDescr => GetResourceString("PSDpageSettingsDescr");
    /// <summary>The PrinterSettings the dialog box will modify when the user clicks the Printer button.</summary>
    internal static string @PSDprinterSettingsDescr => GetResourceString("PSDprinterSettingsDescr");
    /// <summary>Controls whether the Help button is displayed.</summary>
    internal static string @PSDshowHelpDescr => GetResourceString("PSDshowHelpDescr");
    /// <summary>Controls whether the Network button is displayed.</summary>
    internal static string @PSDshowNetworkDescr => GetResourceString("PSDshowNetworkDescr");
    /// <summary>Controls whether the RadioButton appears as normal or as a Windows PushButton.</summary>
    internal static string @RadioButtonAppearanceDescr => GetResourceString("RadioButtonAppearanceDescr");
    /// <summary>Causes the radio button to automatically change state when clicked.</summary>
    internal static string @RadioButtonAutoCheckDescr => GetResourceString("RadioButtonAutoCheckDescr");
    /// <summary>Determines the location of the check box inside the control.</summary>
    internal static string @RadioButtonCheckAlignDescr => GetResourceString("RadioButtonCheckAlignDescr");
    /// <summary>Indicates whether the radio button is checked or not.</summary>
    internal static string @RadioButtonCheckedDescr => GetResourceString("RadioButtonCheckedDescr");
    /// <summary>Event raised when the value of the Appearance property is changed on RadioButton.</summary>
    internal static string @RadioButtonOnAppearanceChangedDescr => GetResourceString("RadioButtonOnAppearanceChangedDescr");
    /// <summary>Occurs whenever the 'checked' property changes value.</summary>
    internal static string @RadioButtonOnCheckedChangedDescr => GetResourceString("RadioButtonOnCheckedChangedDescr");
    /// <summary>Event raised when the value of the StartPage property is changed on RadioButton.</summary>
    internal static string @RadioButtonOnStartPageChangedDescr => GetResourceString("RadioButtonOnStartPageChangedDescr");
    /// <summary>Occurs when the value of the TextAlign property changes</summary>
    internal static string @RadioButtonOnTextAlignChangedDescr => GetResourceString("RadioButtonOnTextAlignChangedDescr");
    /// <summary>Collection is read only.</summary>
    internal static string @ReadonlyControlsCollection => GetResourceString("ReadonlyControlsCollection");
    /// <summary>Clipboard format registration did not succeed.</summary>
    internal static string @RegisterCFFailed => GetResourceString("RegisterCFFailed");
    /// <summary>Child list for field {0} cannot be created.</summary>
    internal static string @RelatedListManagerChild => GetResourceString("RelatedListManagerChild");
    /// <summary>Restart method is not supported for this application type.</summary>
    internal static string @RestartNotSupported => GetResourceString("RestartNotSupported");
    /// <summary>Resource writer has been saved.  You may not edit it.</summary>
    internal static string @ResXResourceWriterSaved => GetResourceString("ResXResourceWriterSaved");
    /// <summary>Lresult for the accessibility object cannot be obtained.</summary>
    internal static string @RichControlLresult => GetResourceString("RichControlLresult");
    /// <summary>Cut</summary>
    internal static string @RichTextBox_IDCut => GetResourceString("RichTextBox_IDCut");
    /// <summary>Delete</summary>
    internal static string @RichTextBox_IDDelete => GetResourceString("RichTextBox_IDDelete");
    /// <summary>Drag and Drop</summary>
    internal static string @RichTextBox_IDDragDrop => GetResourceString("RichTextBox_IDDragDrop");
    /// <summary>Paste</summary>
    internal static string @RichTextBox_IDPaste => GetResourceString("RichTextBox_IDPaste");
    /// <summary>Typing</summary>
    internal static string @RichTextBox_IDTyping => GetResourceString("RichTextBox_IDTyping");
    /// <summary>Unknown</summary>
    internal static string @RichTextBox_IDUnknown => GetResourceString("RichTextBox_IDUnknown");
    /// <summary>Turns on/off automatic word selection.</summary>
    internal static string @RichTextBoxAutoWordSelection => GetResourceString("RichTextBoxAutoWordSelection");
    /// <summary>Defines the indent for the bullets in the control.</summary>
    internal static string @RichTextBoxBulletIndent => GetResourceString("RichTextBoxBulletIndent");
    /// <summary>Indicates if the rich edit control can redo the previous action.</summary>
    internal static string @RichTextBoxCanRedoDescr => GetResourceString("RichTextBoxCanRedoDescr");
    /// <summary>Occurs when the control's contents are either smaller or larger than the control's window size.</summary>
    internal static string @RichTextBoxContentsResized => GetResourceString("RichTextBoxContentsResized");
    /// <summary>Indicates whether URLs are automatically formatted as links.</summary>
    internal static string @RichTextBoxDetectURLs => GetResourceString("RichTextBoxDetectURLs");
    /// <summary>Enable drag/drop of text, pictures, and other data</summary>
    internal static string @RichTextBoxEnableAutoDragDrop => GetResourceString("RichTextBoxEnableAutoDragDrop");
    /// <summary>Occurs when the control's horizontal scroll bar is clicked.</summary>
    internal static string @RichTextBoxHScroll => GetResourceString("RichTextBoxHScroll");
    /// <summary>Occurs when the control's IME conversion status changes. (East Asian versions of OS only.)</summary>
    internal static string @RichTextBoxIMEChange => GetResourceString("RichTextBoxIMEChange");
    /// <summary>Occurs when a hyperlink in the text is clicked.</summary>
    internal static string @RichTextBoxLinkClick => GetResourceString("RichTextBoxLinkClick");
    /// <summary>Occurs when the user takes an action that would change a protected range of text.</summary>
    internal static string @RichTextBoxProtected => GetResourceString("RichTextBoxProtected");
    /// <summary>The name of the action that will be performed if the user redoes a previous action.</summary>
    internal static string @RichTextBoxRedoActionNameDescr => GetResourceString("RichTextBoxRedoActionNameDescr");
    /// <summary>Defines the right margin dimensions.</summary>
    internal static string @RichTextBoxRightMargin => GetResourceString("RichTextBoxRightMargin");
    /// <summary>Defines the rich text-formatted contents of the control.</summary>
    internal static string @RichTextBoxRTF => GetResourceString("RichTextBoxRTF");
    /// <summary>Defines the behavior of the scroll bars of the control.</summary>
    internal static string @RichTextBoxScrollBars => GetResourceString("RichTextBoxScrollBars");
    /// <summary>Defines the alignment of the currently selected text.</summary>
    internal static string @RichTextBoxSelAlignment => GetResourceString("RichTextBoxSelAlignment");
    /// <summary>Sets the text color for the currently selected text.</summary>
    internal static string @RichTextBoxSelBackColor => GetResourceString("RichTextBoxSelBackColor");
    /// <summary>Turns on/off the bullets in front of the currently selected text.</summary>
    internal static string @RichTextBoxSelBullet => GetResourceString("RichTextBoxSelBullet");
    /// <summary>Occurs when the current selection has changed.</summary>
    internal static string @RichTextBoxSelChange => GetResourceString("RichTextBoxSelChange");
    /// <summary>Defines the superscript/subscript mode for the characters.</summary>
    internal static string @RichTextBoxSelCharOffset => GetResourceString("RichTextBoxSelCharOffset");
    /// <summary>Sets the text color for the currently selected text.</summary>
    internal static string @RichTextBoxSelColor => GetResourceString("RichTextBoxSelColor");
    /// <summary>Defines the font of the currently selected text.</summary>
    internal static string @RichTextBoxSelFont => GetResourceString("RichTextBoxSelFont");
    /// <summary>Defines the hanging indent of the currently selected text.</summary>
    internal static string @RichTextBoxSelHangingIndent => GetResourceString("RichTextBoxSelHangingIndent");
    /// <summary>Defines the indent of the currently selected text.</summary>
    internal static string @RichTextBoxSelIndent => GetResourceString("RichTextBoxSelIndent");
    /// <summary>Turns on/off the selection margin.</summary>
    internal static string @RichTextBoxSelMargin => GetResourceString("RichTextBoxSelMargin");
    /// <summary>Turns on/off protection around the contents of the currently selected text.</summary>
    internal static string @RichTextBoxSelProtected => GetResourceString("RichTextBoxSelProtected");
    /// <summary>Defines the right-indent of the currently selected text.</summary>
    internal static string @RichTextBoxSelRightIndent => GetResourceString("RichTextBoxSelRightIndent");
    /// <summary>Defines the rich text formatted contents of the currently selected text.</summary>
    internal static string @RichTextBoxSelRTF => GetResourceString("RichTextBoxSelRTF");
    /// <summary>Defines the locations of tab stops in the currently selected text.</summary>
    internal static string @RichTextBoxSelTabs => GetResourceString("RichTextBoxSelTabs");
    /// <summary>Displays the currently selected text in the control.</summary>
    internal static string @RichTextBoxSelText => GetResourceString("RichTextBoxSelText");
    /// <summary>The type of selection.</summary>
    internal static string @RichTextBoxSelTypeDescr => GetResourceString("RichTextBoxSelTypeDescr");
    /// <summary>The name of the action that will be performed if the user undoes a previous edit.</summary>
    internal static string @RichTextBoxUndoActionNameDescr => GetResourceString("RichTextBoxUndoActionNameDescr");
    /// <summary>Occurs when the control's vertical scroll bar is clicked.</summary>
    internal static string @RichTextBoxVScroll => GetResourceString("RichTextBoxVScroll");
    /// <summary>Defines the current scaling factor of the RichTextBox display; 1.0 is normal viewing.</summary>
    internal static string @RichTextBoxZoomFactor => GetResourceString("RichTextBoxZoomFactor");
    /// <summary>Value '{0}' is not a valid value for 'end'.  'end' must be greater than or equal to 'start', or -1.</summary>
    internal static string @RichTextFindEndInvalid => GetResourceString("RichTextFindEndInvalid");
    /// <summary>RTL_False</summary>
    internal static string @RTL => GetResourceString("RTL");
    /// <summary>{1} - {0} - {2}</summary>
    internal static string @SafeTopLevelCaptionFormat => GetResourceString("SafeTopLevelCaptionFormat");
    /// <summary>Controls whether to prompt the user when a new file is about to be created. It is only applicable if 'ValidateNames' is set to true.</summary>
    internal static string @SaveFileDialogCreatePrompt => GetResourceString("SaveFileDialogCreatePrompt");
    /// <summary>Controls whether to prompt the user when an existing file is about to be overwritten. It is only applicable if 'ValidateNames' is set to true.</summary>
    internal static string @SaveFileDialogOverWritePrompt => GetResourceString("SaveFileDialogOverWritePrompt");
    /// <summary>Text is not saved.</summary>
    internal static string @SaveTextError => GetResourceString("SaveTextError");
    /// <summary>Gets the horizontal scroll bar for this ScrollableControl.</summary>
    internal static string @ScrollableControlHorizontalScrollDescr => GetResourceString("ScrollableControlHorizontalScrollDescr");
    /// <summary>Property being set to false will not raise MouseEnter and MouseLeave events until the mouse leaves the client area and the scrollbars.</summary>
    internal static string @ScrollableControlRaiseMouseEnterLeaveEventsForScrollBarsDescr => GetResourceString("ScrollableControlRaiseMouseEnterLeaveEventsForScrollBarsDescr");
    /// <summary>Gets the vertical scroll bar for this ScrollableControl.</summary>
    internal static string @ScrollableControlVerticalScrollDescr => GetResourceString("ScrollableControlVerticalScrollDescr");
    /// <summary>Gets or sets a Boolean value controlling whether the scrollbar is enabled.</summary>
    internal static string @ScrollBarEnableDescr => GetResourceString("ScrollBarEnableDescr");
    /// <summary>The amount by which the scroll box position changes when the user clicks in the scroll bar or presses the PAGE UP or PAGE DOWN keys.</summary>
    internal static string @ScrollBarLargeChangeDescr => GetResourceString("ScrollBarLargeChangeDescr");
    /// <summary>The upper limit value of the scrollable range.</summary>
    internal static string @ScrollBarMaximumDescr => GetResourceString("ScrollBarMaximumDescr");
    /// <summary>The lower limit value of the scrollable range.</summary>
    internal static string @ScrollBarMinimumDescr => GetResourceString("ScrollBarMinimumDescr");
    /// <summary>Occurs when the user moves the scroll box.</summary>
    internal static string @ScrollBarOnScrollDescr => GetResourceString("ScrollBarOnScrollDescr");
    /// <summary>The amount by which the scroll box position changes when the user clicks a scroll arrow or presses an arrow key.</summary>
    internal static string @ScrollBarSmallChangeDescr => GetResourceString("ScrollBarSmallChangeDescr");
    /// <summary>The value that the scroll box position represents.</summary>
    internal static string @ScrollBarValueDescr => GetResourceString("ScrollBarValueDescr");
    /// <summary>Gets or sets a Boolean value controlling whether the scrollbar is showing.</summary>
    internal static string @ScrollBarVisibleDescr => GetResourceString("ScrollBarVisibleDescr");
    /// <summary>Occurs when the value of the SelectedIndex property changes.</summary>
    internal static string @selectedIndexChangedEventDescr => GetResourceString("selectedIndexChangedEventDescr");
    /// <summary>The index of the currently selected item.</summary>
    internal static string @selectedIndexDescr => GetResourceString("selectedIndexDescr");
    /// <summary>Number of selected items does not match actual selected items.</summary>
    internal static string @SelectedNotEqualActual => GetResourceString("SelectedNotEqualActual");
    /// <summary>Occurs when an item is chosen from the drop-down list and the drop-down list is closed.</summary>
    internal static string @selectionChangeCommittedEventDescr => GetResourceString("selectionChangeCommittedEventDescr");
    /// <summary>SelTabCount out of range.</summary>
    internal static string @SelTabCountRange => GetResourceString("SelTabCountRange");
    /// <summary>Group delimiters are not balanced.</summary>
    internal static string @SendKeysGroupDelimError => GetResourceString("SendKeysGroupDelimError");
    /// <summary>Hook cannot be created.</summary>
    internal static string @SendKeysHookFailed => GetResourceString("SendKeysHookFailed");
    /// <summary>Keyword delimiter is missing.</summary>
    internal static string @SendKeysKeywordDelimError => GetResourceString("SendKeysKeywordDelimError");
    /// <summary>Only three levels of nesting are supported.</summary>
    internal static string @SendKeysNestingError => GetResourceString("SendKeysNestingError");
    /// <summary>SendKeys cannot run inside this application because the application is not handling Windows messages.  Either change the application to handle messages, or use the SendKeys.SendWait method.</summary>
    internal static string @SendKeysNoMessageLoop => GetResourceString("SendKeysNoMessageLoop");
    /// <summary>Type {0} could not be read from the data in line {1}, position {2}.  The type's internal structure may have changed.  Either implement ISerializable on the type or provide a type converter that can provide a more reliable conversion format, such as text or ...</summary>
    internal static string @SerializationException => GetResourceString("SerializationException");
    /// <summary>Forms that are not enabled cannot be displayed as a modal dialog box. Set the form's enabled property to true before calling {0}.</summary>
    internal static string @ShowDialogOnDisabled => GetResourceString("ShowDialogOnDisabled");
    /// <summary>Form that is already displayed modally cannot be displayed as a modal dialog box. Close the form before calling {0}.</summary>
    internal static string @ShowDialogOnModal => GetResourceString("ShowDialogOnModal");
    /// <summary>Form that is not a top-level form cannot be displayed as a modal dialog box. Remove the form from any parent form before calling {0}.</summary>
    internal static string @ShowDialogOnNonTopLevel => GetResourceString("ShowDialogOnNonTopLevel");
    /// <summary>Form that is already visible cannot be displayed as a modal dialog box. Set the form's visible property to false before calling {0}.</summary>
    internal static string @ShowDialogOnVisible => GetResourceString("ShowDialogOnVisible");
    /// <summary>Sorting requires an IBindingList that supports sorting or an IBindingListView that supports advanced sorting.</summary>
    internal static string @SortRequiresIBindingList => GetResourceString("SortRequiresIBindingList");
    /// <summary>Indicates that a particular SplitContainer's Panel should remain fixed in size during resize events.</summary>
    internal static string @SplitContainerFixedPanelDescr => GetResourceString("SplitContainerFixedPanelDescr");
    /// <summary>Determines if the splitter can move.</summary>
    internal static string @SplitContainerIsSplitterFixedDescr => GetResourceString("SplitContainerIsSplitterFixedDescr");
    /// <summary>Determines if the splitter is vertical or horizontal.</summary>
    internal static string @SplitContainerOrientationDescr => GetResourceString("SplitContainerOrientationDescr");
    /// <summary>This determines if Panel1 is collapsed.</summary>
    internal static string @SplitContainerPanel1CollapsedDescr => GetResourceString("SplitContainerPanel1CollapsedDescr");
    /// <summary>The Left or Top panel in the SplitContainer.</summary>
    internal static string @SplitContainerPanel1Descr => GetResourceString("SplitContainerPanel1Descr");
    /// <summary>Determines the minimum distance of pixels of the splitter from the left or the top edge of Panel1.</summary>
    internal static string @SplitContainerPanel1MinSizeDescr => GetResourceString("SplitContainerPanel1MinSizeDescr");
    /// <summary>This determines if Panel2 is collapsed.</summary>
    internal static string @SplitContainerPanel2CollapsedDescr => GetResourceString("SplitContainerPanel2CollapsedDescr");
    /// <summary>The Right or Bottom panel in the SplitContainer.</summary>
    internal static string @SplitContainerPanel2Descr => GetResourceString("SplitContainerPanel2Descr");
    /// <summary>Determines the minimum distance of pixels of the splitter from the right or the bottom edge of Panel2.</summary>
    internal static string @SplitContainerPanel2MinSizeDescr => GetResourceString("SplitContainerPanel2MinSizeDescr");
    /// <summary>The SplitterPanel's height cannot be set explicitly. Set the SplitterDistance on the SplitContainer instead.</summary>
    internal static string @SplitContainerPanelHeight => GetResourceString("SplitContainerPanelHeight");
    /// <summary>The SplitterPanel's width cannot be set explicitly. Set the SplitterDistance on the SplitContainer instead.</summary>
    internal static string @SplitContainerPanelWidth => GetResourceString("SplitContainerPanelWidth");
    /// <summary>Determines pixel distance of the splitter from the left or top edge.</summary>
    internal static string @SplitContainerSplitterDistanceDescr => GetResourceString("SplitContainerSplitterDistanceDescr");
    /// <summary>Determines the number of pixels the splitter moves in increments. Default is 1.</summary>
    internal static string @SplitContainerSplitterIncrementDescr => GetResourceString("SplitContainerSplitterIncrementDescr");
    /// <summary>Determines the rectangle bounds of the splitter.</summary>
    internal static string @SplitContainerSplitterRectangleDescr => GetResourceString("SplitContainerSplitterRectangleDescr");
    /// <summary>Determines the thickness of the splitter.</summary>
    internal static string @SplitContainerSplitterWidthDescr => GetResourceString("SplitContainerSplitterWidthDescr");
    /// <summary>The border type of the control.</summary>
    internal static string @SplitterBorderStyleDescr => GetResourceString("SplitterBorderStyleDescr");
    /// <summary>SplitterDistance must be between Panel1MinSize and Width - Panel2MinSize.</summary>
    internal static string @SplitterDistanceNotAllowed => GetResourceString("SplitterDistanceNotAllowed");
    /// <summary>Splitter control must be docked left, right, top, or bottom.</summary>
    internal static string @SplitterInvalidDockEnum => GetResourceString("SplitterInvalidDockEnum");
    /// <summary>Specifies the minimum size of the undocked area.</summary>
    internal static string @SplitterMinExtraDescr => GetResourceString("SplitterMinExtraDescr");
    /// <summary>Specifies the minimum size of the control being resized.</summary>
    internal static string @SplitterMinSizeDescr => GetResourceString("SplitterMinSizeDescr");
    /// <summary>The current position of the splitter, or -1 if it is not bound to a control.</summary>
    internal static string @SplitterSplitPositionDescr => GetResourceString("SplitterSplitPositionDescr");
    /// <summary>Occurs when the splitter is done being moved.</summary>
    internal static string @SplitterSplitterMovedDescr => GetResourceString("SplitterSplitterMovedDescr");
    /// <summary>Occurs when the splitter is being moved.</summary>
    internal static string @SplitterSplitterMovingDescr => GetResourceString("SplitterSplitterMovingDescr");
    /// <summary>Specifies the sides of the panel that should display borders.</summary>
    internal static string @StatusStripPanelBorderSidesDescr => GetResourceString("StatusStripPanelBorderSidesDescr");
    /// <summary>Specifies the border style for the panel.</summary>
    internal static string @StatusStripPanelBorderStyleDescr => GetResourceString("StatusStripPanelBorderStyleDescr");
    /// <summary>Determines whether a StatusStrip has a sizing grip.</summary>
    internal static string @StatusStripSizingGripDescr => GetResourceString("StatusStripSizingGripDescr");
    /// <summary>Feature not supported with this operating system.</summary>
    internal static string @SystemInformationFeatureNotSupported => GetResourceString("SystemInformationFeatureNotSupported");
    /// <summary>Determines whether the tabs appear on the top, bottom, left, or right side of the Control (left or right are implicitly multilined).</summary>
    internal static string @TabBaseAlignmentDescr => GetResourceString("TabBaseAlignmentDescr");
    /// <summary>Indicates whether the tabs are painted as buttons or regular tabs.</summary>
    internal static string @TabBaseAppearanceDescr => GetResourceString("TabBaseAppearanceDescr");
    /// <summary>Indicates whether the user or the system paints the captions.</summary>
    internal static string @TabBaseDrawModeDescr => GetResourceString("TabBaseDrawModeDescr");
    /// <summary>Indicates whether the tabs visually change when the mouse passes over them.</summary>
    internal static string @TabBaseHotTrackDescr => GetResourceString("TabBaseHotTrackDescr");
    /// <summary>The ImageList object from which this tab takes its images.</summary>
    internal static string @TabBaseImageListDescr => GetResourceString("TabBaseImageListDescr");
    /// <summary>Determines the width of fixed-width or owner-draw tabs and the height of all tabs.</summary>
    internal static string @TabBaseItemSizeDescr => GetResourceString("TabBaseItemSizeDescr");
    /// <summary>Indicates if more than one row of tabs is allowed.</summary>
    internal static string @TabBaseMultilineDescr => GetResourceString("TabBaseMultilineDescr");
    /// <summary>Indicates how much extra space should be added around the text/image in the tab.</summary>
    internal static string @TabBasePaddingDescr => GetResourceString("TabBasePaddingDescr");
    /// <summary>The number of rows currently being displayed in the tab strip.</summary>
    internal static string @TabBaseRowCountDescr => GetResourceString("TabBaseRowCountDescr");
    /// <summary>Indicates whether ToolTips should be shown for tabs that have their ToolTips set.</summary>
    internal static string @TabBaseShowToolTipsDescr => GetResourceString("TabBaseShowToolTipsDescr");
    /// <summary>Indicates how tabs are sized.</summary>
    internal static string @TabBaseSizeModeDescr => GetResourceString("TabBaseSizeModeDescr");
    /// <summary>The number of tabs in the tab strip.</summary>
    internal static string @TabBaseTabCountDescr => GetResourceString("TabBaseTabCountDescr");
    /// <summary>Parameter must be of type TabPage.</summary>
    internal static string @TabControlBadControl => GetResourceString("TabControlBadControl");
    /// <summary>Occurs after a tab page is deselected as the topmost tab page.</summary>
    internal static string @TabControlDeselectedEventDescr => GetResourceString("TabControlDeselectedEventDescr");
    /// <summary>Occurs when a tab page is being deselected.</summary>
    internal static string @TabControlDeselectingEventDescr => GetResourceString("TabControlDeselectingEventDescr");
    /// <summary>Cannot add '{0}' to TabControl.  Only TabPages can be directly added to TabControls.</summary>
    internal static string @TabControlInvalidTabPageType => GetResourceString("TabControlInvalidTabPageType");
    /// <summary>Occurs after a tab page is selected as the topmost tab page.</summary>
    internal static string @TabControlSelectedEventDescr => GetResourceString("TabControlSelectedEventDescr");
    /// <summary>The currently selected tab page.</summary>
    internal static string @TabControlSelectedTabDescr => GetResourceString("TabControlSelectedTabDescr");
    /// <summary>Occurs when a tab page is being selected.</summary>
    internal static string @TabControlSelectingEventDescr => GetResourceString("TabControlSelectingEventDescr");
    /// <summary>TabPage cannot be added to a '{0}'.  TabPages can only be added to TabControls.</summary>
    internal static string @TabControlTabPageNotOnTabControl => GetResourceString("TabControlTabPageNotOnTabControl");
    /// <summary>TabPage cannot be added to another TabPage.  TabPages can only be added to TabControls.</summary>
    internal static string @TabControlTabPageOnTabPage => GetResourceString("TabControlTabPageOnTabPage");
    /// <summary>The TabPages in the TabControl.</summary>
    internal static string @TabControlTabsDescr => GetResourceString("TabControlTabsDescr");
    /// <summary>Identifies the image displayed on the tab.</summary>
    internal static string @TabItemImageIndexDescr => GetResourceString("TabItemImageIndexDescr");
    /// <summary>The text that is shown when the mouse hovers over this tab.</summary>
    internal static string @TabItemToolTipTextDescr => GetResourceString("TabItemToolTipTextDescr");
    /// <summary>Determines if the background is drawn using visual styles, if supported.</summary>
    internal static string @TabItemUseVisualStyleBackColorDescr => GetResourceString("TabItemUseVisualStyleBackColorDescr");
    /// <summary>TableBegin() must be called before using this method.</summary>
    internal static string @TableBeginMustBeCalledPrior => GetResourceString("TableBeginMustBeCalledPrior");
    /// <summary>No table is currently being printing.  TableBegin() has not been called.</summary>
    internal static string @TableBeginNotCalled => GetResourceString("TableBeginNotCalled");
    /// <summary>Indicates the appearance of cell borders in a table.</summary>
    internal static string @TableLayoutPanelCellBorderStyleDescr => GetResourceString("TableLayoutPanelCellBorderStyleDescr");
    /// <summary>Additional Rows or Columns cannot be created.  TableLayoutPanel is full and GrowStyle is 'FixedSize'.</summary>
    internal static string @TableLayoutPanelFullDesc => GetResourceString("TableLayoutPanelFullDesc");
    /// <summary>Indicates whether a TableLayoutPanel will expand to include new cells when all existing cells are occupied.</summary>
    internal static string @TableLayoutPanelGrowStyleDescr => GetResourceString("TableLayoutPanelGrowStyleDescr");
    /// <summary>Occurs when a cell needs repainting.</summary>
    internal static string @TableLayoutPanelOnPaintCellDescr => GetResourceString("TableLayoutPanelOnPaintCellDescr");
    /// <summary>TableLayoutPanel cannot expand to contain the control, because the panel's GrowStyle property is set to 'FixedSize'.</summary>
    internal static string @TableLayoutPanelSpanDesc => GetResourceString("TableLayoutPanelSpanDesc");
    /// <summary>Cannot convert TableLayoutSettings to string: could not find a 'Name' string property on a control.</summary>
    internal static string @TableLayoutSettingsConverterNoName => GetResourceString("TableLayoutSettingsConverterNoName");
    /// <summary>Directly setting TableLayoutSettings is not supported.  Use individual properties instead.</summary>
    internal static string @TableLayoutSettingSettingsIsNotSupported => GetResourceString("TableLayoutSettingSettingsIsNotSupported");
    /// <summary>Indicates the row and column of the cell.</summary>
    internal static string @TableLayoutSettingsGetCellPositionDescr => GetResourceString("TableLayoutSettingsGetCellPositionDescr");
    /// <summary>Sets the row and column of the cell.</summary>
    internal static string @TableLayoutSettingsSetCellPositionDescr => GetResourceString("TableLayoutSettingsSetCellPositionDescr");
    /// <summary>TablePrintLayout instance specified was constructed for a different document.</summary>
    internal static string @TablePrintLayoutFromDifferentDocument => GetResourceString("TablePrintLayoutFromDifferentDocument");
    /// <summary>Indicates if return characters are accepted as input for multiline edit controls.</summary>
    internal static string @TextBoxAcceptsReturnDescr => GetResourceString("TextBoxAcceptsReturnDescr");
    /// <summary>Indicates if tab characters are accepted as input for multiline edit controls.</summary>
    internal static string @TextBoxAcceptsTabDescr => GetResourceString("TextBoxAcceptsTabDescr");
    /// <summary>The StringCollection to use when the AutoCompleteSource property is set to CustomSource.</summary>
    internal static string @TextBoxAutoCompleteCustomSourceDescr => GetResourceString("TextBoxAutoCompleteCustomSourceDescr");
    /// <summary>Indicates the text completion behavior of the text box.</summary>
    internal static string @TextBoxAutoCompleteModeDescr => GetResourceString("TextBoxAutoCompleteModeDescr");
    /// <summary>The autocomplete source, which can be one of the values from AutoCompleteSource enumeration.</summary>
    internal static string @TextBoxAutoCompleteSourceDescr => GetResourceString("TextBoxAutoCompleteSourceDescr");
    /// <summary>The value AutoCompleteSource.ListItems is not applicable to the TextBox control.</summary>
    internal static string @TextBoxAutoCompleteSourceNoItems => GetResourceString("TextBoxAutoCompleteSourceNoItems");
    /// <summary>Enables automatic resizing based on font size for single-line edit controls.</summary>
    internal static string @TextBoxAutoSizeDescr => GetResourceString("TextBoxAutoSizeDescr");
    /// <summary>Occurs when the value of the AcceptsTab property changes.</summary>
    internal static string @TextBoxBaseOnAcceptsTabChangedDescr => GetResourceString("TextBoxBaseOnAcceptsTabChangedDescr");
    /// <summary>Event raised when the value of the AutoSize property is changed on TextBoxBase.</summary>
    internal static string @TextBoxBaseOnAutoSizeChangedDescr => GetResourceString("TextBoxBaseOnAutoSizeChangedDescr");
    /// <summary>Occurs when the value of the BorderStyle property changes.</summary>
    internal static string @TextBoxBaseOnBorderStyleChangedDescr => GetResourceString("TextBoxBaseOnBorderStyleChangedDescr");
    /// <summary>Occurs when the value of the HideSelection property changes.</summary>
    internal static string @TextBoxBaseOnHideSelectionChangedDescr => GetResourceString("TextBoxBaseOnHideSelectionChangedDescr");
    /// <summary>Occurs when the value of the Modified property changes.</summary>
    internal static string @TextBoxBaseOnModifiedChangedDescr => GetResourceString("TextBoxBaseOnModifiedChangedDescr");
    /// <summary>Occurs when the value of the Multiline property changes.</summary>
    internal static string @TextBoxBaseOnMultilineChangedDescr => GetResourceString("TextBoxBaseOnMultilineChangedDescr");
    /// <summary>Occurs when the value of the ReadOnly property changes.</summary>
    internal static string @TextBoxBaseOnReadOnlyChangedDescr => GetResourceString("TextBoxBaseOnReadOnlyChangedDescr");
    /// <summary>Indicates whether the edit control should have a border.</summary>
    internal static string @TextBoxBorderDescr => GetResourceString("TextBoxBorderDescr");
    /// <summary>Indicates if the edit control can undo the previous action.</summary>
    internal static string @TextBoxCanUndoDescr => GetResourceString("TextBoxCanUndoDescr");
    /// <summary>Indicates if all characters should be left alone or converted to uppercase or lowercase.</summary>
    internal static string @TextBoxCharacterCasingDescr => GetResourceString("TextBoxCharacterCasingDescr");
    /// <summary>Indicates that the selection should be hidden when the edit control loses focus.</summary>
    internal static string @TextBoxHideSelectionDescr => GetResourceString("TextBoxHideSelectionDescr");
    /// <summary>The lines of text in a multiline edit, as an array of String values.</summary>
    internal static string @TextBoxLinesDescr => GetResourceString("TextBoxLinesDescr");
    /// <summary>Specifies the maximum number of characters that can be entered into the edit control.</summary>
    internal static string @TextBoxMaxLengthDescr => GetResourceString("TextBoxMaxLengthDescr");
    /// <summary>Indicates if the text in the edit control has been modified by the user.</summary>
    internal static string @TextBoxModifiedDescr => GetResourceString("TextBoxModifiedDescr");
    /// <summary>Controls whether the text of the edit control can span more than one line.</summary>
    internal static string @TextBoxMultilineDescr => GetResourceString("TextBoxMultilineDescr");
    /// <summary>Indicates the character to display for password input for single-line edit controls.</summary>
    internal static string @TextBoxPasswordCharDescr => GetResourceString("TextBoxPasswordCharDescr");
    /// <summary>The preferred height of this control.</summary>
    internal static string @TextBoxPreferredHeightDescr => GetResourceString("TextBoxPreferredHeightDescr");
    /// <summary>Controls whether the text in the edit control can be changed or not.</summary>
    internal static string @TextBoxReadOnlyDescr => GetResourceString("TextBoxReadOnlyDescr");
    /// <summary>Indicates, for multiline edit controls, which scroll bars will be shown for this control.</summary>
    internal static string @TextBoxScrollBarsDescr => GetResourceString("TextBoxScrollBarsDescr");
    /// <summary>The currently selected text.</summary>
    internal static string @TextBoxSelectedTextDescr => GetResourceString("TextBoxSelectedTextDescr");
    /// <summary>The length of the currently selected text.</summary>
    internal static string @TextBoxSelectionLengthDescr => GetResourceString("TextBoxSelectionLengthDescr");
    /// <summary>The beginning of the currently selected text.</summary>
    internal static string @TextBoxSelectionStartDescr => GetResourceString("TextBoxSelectionStartDescr");
    /// <summary>Indicates whether shortcuts defined for the control are enabled.</summary>
    internal static string @TextBoxShortcutsEnabledDescr => GetResourceString("TextBoxShortcutsEnabledDescr");
    /// <summary>Indicates how the text should be aligned for edit controls.</summary>
    internal static string @TextBoxTextAlignDescr => GetResourceString("TextBoxTextAlignDescr");
    /// <summary>Indicates if the text in the edit control should appear as the default password character.</summary>
    internal static string @TextBoxUseSystemPasswordCharDescr => GetResourceString("TextBoxUseSystemPasswordCharDescr");
    /// <summary>Indicates if lines are automatically word-wrapped for multiline edit controls.</summary>
    internal static string @TextBoxWordWrapDescr => GetResourceString("TextBoxWordWrapDescr");
    /// <summary>Parse of Text("{0}") expected text in the format "{1}" did not succeed.</summary>
    internal static string @TextParseFailedFormat => GetResourceString("TextParseFailedFormat");
    /// <summary>Current thread must be set to single thread apartment (STA) mode before OLE calls can be made. Ensure that your Main function has STAThreadAttribute marked on it.</summary>
    internal static string @ThreadMustBeSTA => GetResourceString("ThreadMustBeSTA");
    /// <summary>An error occurred invoking the method.  The destination thread no longer exists.</summary>
    internal static string @ThreadNoLongerValid => GetResourceString("ThreadNoLongerValid");
    /// <summary>An error occurred invoking the method.  A message loop is required to marshal the thread call.</summary>
    internal static string @ThreadNotPumpingMessages => GetResourceString("ThreadNotPumpingMessages");
    /// <summary>Enables generation of Elapsed events.</summary>
    internal static string @TimerEnabledDescr => GetResourceString("TimerEnabledDescr");
    /// <summary>The frequency of Elapsed events in milliseconds.</summary>
    internal static string @TimerIntervalDescr => GetResourceString("TimerIntervalDescr");
    /// <summary>Value '{0}' is not a valid value for Interval. Interval must be greater than {1}.</summary>
    internal static string @TimerInvalidInterval => GetResourceString("TimerInvalidInterval");
    /// <summary>Occurs whenever the specified interval time elapses.</summary>
    internal static string @TimerTimerDescr => GetResourceString("TimerTimerDescr");
    /// <summary>AllowItemReorder and AllowDrop cannot both be true.</summary>
    internal static string @ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue => GetResourceString("ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue");
    /// <summary>Allows the items to be reordered when the ALT key is pressed.</summary>
    internal static string @ToolStripAllowItemReorderDescr => GetResourceString("ToolStripAllowItemReorderDescr");
    /// <summary>Allow the items to be merged.</summary>
    internal static string @ToolStripAllowMergeDescr => GetResourceString("ToolStripAllowMergeDescr");
    /// <summary>Specifies the background color of the ToolStrip.</summary>
    internal static string @ToolStripBackColorDescr => GetResourceString("ToolStripBackColorDescr");
    /// <summary>Indicates whether the ToolStripButton is pressed in or not pressed in.</summary>
    internal static string @ToolStripButtonCheckedDescr => GetResourceString("ToolStripButtonCheckedDescr");
    /// <summary>Indicates whether the item should toggle its selected state when clicked.</summary>
    internal static string @ToolStripButtonCheckOnClickDescr => GetResourceString("ToolStripButtonCheckOnClickDescr");
    /// <summary>ToolStrip cannot position another ToolStrip's items.</summary>
    internal static string @ToolStripCanOnlyPositionItsOwnItems => GetResourceString("ToolStripCanOnlyPositionItsOwnItems");
    /// <summary>Indicates whether items can be sent to an overflow menu.</summary>
    internal static string @ToolStripCanOverflowDescr => GetResourceString("ToolStripCanOverflowDescr");
    /// <summary>You must explicitly insert one item and remove the other.</summary>
    internal static string @ToolStripCollectionMustInsertAndRemove => GetResourceString("ToolStripCollectionMustInsertAndRemove");
    /// <summary>The bottom panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
    internal static string @ToolStripContainerBottomToolStripPanelDescr => GetResourceString("ToolStripContainerBottomToolStripPanelDescr");
    /// <summary>Specifies the visibility of the bottom panel of the ToolStripContainer.</summary>
    internal static string @ToolStripContainerBottomToolStripPanelVisibleDescr => GetResourceString("ToolStripContainerBottomToolStripPanelVisibleDescr");
    /// <summary>The center panel of the ToolStripContainer.</summary>
    internal static string @ToolStripContainerContentPanelDescr => GetResourceString("ToolStripContainerContentPanelDescr");
    /// <summary>Provides panels on each side of the form that can contain one or more ToolStrip, MenuStrip, or StatusStrip controls.</summary>
    internal static string @ToolStripContainerDesc => GetResourceString("ToolStripContainerDesc");
    /// <summary>The left panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
    internal static string @ToolStripContainerLeftToolStripPanelDescr => GetResourceString("ToolStripContainerLeftToolStripPanelDescr");
    /// <summary>Specifies the visibility of the left panel of the ToolStripContainer.</summary>
    internal static string @ToolStripContainerLeftToolStripPanelVisibleDescr => GetResourceString("ToolStripContainerLeftToolStripPanelVisibleDescr");
    /// <summary>The right panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
    internal static string @ToolStripContainerRightToolStripPanelDescr => GetResourceString("ToolStripContainerRightToolStripPanelDescr");
    /// <summary>Specifies the visibility of the right panel of the ToolStripContainer.</summary>
    internal static string @ToolStripContainerRightToolStripPanelVisibleDescr => GetResourceString("ToolStripContainerRightToolStripPanelVisibleDescr");
    /// <summary>The top panel of the ToolStripContainer.  This area is used for moving ToolStrips, MenuStrips and StatusStrips.</summary>
    internal static string @ToolStripContainerTopToolStripPanelDescr => GetResourceString("ToolStripContainerTopToolStripPanelDescr");
    /// <summary>Specifies the visibility of the top panel of the ToolStripContainer.</summary>
    internal static string @ToolStripContainerTopToolStripPanelVisibleDescr => GetResourceString("ToolStripContainerTopToolStripPanelVisibleDescr");
    /// <summary>Adding controls directly to the ToolStripContainer is not supported.  Use the 'ContentPanel.Controls' property instead.</summary>
    internal static string @ToolStripContainerUseContentPanel => GetResourceString("ToolStripContainerUseContentPanel");
    /// <summary>Occurs whenever the content panel loads.</summary>
    internal static string @ToolStripContentPanelOnLoadDescr => GetResourceString("ToolStripContentPanelOnLoadDescr");
    /// <summary>Specifies the default direction for DropDowns to open.</summary>
    internal static string @ToolStripDefaultDropDownDirectionDescr => GetResourceString("ToolStripDefaultDropDownDirectionDescr");
    /// <summary>ToolStrip doesn't support the AutoScroll property.</summary>
    internal static string @ToolStripDoesntSupportAutoScroll => GetResourceString("ToolStripDoesntSupportAutoScroll");
    /// <summary>Specifies whether the DropDown automatically closes through user action.</summary>
    internal static string @ToolStripDropDownAutoCloseDescr => GetResourceString("ToolStripDropDownAutoCloseDescr");
    /// <summary>Specifies whether or not an arrow should be shown on the drop down button.</summary>
    internal static string @ToolStripDropDownButtonShowDropDownArrowDescr => GetResourceString("ToolStripDropDownButtonShowDropDownArrowDescr");
    /// <summary>Occurs when the DropDown has closed.</summary>
    internal static string @ToolStripDropDownClosedDecr => GetResourceString("ToolStripDropDownClosedDecr");
    /// <summary>Occurs when the DropDown is about to close.</summary>
    internal static string @ToolStripDropDownClosingDecr => GetResourceString("ToolStripDropDownClosingDecr");
    /// <summary>Specifies a ToolStripDropDown to show when the item is clicked.</summary>
    internal static string @ToolStripDropDownDescr => GetResourceString("ToolStripDropDownDescr");
    /// <summary>Specifies the direction in which to drop the drop down.</summary>
    internal static string @ToolStripDropDownItemDropDownDirectionDescr => GetResourceString("ToolStripDropDownItemDropDownDirectionDescr");
    /// <summary>Specifies a ToolStripItem to display when the item is clicked.</summary>
    internal static string @ToolStripDropDownItemsDescr => GetResourceString("ToolStripDropDownItemsDescr");
    /// <summary>Specifies whether the check margin will be shown.</summary>
    internal static string @ToolStripDropDownMenuShowCheckMarginDescr => GetResourceString("ToolStripDropDownMenuShowCheckMarginDescr");
    /// <summary>Specifies whether the image margin will be shown.</summary>
    internal static string @ToolStripDropDownMenuShowImageMarginDescr => GetResourceString("ToolStripDropDownMenuShowImageMarginDescr");
    /// <summary>Occurs when the DropDown has opened.</summary>
    internal static string @ToolStripDropDownOpenedDescr => GetResourceString("ToolStripDropDownOpenedDescr");
    /// <summary>Occurs when the DropDown is opening.</summary>
    internal static string @ToolStripDropDownOpeningDescr => GetResourceString("ToolStripDropDownOpeningDescr");
    /// <summary>Specifies the PreferredWidth of the ToolStripDropDown when it is shown.</summary>
    internal static string @ToolStripDropDownPreferredWidthDescr => GetResourceString("ToolStripDropDownPreferredWidthDescr");
    /// <summary>Grip</summary>
    internal static string @ToolStripGripAccessibleName => GetResourceString("ToolStripGripAccessibleName");
    /// <summary>ToolStripDropDown does not support rafting.</summary>
    internal static string @ToolStripDropDownsCantBeRafted => GetResourceString("ToolStripDropDownsCantBeRafted");
    /// <summary>Specifies the orientation of the grip on the ToolStrip.</summary>
    internal static string @ToolStripGripDisplayStyleDescr => GetResourceString("ToolStripGripDisplayStyleDescr");
    /// <summary>Specifies the external spacing between the grip and the padding of the ToolStrip and the displayed item.</summary>
    internal static string @ToolStripGripMargin => GetResourceString("ToolStripGripMargin");
    /// <summary>Specifies visibility of the grip on the ToolStrip.</summary>
    internal static string @ToolStripGripStyleDescr => GetResourceString("ToolStripGripStyleDescr");
    /// <summary>Specifies the ImageList on the ToolStrip.</summary>
    internal static string @ToolStripImageListDescr => GetResourceString("ToolStripImageListDescr");
    /// <summary>Specifies the size of images on items.  To control the scaling of items, use the 'ToolStripItem.ImageScaling' property.</summary>
    internal static string @ToolStripImageScalingSizeDescr => GetResourceString("ToolStripImageScalingSizeDescr");
    /// <summary>The AccessibleObject assigned to the control.</summary>
    internal static string @ToolStripItemAccessibilityObjectDescr => GetResourceString("ToolStripItemAccessibilityObjectDescr");
    /// <summary>The default action description of the item.</summary>
    internal static string @ToolStripItemAccessibleDefaultActionDescr => GetResourceString("ToolStripItemAccessibleDefaultActionDescr");
    /// <summary>The description that will be reported to accessibility clients.</summary>
    internal static string @ToolStripItemAccessibleDescriptionDescr => GetResourceString("ToolStripItemAccessibleDescriptionDescr");
    /// <summary>The name that will be reported to accessibility clients.</summary>
    internal static string @ToolStripItemAccessibleNameDescr => GetResourceString("ToolStripItemAccessibleNameDescr");
    /// <summary>The role that will be reported to accessibility clients.</summary>
    internal static string @ToolStripItemAccessibleRoleDescr => GetResourceString("ToolStripItemAccessibleRoleDescr");
    /// <summary>Occurs when a ToolStripItem has been added to the ToolStrip's item collection.</summary>
    internal static string @ToolStripItemAddedDescr => GetResourceString("ToolStripItemAddedDescr");
    /// <summary>The alignment of the item with respect to it's owner ToolStrip.</summary>
    internal static string @ToolStripItemAlignment => GetResourceString("ToolStripItemAlignment");
    /// <summary>Indicates whether the item aligns toward the beginning or end of the ToolStrip.</summary>
    internal static string @ToolStripItemAlignmentDescr => GetResourceString("ToolStripItemAlignmentDescr");
    /// <summary>Determines if the item will receive drag-drop notifications.</summary>
    internal static string @ToolStripItemAllowDropDescr => GetResourceString("ToolStripItemAllowDropDescr");
    /// <summary>Determines whether the item should automatically size based on its image and text.</summary>
    internal static string @ToolStripItemAutoSizeDescr => GetResourceString("ToolStripItemAutoSizeDescr");
    /// <summary>Specifies whether to use the Text or ToolTipText property to display on the ToolTip.</summary>
    internal static string @ToolStripItemAutoToolTipDescr => GetResourceString("ToolStripItemAutoToolTipDescr");
    /// <summary>Specifies whether or not an item should be placed on a ToolStrip.</summary>
    internal static string @ToolStripItemAvailableDescr => GetResourceString("ToolStripItemAvailableDescr");
    /// <summary>The background color used to display text and graphics in the control.</summary>
    internal static string @ToolStripItemBackColorDescr => GetResourceString("ToolStripItemBackColorDescr");
    /// <summary>Cannot add owner item to the drop-down items collection.</summary>
    internal static string @ToolStripItemCircularReference => GetResourceString("ToolStripItemCircularReference");
    /// <summary>Collection of ToolStripItems is read-only.</summary>
    internal static string @ToolStripItemCollectionIsReadOnly => GetResourceString("ToolStripItemCollectionIsReadOnly");
    /// <summary>Specifies whether the image and text are rendered.</summary>
    internal static string @ToolStripItemDisplayStyleDescr => GetResourceString("ToolStripItemDisplayStyleDescr");
    /// <summary>Specifies whether the DoubleClick event will occur.</summary>
    internal static string @ToolStripItemDoubleClickedEnabledDescr => GetResourceString("ToolStripItemDoubleClickedEnabledDescr");
    /// <summary>Specifies the drawing mode of the ToolStrip item.</summary>
    internal static string @ToolStripItemDrawModeDescr => GetResourceString("ToolStripItemDrawModeDescr");
    /// <summary>Occurs when the enabled state of the item has changed.</summary>
    internal static string @ToolStripItemEnabledChangedDescr => GetResourceString("ToolStripItemEnabledChangedDescr");
    /// <summary>Indicates whether the control is enabled.</summary>
    internal static string @ToolStripItemEnabledDescr => GetResourceString("ToolStripItemEnabledDescr");
    /// <summary>The font used to display text in the item.</summary>
    internal static string @ToolStripItemFontDescr => GetResourceString("ToolStripItemFontDescr");
    /// <summary>The foreground color used to display text and graphics in the item.</summary>
    internal static string @ToolStripItemForeColorDescr => GetResourceString("ToolStripItemForeColorDescr");
    /// <summary>The alignment of the image that will be displayed on the item.</summary>
    internal static string @ToolStripItemImageAlignDescr => GetResourceString("ToolStripItemImageAlignDescr");
    /// <summary>The image that will be displayed on the item.</summary>
    internal static string @ToolStripItemImageDescr => GetResourceString("ToolStripItemImageDescr");
    /// <summary>The index of the image in the ImageList to display on the item.</summary>
    internal static string @ToolStripItemImageIndexDescr => GetResourceString("ToolStripItemImageIndexDescr");
    /// <summary>The key representing the image in the ImageList to display on the item.</summary>
    internal static string @ToolStripItemImageKeyDescr => GetResourceString("ToolStripItemImageKeyDescr");
    /// <summary>The ImageList to get the image to display on the item.</summary>
    internal static string @ToolStripItemImageList => GetResourceString("ToolStripItemImageList");
    /// <summary>Specifies whether the image on the item will size to fit on the ToolStrip.  To control the image size, use the 'ToolStrip.ImageScalingSize' property.</summary>
    internal static string @ToolStripItemImageScalingDescr => GetResourceString("ToolStripItemImageScalingDescr");
    /// <summary>Specifies the transparent color on the item's image for images that support transparency.</summary>
    internal static string @ToolStripItemImageTransparentColorDescr => GetResourceString("ToolStripItemImageTransparentColorDescr");
    /// <summary>Specifies the spacing between this item and an adjacent item.</summary>
    internal static string @ToolStripItemMarginDescr => GetResourceString("ToolStripItemMarginDescr");
    /// <summary>Occurs when the value of the Available property changes.</summary>
    internal static string @ToolStripItemOnAvailableChangedDescr => GetResourceString("ToolStripItemOnAvailableChangedDescr");
    /// <summary>Occurs when the value of the BackColor property is changed on the item.</summary>
    internal static string @ToolStripItemOnBackColorChangedDescr => GetResourceString("ToolStripItemOnBackColorChangedDescr");
    /// <summary>Occurs when the item is clicked.</summary>
    internal static string @ToolStripItemOnClickDescr => GetResourceString("ToolStripItemOnClickDescr");
    /// <summary>Occurs when the mouse drags an item and the user releases the mouse indicating that the item should be 'dropped' into this item.</summary>
    internal static string @ToolStripItemOnDragDropDescr => GetResourceString("ToolStripItemOnDragDropDescr");
    /// <summary>Occurs when the mouse drags an item into the client area for this item.</summary>
    internal static string @ToolStripItemOnDragEnterDescr => GetResourceString("ToolStripItemOnDragEnterDescr");
    /// <summary>Occurs when the mouse drags an item and is no longer over the client area for this item.</summary>
    internal static string @ToolStripItemOnDragLeaveDescr => GetResourceString("ToolStripItemOnDragLeaveDescr");
    /// <summary>Occurs when the mouse drags an item over the client area for this item.</summary>
    internal static string @ToolStripItemOnDragOverDescr => GetResourceString("ToolStripItemOnDragOverDescr");
    /// <summary>Occurs when the value of the BackColor property is changed on the item.</summary>
    internal static string @ToolStripItemOnForeColorChangedDescr => GetResourceString("ToolStripItemOnForeColorChangedDescr");
    /// <summary>Occurs when the mouse drags an item. The system requests that the Item provide feedback to that effect.</summary>
    internal static string @ToolStripItemOnGiveFeedbackDescr => GetResourceString("ToolStripItemOnGiveFeedbackDescr");
    /// <summary>Occurs when the control gets focus.</summary>
    internal static string @ToolStripItemOnGotFocusDescr => GetResourceString("ToolStripItemOnGotFocusDescr");
    /// <summary>Occurs when the location of a ToolStripItem is updated.</summary>
    internal static string @ToolStripItemOnLocationChangedDescr => GetResourceString("ToolStripItemOnLocationChangedDescr");
    /// <summary>Occurs when the control loses focus.</summary>
    internal static string @ToolStripItemOnLostFocusDescr => GetResourceString("ToolStripItemOnLostFocusDescr");
    /// <summary>Occurs when a mouse button is pressed.</summary>
    internal static string @ToolStripItemOnMouseDownDescr => GetResourceString("ToolStripItemOnMouseDownDescr");
    /// <summary>Occurs when the mouse enters the visible part of the item.</summary>
    internal static string @ToolStripItemOnMouseEnterDescr => GetResourceString("ToolStripItemOnMouseEnterDescr");
    /// <summary>Occurs when the mouse remains stationary inside of the item for an amount of time.</summary>
    internal static string @ToolStripItemOnMouseHoverDescr => GetResourceString("ToolStripItemOnMouseHoverDescr");
    /// <summary>Occurs when the mouse leaves the visible part of the item.</summary>
    internal static string @ToolStripItemOnMouseLeaveDescr => GetResourceString("ToolStripItemOnMouseLeaveDescr");
    /// <summary>Occurs when the mouse is moved.</summary>
    internal static string @ToolStripItemOnMouseMoveDescr => GetResourceString("ToolStripItemOnMouseMoveDescr");
    /// <summary>Occurs when a mouse button is released.</summary>
    internal static string @ToolStripItemOnMouseUpDescr => GetResourceString("ToolStripItemOnMouseUpDescr");
    /// <summary>Occurs when an item needs repainting.</summary>
    internal static string @ToolStripItemOnPaintDescr => GetResourceString("ToolStripItemOnPaintDescr");
    /// <summary>Occurs when an Accessibility client invokes help for the item.</summary>
    internal static string @ToolStripItemOnQueryAccessibilityHelpDescr => GetResourceString("ToolStripItemOnQueryAccessibilityHelpDescr");
    /// <summary>Occurs when the mouse drags an item. The system requests whether the drag-and-drop operation should be allowed to continue.</summary>
    internal static string @ToolStripItemOnQueryContinueDragDescr => GetResourceString("ToolStripItemOnQueryContinueDragDescr");
    /// <summary>Event raised when the value of the RightToLeft property is changed on this item.</summary>
    internal static string @ToolStripItemOnRightToLeftChangedDescr => GetResourceString("ToolStripItemOnRightToLeftChangedDescr");
    /// <summary>Occurs when the Text property is changed on the item.</summary>
    internal static string @ToolStripItemOnTextChangedDescr => GetResourceString("ToolStripItemOnTextChangedDescr");
    /// <summary>Occurs when the visibility of an item has changed.</summary>
    internal static string @ToolStripItemOnVisibleChangedDescr => GetResourceString("ToolStripItemOnVisibleChangedDescr");
    /// <summary>Specifies whether an item will always be sent to the overflow, never be sent to the overflow, or sent to the overflow as needed.</summary>
    internal static string @ToolStripItemOverflow => GetResourceString("ToolStripItemOverflow");
    /// <summary>Specifies whether the item will always move to the overflow, move to the overflow as needed, or never move to the overflow.</summary>
    internal static string @ToolStripItemOverflowDescr => GetResourceString("ToolStripItemOverflowDescr");
    /// <summary>Occurs when the value of the Owner property changes.</summary>
    internal static string @ToolStripItemOwnerChangedDescr => GetResourceString("ToolStripItemOwnerChangedDescr");
    /// <summary>Specifies the internal spacing within this item.</summary>
    internal static string @ToolStripItemPaddingDescr => GetResourceString("ToolStripItemPaddingDescr");
    /// <summary>Occurs when a ToolStripItem has been removed from the ToolStrip's item collection.</summary>
    internal static string @ToolStripItemRemovedDescr => GetResourceString("ToolStripItemRemovedDescr");
    /// <summary>Specifies whether the image should mirror when the RightToLeft property equals RightToLeft.Yes.</summary>
    internal static string @ToolStripItemRightToLeftAutoMirrorImageDescr => GetResourceString("ToolStripItemRightToLeftAutoMirrorImageDescr");
    /// <summary>Indicates whether the item should draw right-to-left for RTL languages.</summary>
    internal static string @ToolStripItemRightToLeftDescr => GetResourceString("ToolStripItemRightToLeftDescr");
    /// <summary>Collection of items to display on the ToolStrip.</summary>
    internal static string @ToolStripItemsDescr => GetResourceString("ToolStripItemsDescr");
    /// <summary>The size of the item.</summary>
    internal static string @ToolStripItemSize => GetResourceString("ToolStripItemSize");
    /// <summary>The size of the item in pixels.</summary>
    internal static string @ToolStripItemSizeDescr => GetResourceString("ToolStripItemSizeDescr");
    /// <summary>User-defined data associated with the item.</summary>
    internal static string @ToolStripItemTagDescr => GetResourceString("ToolStripItemTagDescr");
    /// <summary>The alignment of the text that will be displayed on the item.</summary>
    internal static string @ToolStripItemTextAlignDescr => GetResourceString("ToolStripItemTextAlignDescr");
    /// <summary>The text to display on the item.</summary>
    internal static string @ToolStripItemTextDescr => GetResourceString("ToolStripItemTextDescr");
    /// <summary>Specifies the relative location of the image to the text on the item.</summary>
    internal static string @ToolStripItemTextImageRelationDescr => GetResourceString("ToolStripItemTextImageRelationDescr");
    /// <summary>Specifies the text to show on the ToolTip.</summary>
    internal static string @ToolStripItemToolTipTextDescr => GetResourceString("ToolStripItemToolTipTextDescr");
    /// <summary>Determines whether the item is visible or hidden.</summary>
    internal static string @ToolStripItemVisibleDescr => GetResourceString("ToolStripItemVisibleDescr");
    /// <summary>Specifies the color of the link when the link is active.</summary>
    internal static string @ToolStripLabelActiveLinkColorDescr => GetResourceString("ToolStripLabelActiveLinkColorDescr");
    /// <summary>Specifies whether the label acts as a link.</summary>
    internal static string @ToolStripLabelIsLinkDescr => GetResourceString("ToolStripLabelIsLinkDescr");
    /// <summary>The underlining behavior of the link.</summary>
    internal static string @ToolStripLabelLinkBehaviorDescr => GetResourceString("ToolStripLabelLinkBehaviorDescr");
    /// <summary>Specifies the color of the link.</summary>
    internal static string @ToolStripLabelLinkColorDescr => GetResourceString("ToolStripLabelLinkColorDescr");
    /// <summary>Determines if the hyperlink should be rendered as visited.</summary>
    internal static string @ToolStripLabelLinkVisitedDescr => GetResourceString("ToolStripLabelLinkVisitedDescr");
    /// <summary>Specifies the color of the link when the link has been visited.</summary>
    internal static string @ToolStripLabelVisitedLinkColorDescr => GetResourceString("ToolStripLabelVisitedLinkColorDescr");
    /// <summary>Occurs after layout and placement of items on the ToolStrip.</summary>
    internal static string @ToolStripLayoutCompleteDescr => GetResourceString("ToolStripLayoutCompleteDescr");
    /// <summary>Specifies the layout orientation of the ToolStrip.</summary>
    internal static string @ToolStripLayoutStyle => GetResourceString("ToolStripLayoutStyle");
    /// <summary>Occurs when the layout style of the ToolStrip has changed.</summary>
    internal static string @ToolStripLayoutStyleChangedDescr => GetResourceString("ToolStripLayoutStyleChangedDescr");
    /// <summary>The string to be displayed as the shortcut key.</summary>
    internal static string @ToolStripMenuItemShortcutKeyDisplayStringDescr => GetResourceString("ToolStripMenuItemShortcutKeyDisplayStringDescr");
    /// <summary>Specifies what action to take if match is successful.</summary>
    internal static string @ToolStripMergeActionDescr => GetResourceString("ToolStripMergeActionDescr");
    /// <summary>Operation impossible. Source and target are identical.</summary>
    internal static string @ToolStripMergeImpossibleIdentical => GetResourceString("ToolStripMergeImpossibleIdentical");
    /// <summary>Used for matching and positioning within target ToolStrip.</summary>
    internal static string @ToolStripMergeIndexDescr => GetResourceString("ToolStripMergeIndexDescr");
    /// <summary>Call the empty ToolStripComboBox constructor, which will provide a ComboBox.</summary>
    internal static string @ToolStripMustSupplyItsOwnComboBox => GetResourceString("ToolStripMustSupplyItsOwnComboBox");
    /// <summary>Call the empty ToolStripTextBox constructor, which will provide a TextBox.</summary>
    internal static string @ToolStripMustSupplyItsOwnTextBox => GetResourceString("ToolStripMustSupplyItsOwnTextBox");
    /// <summary>Occurs when the ToolStrip has started to move within a ToolStripPanel.</summary>
    internal static string @ToolStripOnBeginDrag => GetResourceString("ToolStripOnBeginDrag");
    /// <summary>Occurs when the ToolStrip has stopped moving within a ToolStripPanel.</summary>
    internal static string @ToolStripOnEndDrag => GetResourceString("ToolStripOnEndDrag");
    /// <summary>ToolBar Options</summary>
    internal static string @ToolStripOptions => GetResourceString("ToolStripOptions");
    /// <summary>Occurs when the move handle needs repainting.</summary>
    internal static string @ToolStripPaintGripDescr => GetResourceString("ToolStripPaintGripDescr");
    /// <summary>A collection of rows in the panel.</summary>
    internal static string @ToolStripPanelRowsDescr => GetResourceString("ToolStripPanelRowsDescr");
    /// <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
    internal static string @ToolStripPanelRowControlCollectionIncorrectIndexLength => GetResourceString("ToolStripPanelRowControlCollectionIncorrectIndexLength");
    /// <summary>Occurs when the value of the Renderer property changes.</summary>
    internal static string @ToolStripRendererChanged => GetResourceString("ToolStripRendererChanged");
    /// <summary>The painting styles applied to the control.</summary>
    internal static string @ToolStripRenderModeDescr => GetResourceString("ToolStripRenderModeDescr");
    /// <summary>The RenderMode property cannot directly be set to 'Custom', to use a custom ToolStripRenderer, set the Renderer property instead.</summary>
    internal static string @ToolStripRenderModeUseRendererPropertyInstead => GetResourceString("ToolStripRenderModeUseRendererPropertyInstead");
    /// <summary>Specifies whether the ToolStrip should persist user settings via IPersistComponentSettings.</summary>
    internal static string @ToolStripSaveSettingsDescr => GetResourceString("ToolStripSaveSettingsDescr");
    /// <summary>Specifies the settings key to use to save settings.</summary>
    internal static string @ToolStripSettingsKeyDescr => GetResourceString("ToolStripSettingsKeyDescr");
    /// <summary>DropDown is the same as the Parent ToolStrip. Cannot Drop Down.</summary>
    internal static string @ToolStripShowDropDownInvalidOperation => GetResourceString("ToolStripShowDropDownInvalidOperation");
    /// <summary>Specifies whether to display ToolTips on items.</summary>
    internal static string @ToolStripShowItemToolTipsDescr => GetResourceString("ToolStripShowItemToolTipsDescr");
    /// <summary>Specifies how much space to give to the DropDownButton portion of the ToolStripSplitButton.</summary>
    internal static string @ToolStripSplitButtonDropDownButtonWidthDescr => GetResourceString("ToolStripSplitButtonDropDownButtonWidthDescr");
    /// <summary>Occurs when the button portion of the split button has been clicked.</summary>
    internal static string @ToolStripSplitButtonOnButtonClickDescr => GetResourceString("ToolStripSplitButtonOnButtonClickDescr");
    /// <summary>Occurs when the button portion of the split button has been double clicked.</summary>
    internal static string @ToolStripSplitButtonOnButtonDoubleClickDescr => GetResourceString("ToolStripSplitButtonOnButtonDoubleClickDescr");
    /// <summary>Occurs when the DefaultItem property has changed.</summary>
    internal static string @ToolStripSplitButtonOnDefaultItemChangedDescr => GetResourceString("ToolStripSplitButtonOnDefaultItemChangedDescr");
    /// <summary>Specifies the width of the split section between the default and drop-down button.</summary>
    internal static string @ToolStripSplitButtonSplitterWidthDescr => GetResourceString("ToolStripSplitButtonSplitterWidthDescr");
    /// <summary>Container must be a ToolStrip.</summary>
    internal static string @ToolStripSplitStackLayoutContainerMustBeAToolStrip => GetResourceString("ToolStripSplitStackLayoutContainerMustBeAToolStrip");
    /// <summary>Specifies the sides of the panel that should display borders.</summary>
    internal static string @ToolStripStatusLabelBorderSidesDescr => GetResourceString("ToolStripStatusLabelBorderSidesDescr");
    /// <summary>Specifies the border style for the panel.</summary>
    internal static string @ToolStripStatusLabelBorderStyleDescr => GetResourceString("ToolStripStatusLabelBorderStyleDescr");
    /// <summary>Specifies whether the item fills up the remaining space.</summary>
    internal static string @ToolStripStatusLabelSpringDescr => GetResourceString("ToolStripStatusLabelSpringDescr");
    /// <summary>Specifies whether the ToolStrip stretches from end to end in the rafting container.</summary>
    internal static string @ToolStripStretchDescr => GetResourceString("ToolStripStretchDescr");
    /// <summary>Occurs when the value of the TextBoxTextAlign property changes.</summary>
    internal static string @ToolStripTextBoxTextBoxTextAlignChangedDescr => GetResourceString("ToolStripTextBoxTextBoxTextAlignChangedDescr");
    /// <summary>Specifies the direction to draw the text on the item.</summary>
    internal static string @ToolStripTextDirectionDescr => GetResourceString("ToolStripTextDirectionDescr");
    /// <summary>Determines if the ToolTip is active. A tip will only appear if the ToolTip has been activated.</summary>
    internal static string @ToolTipActiveDescr => GetResourceString("ToolTipActiveDescr");
    /// <summary>Adding the tip to the native ToolTip control did not succeed.</summary>
    internal static string @ToolTipAddFailed => GetResourceString("ToolTipAddFailed");
    /// <summary>Sets the values of AutoPopDelay, InitialDelay, and ReshowDelay to the appropriate values.</summary>
    internal static string @ToolTipAutomaticDelayDescr => GetResourceString("ToolTipAutomaticDelayDescr");
    /// <summary>Determines the length of time the ToolTip window remains visible if the pointer is stationary inside a ToolTip region.</summary>
    internal static string @ToolTipAutoPopDelayDescr => GetResourceString("ToolTipAutoPopDelayDescr");
    /// <summary>The background color of the ToolTip control.</summary>
    internal static string @ToolTipBackColorDescr => GetResourceString("ToolTipBackColorDescr");
    /// <summary>Occurs in OwnerDraw mode when the ToolTip needs to be drawn.</summary>
    internal static string @ToolTipDrawEventDescr => GetResourceString("ToolTipDrawEventDescr");
    /// <summary>Value '{0}' cannot be set to an empty value.</summary>
    internal static string @ToolTipEmptyColor => GetResourceString("ToolTipEmptyColor");
    /// <summary>The foreground color of the ToolTip control.</summary>
    internal static string @ToolTipForeColorDescr => GetResourceString("ToolTipForeColorDescr");
    /// <summary>Determines the length of time the pointer must remain stationary within a ToolTip region before the ToolTip window appears.</summary>
    internal static string @ToolTipInitialDelayDescr => GetResourceString("ToolTipInitialDelayDescr");
    /// <summary>Indicates whether the ToolTip will take on a balloon form.</summary>
    internal static string @ToolTipIsBalloonDescr => GetResourceString("ToolTipIsBalloonDescr");
    /// <summary>Controls whether the system or the user paints items/sub items.</summary>
    internal static string @ToolTipOwnerDrawDescr => GetResourceString("ToolTipOwnerDrawDescr");
    /// <summary>Occurs whenever a ToolTip is about to be shown.</summary>
    internal static string @ToolTipPopupEventDescr => GetResourceString("ToolTipPopupEventDescr");
    /// <summary>Determines the length of time it takes for subsequent ToolTip windows to appear as the pointer moves from one ToolTip region to another.</summary>
    internal static string @ToolTipReshowDelayDescr => GetResourceString("ToolTipReshowDelayDescr");
    /// <summary>Determines if the tool tip will be displayed always, even if the parent window is not active.</summary>
    internal static string @ToolTipShowAlwaysDescr => GetResourceString("ToolTipShowAlwaysDescr");
    /// <summary>When set to true, any ampersands (&amp;) in the Text property are not displayed.</summary>
    internal static string @ToolTipStripAmpersandsDescr => GetResourceString("ToolTipStripAmpersandsDescr");
    /// <summary>Determines the title of the ToolTip.</summary>
    internal static string @ToolTipTitleDescr => GetResourceString("ToolTipTitleDescr");
    /// <summary>Determines the ToolTip shown when the mouse hovers over the control.</summary>
    internal static string @ToolTipToolTipDescr => GetResourceString("ToolTipToolTipDescr");
    /// <summary>Determines the icon that is shown on the ToolTip.</summary>
    internal static string @ToolTipToolTipIconDescr => GetResourceString("ToolTipToolTipIconDescr");
    /// <summary>When set to true, animations are used when the ToolTip is shown or hidden.</summary>
    internal static string @ToolTipUseAnimationDescr => GetResourceString("ToolTipUseAnimationDescr");
    /// <summary>When set to true, a fade effect is used when ToolTips are shown or hidden.</summary>
    internal static string @ToolTipUseFadingDescr => GetResourceString("ToolTipUseFadingDescr");
    /// <summary>Too many calls to ResumeUpdateMenuHandles.</summary>
    internal static string @TooManyResumeUpdateMenuHandles => GetResourceString("TooManyResumeUpdateMenuHandles");
    /// <summary>Top-level control cannot be added to a control.</summary>
    internal static string @TopLevelControlAdd => GetResourceString("TopLevelControlAdd");
    /// <summary>TopLevel property cannot be set to true for ActiveX controls.</summary>
    internal static string @TopLevelNotAllowedIfActiveX => GetResourceString("TopLevelNotAllowedIfActiveX");
    /// <summary>Top-level style of a parented control cannot be changed.</summary>
    internal static string @TopLevelParentedControl => GetResourceString("TopLevelParentedControl");
    /// <summary>Alt</summary>
    internal static string @toStringAlt => GetResourceString("toStringAlt");
    /// <summary>Back</summary>
    internal static string @toStringBack => GetResourceString("toStringBack");
    /// <summary>Ctrl</summary>
    internal static string @toStringControl => GetResourceString("toStringControl");
    /// <summary>(default)</summary>
    internal static string @toStringDefault => GetResourceString("toStringDefault");
    /// <summary>Del</summary>
    internal static string @toStringDelete => GetResourceString("toStringDelete");
    /// <summary>End</summary>
    internal static string @toStringEnd => GetResourceString("toStringEnd");
    /// <summary>Enter</summary>
    internal static string @toStringEnter => GetResourceString("toStringEnter");
    /// <summary>Home</summary>
    internal static string @toStringHome => GetResourceString("toStringHome");
    /// <summary>Ins</summary>
    internal static string @toStringInsert => GetResourceString("toStringInsert");
    /// <summary>(none)</summary>
    internal static string @toStringNone => GetResourceString("toStringNone");
    /// <summary>PgDn</summary>
    internal static string @toStringPageDown => GetResourceString("toStringPageDown");
    /// <summary>PgUp</summary>
    internal static string @toStringPageUp => GetResourceString("toStringPageUp");
    /// <summary>Shift</summary>
    internal static string @toStringShift => GetResourceString("toStringShift");
    /// <summary>Indicates whether the control will resize itself automatically based on a computation of the default scroll bar dimensions.</summary>
    internal static string @TrackBarAutoSizeDescr => GetResourceString("TrackBarAutoSizeDescr");
    /// <summary>The number of positions the slider moves in response to mouse clicks or the PAGE UP and PAGE DOWN keys.</summary>
    internal static string @TrackBarLargeChangeDescr => GetResourceString("TrackBarLargeChangeDescr");
    /// <summary>LargeChange: Value '{0}' must be greater than or equal to 0.</summary>
    internal static string @TrackBarLargeChangeError => GetResourceString("TrackBarLargeChangeError");
    /// <summary>The maximum value for the position of the slider on the TrackBar.</summary>
    internal static string @TrackBarMaximumDescr => GetResourceString("TrackBarMaximumDescr");
    /// <summary>The minimum value for the position of the slider on the TrackBar.</summary>
    internal static string @TrackBarMinimumDescr => GetResourceString("TrackBarMinimumDescr");
    /// <summary>Occurs when the TrackBar slider moves.</summary>
    internal static string @TrackBarOnScrollDescr => GetResourceString("TrackBarOnScrollDescr");
    /// <summary>The orientation of the control.</summary>
    internal static string @TrackBarOrientationDescr => GetResourceString("TrackBarOrientationDescr");
    /// <summary>The number of positions the slider moves in response to keyboard input (arrow keys).</summary>
    internal static string @TrackBarSmallChangeDescr => GetResourceString("TrackBarSmallChangeDescr");
    /// <summary>SmallChange: Value '{0}' must be greater than or equal to 0.</summary>
    internal static string @TrackBarSmallChangeError => GetResourceString("TrackBarSmallChangeError");
    /// <summary>The number of positions between tick marks.</summary>
    internal static string @TrackBarTickFrequencyDescr => GetResourceString("TrackBarTickFrequencyDescr");
    /// <summary>Indicates where the ticks appear on the TrackBar.</summary>
    internal static string @TrackBarTickStyleDescr => GetResourceString("TrackBarTickStyleDescr");
    /// <summary>The position of the slider.</summary>
    internal static string @TrackBarValueDescr => GetResourceString("TrackBarValueDescr");
    /// <summary>Control does not support transparent background colors.</summary>
    internal static string @TransparentBackColorNotAllowed => GetResourceString("TransparentBackColorNotAllowed");
    /// <summary>Text length must be less than 64 characters long.</summary>
    internal static string @TrayIcon_TextTooLong => GetResourceString("TrayIcon_TextTooLong");
    /// <summary>The background color of tree node.</summary>
    internal static string @TreeNodeBackColorDescr => GetResourceString("TreeNodeBackColorDescr");
    /// <summary>BeginEdit did not succeed because LabelEdit property is false.</summary>
    internal static string @TreeNodeBeginEditFailed => GetResourceString("TreeNodeBeginEditFailed");
    /// <summary>Indicates whether the tree node is in a checked state.</summary>
    internal static string @TreeNodeCheckedDescr => GetResourceString("TreeNodeCheckedDescr");
    /// <summary>Parameter must be of type TreeNode.</summary>
    internal static string @TreeNodeCollectionBadTreeNode => GetResourceString("TreeNodeCollectionBadTreeNode");
    /// <summary>The foreground color of tree node.</summary>
    internal static string @TreeNodeForeColorDescr => GetResourceString("TreeNodeForeColorDescr");
    /// <summary>The ImageList index value of the image displayed when the tree node is in the unselected state.</summary>
    internal static string @TreeNodeImageIndexDescr => GetResourceString("TreeNodeImageIndexDescr");
    /// <summary>Identifies the image to display on the node when it is not selected.</summary>
    internal static string @TreeNodeImageKeyDescr => GetResourceString("TreeNodeImageKeyDescr");
    /// <summary>The position of the tree node in the tree node collection.</summary>
    internal static string @TreeNodeIndexDescr => GetResourceString("TreeNodeIndexDescr");
    /// <summary>The font used to display the text on the tree node's label.</summary>
    internal static string @TreeNodeNodeFontDescr => GetResourceString("TreeNodeNodeFontDescr");
    /// <summary>The name of the object.</summary>
    internal static string @TreeNodeNodeNameDescr => GetResourceString("TreeNodeNodeNameDescr");
    /// <summary>Full path can only be retrieved when a TreeNode has been added to a TreeView. This TreeNode has not been added to a TreeView.</summary>
    internal static string @TreeNodeNoParent => GetResourceString("TreeNodeNoParent");
    /// <summary>The key in the image-list value that represents the image to display when the tree node is in the selected state.</summary>
    internal static string @TreeNodeSelectedImageIndexDescr => GetResourceString("TreeNodeSelectedImageIndexDescr");
    /// <summary>The key in the ImageList value that represents the image to display when the tree node is in the selected state.</summary>
    internal static string @TreeNodeSelectedImageKeyDescr => GetResourceString("TreeNodeSelectedImageKeyDescr");
    /// <summary>The index in the StateImageList displayed when CheckBoxes is set to false on the TreeView.</summary>
    internal static string @TreeNodeStateImageIndexDescr => GetResourceString("TreeNodeStateImageIndexDescr");
    /// <summary>Identifies the image to display on the node to indicate its current state.</summary>
    internal static string @TreeNodeStateImageKeyDescr => GetResourceString("TreeNodeStateImageKeyDescr");
    /// <summary>The text displayed in the label of the tree node.</summary>
    internal static string @TreeNodeTextDescr => GetResourceString("TreeNodeTextDescr");
    /// <summary>The ToolTip text that will be displayed when the mouse hovers over the node.</summary>
    internal static string @TreeNodeToolTipTextDescr => GetResourceString("TreeNodeToolTipTextDescr");
    /// <summary>Occurs when a check box on a tree node has been checked or unchecked.</summary>
    internal static string @TreeViewAfterCheckDescr => GetResourceString("TreeViewAfterCheckDescr");
    /// <summary>Occurs when a node has been collapsed.</summary>
    internal static string @TreeViewAfterCollapseDescr => GetResourceString("TreeViewAfterCollapseDescr");
    /// <summary>Occurs when the text of a node has been edited by the user.</summary>
    internal static string @TreeViewAfterEditDescr => GetResourceString("TreeViewAfterEditDescr");
    /// <summary>Occurs when a node has been expanded.</summary>
    internal static string @TreeViewAfterExpandDescr => GetResourceString("TreeViewAfterExpandDescr");
    /// <summary>Occurs when the selection has been changed.</summary>
    internal static string @TreeViewAfterSelectDescr => GetResourceString("TreeViewAfterSelectDescr");
    /// <summary>Occurs when a check box on a tree node is about to be checked or unchecked.</summary>
    internal static string @TreeViewBeforeCheckDescr => GetResourceString("TreeViewBeforeCheckDescr");
    /// <summary>Occurs when a node is about to be collapsed.</summary>
    internal static string @TreeViewBeforeCollapseDescr => GetResourceString("TreeViewBeforeCollapseDescr");
    /// <summary>Occurs when the text of a node is about to be edited by the user.</summary>
    internal static string @TreeViewBeforeEditDescr => GetResourceString("TreeViewBeforeEditDescr");
    /// <summary>Occurs when a node is about to be expanded.</summary>
    internal static string @TreeViewBeforeExpandDescr => GetResourceString("TreeViewBeforeExpandDescr");
    /// <summary>Occurs when the selection is about to change.</summary>
    internal static string @TreeViewBeforeSelectDescr => GetResourceString("TreeViewBeforeSelectDescr");
    /// <summary>Indicates whether check boxes are displayed beside nodes.</summary>
    internal static string @TreeViewCheckBoxesDescr => GetResourceString("TreeViewCheckBoxesDescr");
    /// <summary>Controls whether the system or the user paints the nodes.</summary>
    internal static string @TreeViewDrawModeDescr => GetResourceString("TreeViewDrawModeDescr");
    /// <summary>Occurs in owner-draw mode, when a node needs to be drawn.</summary>
    internal static string @TreeViewDrawNodeEventDescr => GetResourceString("TreeViewDrawNodeEventDescr");
    /// <summary>Indicates whether the highlight spans the width of the TreeView.</summary>
    internal static string @TreeViewFullRowSelectDescr => GetResourceString("TreeViewFullRowSelectDescr");
    /// <summary>Removes highlight from the selected node when control does not have focus.</summary>
    internal static string @TreeViewHideSelectionDescr => GetResourceString("TreeViewHideSelectionDescr");
    /// <summary>Indicates whether nodes give feedback when the mouse is moved over them.</summary>
    internal static string @TreeViewHotTrackingDescr => GetResourceString("TreeViewHotTrackingDescr");
    /// <summary>The default image index for nodes.</summary>
    internal static string @TreeViewImageIndexDescr => GetResourceString("TreeViewImageIndexDescr");
    /// <summary>The default image key for nodes.</summary>
    internal static string @TreeViewImageKeyDescr => GetResourceString("TreeViewImageKeyDescr");
    /// <summary>The ImageList control from which node images are taken.</summary>
    internal static string @TreeViewImageListDescr => GetResourceString("TreeViewImageListDescr");
    /// <summary>The indentation width of child nodes in pixels.</summary>
    internal static string @TreeViewIndentDescr => GetResourceString("TreeViewIndentDescr");
    /// <summary>The height of every node in the TreeView.</summary>
    internal static string @TreeViewItemHeightDescr => GetResourceString("TreeViewItemHeightDescr");
    /// <summary>Indicates whether the user can edit the label text of nodes.</summary>
    internal static string @TreeViewLabelEditDescr => GetResourceString("TreeViewLabelEditDescr");
    /// <summary>The color of the lines that connect the nodes of the TreeView.</summary>
    internal static string @TreeViewLineColorDescr => GetResourceString("TreeViewLineColorDescr");
    /// <summary>Occurs when a node is clicked with the mouse.</summary>
    internal static string @TreeViewNodeMouseClickDescr => GetResourceString("TreeViewNodeMouseClickDescr");
    /// <summary>Occurs when a node is double-clicked with the mouse.</summary>
    internal static string @TreeViewNodeMouseDoubleClickDescr => GetResourceString("TreeViewNodeMouseDoubleClickDescr");
    /// <summary>Occurs when the mouse hovers over a TreeNode.</summary>
    internal static string @TreeViewNodeMouseHoverDescr => GetResourceString("TreeViewNodeMouseHoverDescr");
    /// <summary>The root nodes in the TreeView control.</summary>
    internal static string @TreeViewNodesDescr => GetResourceString("TreeViewNodesDescr");
    /// <summary>The sorting comparer for the TreeView.</summary>
    internal static string @TreeViewNodeSorterDescr => GetResourceString("TreeViewNodeSorterDescr");
    /// <summary>The string delimiter used for the path returned by a node's FullPath property.</summary>
    internal static string @TreeViewPathSeparatorDescr => GetResourceString("TreeViewPathSeparatorDescr");
    /// <summary>Indicates whether the control will display scroll bars if it contains more nodes than can fit in the visible area.</summary>
    internal static string @TreeViewScrollableDescr => GetResourceString("TreeViewScrollableDescr");
    /// <summary>The default image index for selected nodes.</summary>
    internal static string @TreeViewSelectedImageIndexDescr => GetResourceString("TreeViewSelectedImageIndexDescr");
    /// <summary>The default image for selected nodes.</summary>
    internal static string @TreeViewSelectedImageKeyDescr => GetResourceString("TreeViewSelectedImageKeyDescr");
    /// <summary>The currently selected node, or null if no node is selected.</summary>
    internal static string @TreeViewSelectedNodeDescr => GetResourceString("TreeViewSelectedNodeDescr");
    /// <summary>Indicates whether lines are displayed between sibling nodes and between parent and child nodes.</summary>
    internal static string @TreeViewShowLinesDescr => GetResourceString("TreeViewShowLinesDescr");
    /// <summary>Indicates if plus/minus buttons are shown next to parent nodes.</summary>
    internal static string @TreeViewShowPlusMinusDescr => GetResourceString("TreeViewShowPlusMinusDescr");
    /// <summary>Indicates whether lines are displayed between root nodes.</summary>
    internal static string @TreeViewShowRootLinesDescr => GetResourceString("TreeViewShowRootLinesDescr");
    /// <summary>Indicates whether ToolTips will be displayed on the nodes.</summary>
    internal static string @TreeViewShowShowNodeToolTipsDescr => GetResourceString("TreeViewShowShowNodeToolTipsDescr");
    /// <summary>Indicates whether nodes are sorted.</summary>
    internal static string @TreeViewSortedDescr => GetResourceString("TreeViewSortedDescr");
    /// <summary>The ImageList control used by the TreeView for custom states.</summary>
    internal static string @TreeViewStateImageListDescr => GetResourceString("TreeViewStateImageListDescr");
    /// <summary>The first visible node in the TreeView.</summary>
    internal static string @TreeViewTopNodeDescr => GetResourceString("TreeViewTopNodeDescr");
    /// <summary>The number of visible nodes in the TreeView.</summary>
    internal static string @TreeViewVisibleCountDescr => GetResourceString("TreeViewVisibleCountDescr");
    /// <summary>Controls added to this collection must be of type '{0}'.</summary>
    internal static string @TypedControlCollectionShouldBeOfType => GetResourceString("TypedControlCollectionShouldBeOfType");
    /// <summary>Controls added to this collection must be of type '{0}' or '{1}'.</summary>
    internal static string @TypedControlCollectionShouldBeOfTypes => GetResourceString("TypedControlCollectionShouldBeOfTypes");
    /// <summary>ITypeInfo::GetDocumentation for DISPID 0x{0:X} returned hr=0x{1:X}, which will cause this property to be ignored. S_OK must be returned. Component={2}</summary>
    internal static string @TYPEINFOPROCESSORGetDocumentationFailed => GetResourceString("TYPEINFOPROCESSORGetDocumentationFailed");
    /// <summary>ITypeInfo::GetRefTypeInfo returned hr={0:X}, so the data type cannot be retrieved.</summary>
    internal static string @TYPEINFOPROCESSORGetRefTypeInfoFailed => GetResourceString("TYPEINFOPROCESSORGetRefTypeInfoFailed");
    /// <summary>ITypeInfo::GetTypeAttr returned hr={0:X}, so the data type cannot be retrieved.</summary>
    internal static string @TYPEINFOPROCESSORGetTypeAttrFailed => GetResourceString("TYPEINFOPROCESSORGetTypeAttrFailed");
    /// <summary>Type {0} in the data at line {1}, position {2} cannot be located.</summary>
    internal static string @TypeLoadException => GetResourceString("TypeLoadException");
    /// <summary>Type {0} cannot be located.</summary>
    internal static string @TypeLoadExceptionShort => GetResourceString("TypeLoadExceptionShort");
    /// <summary>Unable to initialize component.</summary>
    internal static string @UnableToInitComponent => GetResourceString("UnableToInitComponent");
    /// <summary>Unable to set the panel text.</summary>
    internal static string @UnableToSetPanelText => GetResourceString("UnableToSetPanelText");
    /// <summary>Unknown ATTRIBUTE type.</summary>
    internal static string @UnknownAttr => GetResourceString("UnknownAttr");
    /// <summary>Unknown layout</summary>
    internal static string @UnknownInputLanguageLayout => GetResourceString("UnknownInputLanguageLayout");
    /// <summary>Not implemented.</summary>
    internal static string @UnsafeNativeMethodsNotImplemented => GetResourceString("UnsafeNativeMethodsNotImplemented");
    /// <summary>Indicates how the up-down control will position the up and down buttons relative to its edit box.</summary>
    internal static string @UpDownBaseAlignmentDescr => GetResourceString("UpDownBaseAlignmentDescr");
    /// <summary>Indicates the border style of the up-down control.</summary>
    internal static string @UpDownBaseBorderStyleDescr => GetResourceString("UpDownBaseBorderStyleDescr");
    /// <summary>Down</summary>
    internal static string @UpDownBaseDownButtonAccName => GetResourceString("UpDownBaseDownButtonAccName");
    /// <summary>Indicates whether the up-down control will increment and decrement the value when the UP ARROW and DOWN ARROW keys are pressed.</summary>
    internal static string @UpDownBaseInterceptArrowKeysDescr => GetResourceString("UpDownBaseInterceptArrowKeysDescr");
    /// <summary>The preferred height of this control.</summary>
    internal static string @UpDownBasePreferredHeightDescr => GetResourceString("UpDownBasePreferredHeightDescr");
    /// <summary>Indicates whether the edit box is read-only.</summary>
    internal static string @UpDownBaseReadOnlyDescr => GetResourceString("UpDownBaseReadOnlyDescr");
    /// <summary>Indicates how the text should be aligned in the edit box.</summary>
    internal static string @UpDownBaseTextAlignDescr => GetResourceString("UpDownBaseTextAlignDescr");
    /// <summary>Up</summary>
    internal static string @UpDownBaseUpButtonAccName => GetResourceString("UpDownBaseUpButtonAccName");
    /// <summary>Specifies whether text rendering should be compatible with previous releases of Windows Forms.</summary>
    internal static string @UseCompatibleTextRenderingDescr => GetResourceString("UseCompatibleTextRenderingDescr");
    /// <summary>Indicates whether the panel should have a border.</summary>
    internal static string @UserControlBorderStyleDescr => GetResourceString("UserControlBorderStyleDescr");
    /// <summary>Occurs whenever the user control loads.</summary>
    internal static string @UserControlOnLoadDescr => GetResourceString("UserControlOnLoadDescr");
    /// <summary>Occurs when the value of the control changes.</summary>
    internal static string @valueChangedEventDescr => GetResourceString("valueChangedEventDescr");
    /// <summary>Visual Style handle creation operation did not succeed.</summary>
    internal static string @VisualStyleHandleCreationFailed => GetResourceString("VisualStyleHandleCreationFailed");
    /// <summary>Visual Styles-related operation resulted in an error because no visual style is currently active.</summary>
    internal static string @VisualStyleNotActive => GetResourceString("VisualStyleNotActive");
    /// <summary>Visual Styles-related operation resulted in an error because visual styles are currently disabled in the client area.</summary>
    internal static string @VisualStylesDisabledInClientArea => GetResourceString("VisualStylesDisabledInClientArea");
    /// <summary>Given combination of Class, Part, and State is not defined by the current visual style.</summary>
    internal static string @VisualStylesInvalidCombination => GetResourceString("VisualStylesInvalidCombination");
    /// <summary>The WebBrowser control does not support AllowDrop.  Use AllowWebBrowserDrop to allow the WebBrowser to process drag/drop.</summary>
    internal static string @WebBrowserAllowDropNotSupported => GetResourceString("WebBrowserAllowDropNotSupported");
    /// <summary>Specifies whether the WebBrowser control can browse to another page after initially loading.</summary>
    internal static string @WebBrowserAllowNavigationDescr => GetResourceString("WebBrowserAllowNavigationDescr");
    /// <summary>Specifies whether the WebBrowser control will receive drop notifications.</summary>
    internal static string @WebBrowserAllowWebBrowserDropDescr => GetResourceString("WebBrowserAllowWebBrowserDropDescr");
    /// <summary>The WebBrowser control does not support the BackgroundImageLayout property.</summary>
    internal static string @WebBrowserBackgroundImageLayoutNotSupported => GetResourceString("WebBrowserBackgroundImageLayoutNotSupported");
    /// <summary>The WebBrowser control does not support the BackgroundImage property.</summary>
    internal static string @WebBrowserBackgroundImageNotSupported => GetResourceString("WebBrowserBackgroundImageNotSupported");
    /// <summary>Occurs when the availability of a previous page in the Web browser navigation history changes.</summary>
    internal static string @WebBrowserCanGoBackChangedDescr => GetResourceString("WebBrowserCanGoBackChangedDescr");
    /// <summary>Occurs when the availability of a next page in the Web browser navigation history changes.</summary>
    internal static string @WebBrowserCanGoForwardChangedDescr => GetResourceString("WebBrowserCanGoForwardChangedDescr");
    /// <summary>The WebBrowser control does not support the Cursor property.</summary>
    internal static string @WebBrowserCursorNotSupported => GetResourceString("WebBrowserCursorNotSupported");
    /// <summary>Occurs when the document hosted in the Web browser control is fully loaded.</summary>
    internal static string @WebBrowserDocumentCompletedDescr => GetResourceString("WebBrowserDocumentCompletedDescr");
    /// <summary>Occurs whenever the title text changes.</summary>
    internal static string @WebBrowserDocumentTitleChangedDescr => GetResourceString("WebBrowserDocumentTitleChangedDescr");
    /// <summary>The WebBrowser control does not support the Enabled property.</summary>
    internal static string @WebBrowserEnabledNotSupported => GetResourceString("WebBrowserEnabledNotSupported");
    /// <summary>Occurs whenever encryption level changes.</summary>
    internal static string @WebBrowserEncryptionLevelChangedDescr => GetResourceString("WebBrowserEncryptionLevelChangedDescr");
    /// <summary>Occurs when a file download occurs.</summary>
    internal static string @WebBrowserFileDownloadDescr => GetResourceString("WebBrowserFileDownloadDescr");
    /// <summary>Determines whether the Web browser control operates in offline mode.</summary>
    internal static string @WebBrowserIsOfflineDescr => GetResourceString("WebBrowserIsOfflineDescr");
    /// <summary>Indicates whether to use the context menu of the native web browser.</summary>
    internal static string @WebBrowserIsWebBrowserContextMenuEnabledDescr => GetResourceString("WebBrowserIsWebBrowserContextMenuEnabledDescr");
    /// <summary>Navigation to a relative URL unsuccessful.</summary>
    internal static string @WebBrowserNavigateAbsoluteUri => GetResourceString("WebBrowserNavigateAbsoluteUri");
    /// <summary>Occurs after WebBrowser navigation occurs.</summary>
    internal static string @WebBrowserNavigatedDescr => GetResourceString("WebBrowserNavigatedDescr");
    /// <summary>Occurs before WebBrowser navigation occurs.</summary>
    internal static string @WebBrowserNavigatingDescr => GetResourceString("WebBrowserNavigatingDescr");
    /// <summary>Occurs when a new window is created for the WebBrowser.</summary>
    internal static string @WebBrowserNewWindowDescr => GetResourceString("WebBrowserNewWindowDescr");
    /// <summary>IWebBrowser2 get from the native ActiveX control did not succeed.</summary>
    internal static string @WebBrowserNoCastToIWebBrowser2 => GetResourceString("WebBrowserNoCastToIWebBrowser2");
    /// <summary>ObjectForScripting's class must be visible to COM.  Verify that the object is public, or consider adding the ComVisible attribute to your class.</summary>
    internal static string @WebBrowserObjectForScriptingComVisibleOnly => GetResourceString("WebBrowserObjectForScriptingComVisibleOnly");
    /// <summary>Occurs when an update to the progress of a download occurs.</summary>
    internal static string @WebBrowserProgressChangedDescr => GetResourceString("WebBrowserProgressChangedDescr");
    /// <summary>The WebBrowser control does not support the RightToLeft property.</summary>
    internal static string @WebBrowserRightToLeftNotSupported => GetResourceString("WebBrowserRightToLeftNotSupported");
    /// <summary>Specifies whether the WebBrowser control shows script errors in dialogs boxes.</summary>
    internal static string @WebBrowserScriptErrorsSuppressedDescr => GetResourceString("WebBrowserScriptErrorsSuppressedDescr");
    /// <summary>Specifies whether the WebBrowser control should have scrollbars or not.</summary>
    internal static string @WebBrowserScrollBarsEnabledDescr => GetResourceString("WebBrowserScrollBarsEnabledDescr");
    /// <summary>The level of security permissions the hosted documents are granted.</summary>
    internal static string @WebBrowserSecurityLevelDescr => GetResourceString("WebBrowserSecurityLevelDescr");
    /// <summary>Occurs whenever the status text changes.</summary>
    internal static string @WebBrowserStatusTextChangedDescr => GetResourceString("WebBrowserStatusTextChangedDescr");
    /// <summary>The WebBrowser control does not support the Text property.</summary>
    internal static string @WebBrowserTextNotSupported => GetResourceString("WebBrowserTextNotSupported");
    /// <summary>Specifies the URL that the Web browser control has navigated to.</summary>
    internal static string @WebBrowserUrlDescr => GetResourceString("WebBrowserUrlDescr");
    /// <summary>The WebBrowser control does not support the UseWaitCursor property.</summary>
    internal static string @WebBrowserUseWaitCursorNotSupported => GetResourceString("WebBrowserUseWaitCursorNotSupported");
    /// <summary>Specifies whether some accelerator keys are enabled in the WebBrowser control.</summary>
    internal static string @WebBrowserWebBrowserShortcutsEnabledDescr => GetResourceString("WebBrowserWebBrowserShortcutsEnabledDescr");
    /// <summary>Width must be greater than MinWidth.</summary>
    internal static string @WidthGreaterThanMinWidth => GetResourceString("WidthGreaterThanMinWidth");
    /// <summary>SetCompatibleTextRenderingDefault must be called before the first IWin32Window object is created in the application.</summary>
    internal static string @Win32WindowAlreadyCreated => GetResourceString("Win32WindowAlreadyCreated");
    /// <summary>Setting event '{0}'</summary>
    internal static string @WindowsFormsSetEvent => GetResourceString("WindowsFormsSetEvent");
    /// <summary>Occurs when the top level parent of this control is moved to a monitor with a different resolution and scaling level, or when parent's monitor scaling level is changed in Windows settings. Child windows receive this message before parent window receives Dp ...</summary>
    internal static string @ControlOnDpiChangedBeforeParentDescr => GetResourceString("ControlOnDpiChangedBeforeParentDescr");
    /// <summary>Occurs when the top level parent of this control is moved to a monitor with a different resolution and scaling level, or when parent's monitor scaling level is changed in Windows settings. Child windows receive this message after parent window receives Dpi ...</summary>
    internal static string @ControlOnDpiChangedAfterParentDescr => GetResourceString("ControlOnDpiChangedAfterParentDescr");
    /// <summary>Occurs when form is moved to a monitor with a different resolution and scaling level, or when form's monitor scaling level is changed in the Windows settings.</summary>
    internal static string @FormOnDpiChangedDescr => GetResourceString("FormOnDpiChangedDescr");
    /// <summary>System</summary>
    internal static string @MDIChildSystemMenuItemAccessibleName => GetResourceString("MDIChildSystemMenuItemAccessibleName");
    /// <summary>{0} selected.</summary>
    internal static string @MonthCalendarSingleDateSelected => GetResourceString("MonthCalendarSingleDateSelected");
    /// <summary>Year {0} selected.</summary>
    internal static string @MonthCalendarSingleYearSelected => GetResourceString("MonthCalendarSingleYearSelected");
    /// <summary>Year {0} to {1} selected.</summary>
    internal static string @MonthCalendarYearRangeSelected => GetResourceString("MonthCalendarYearRangeSelected");
    /// <summary>Decade {0} selected.</summary>
    internal static string @MonthCalendarSingleDecadeSelected => GetResourceString("MonthCalendarSingleDecadeSelected");
    /// <summary>{0} to {1} selected.</summary>
    internal static string @MonthCalendarRangeSelected => GetResourceString("MonthCalendarRangeSelected");
    /// <summary>Open</summary>
    internal static string @PropertyGridDropDownButtonComboBoxAccessibleName => GetResourceString("PropertyGridDropDownButtonComboBoxAccessibleName");
    /// <summary>Desktop applications are required to opt in to all earlier accessibility improvements to get the later improvements. To do this, ensure that if the AppContext switch 'Switch.UseLegacyAccessibilityFeatures.N' is set to 'false', then 'Switch.UseLegacyAccessi ...</summary>
    internal static string @CombinationOfAccessibilitySwitchesNotSupported => GetResourceString("CombinationOfAccessibilitySwitchesNotSupported");
    /// <summary>date and time picker</summary>
    internal static string @DateTimePickerLocalizedControlType => GetResourceString("DateTimePickerLocalizedControlType");
    /// <summary>Spinner</summary>
    internal static string @SpinnerAccessibleName => GetResourceString("SpinnerAccessibleName");
    /// <summary>The politeness level that a client should use to notify the user of changes to this live region.</summary>
    internal static string @LiveRegionAutomationLiveSettingDescr => GetResourceString("LiveRegionAutomationLiveSettingDescr");
    /// <summary>The corresponding UI element is not a live region.</summary>
    internal static string @AccessibleObjectLiveRegionNotSupported => GetResourceString("AccessibleObjectLiveRegionNotSupported");
    /// <summary>Owner control of the accessible object must implement IAutomationLiveRegion interface.</summary>
    internal static string @OwnerControlIsNotALiveRegion => GetResourceString("OwnerControlIsNotALiveRegion");
    /// <summary>Failed to get marshaler for IID {0}.</summary>
    internal static string @StandardOleMarshalObjectGetMarshalerFailed => GetResourceString("StandardOleMarshalObjectGetMarshalerFailed");
    /// <summary>Not sorted.</summary>
    internal static string @NotSortedAccessibleStatus => GetResourceString("NotSortedAccessibleStatus");
    /// <summary>Sorted ascending.</summary>
    internal static string @SortedAscendingAccessibleStatus => GetResourceString("SortedAscendingAccessibleStatus");
    /// <summary>Sorted descending.</summary>
    internal static string @SortedDescendingAccessibleStatus => GetResourceString("SortedDescendingAccessibleStatus");
    /// <summary>Sorted ascending by {0}.</summary>
    internal static string @DataGridViewSortedAscendingAccessibleStatusFormat => GetResourceString("DataGridViewSortedAscendingAccessibleStatusFormat");
    /// <summary>Sorted descending by {0}.</summary>
    internal static string @DataGridViewSortedDescendingAccessibleStatusFormat => GetResourceString("DataGridViewSortedDescendingAccessibleStatusFormat");
    /// <summary>{0} selected.</summary>
    internal static string @PropertyGridPropertyValueSelectedFormat => GetResourceString("PropertyGridPropertyValueSelectedFormat");
    /// <summary>ToolTips display on keyboard focus requires the following AppContextSwitchOverrides: 'Switch.UseLegacyAccessibilityFeatures.3' and 'Switch.System.Windows.Forms.UseLegacyToolTipDisplay'</summary>
    internal static string @KeyboardToolTipDisplayBehaviorRequiresAccessibilityImprovementsLevel3 => GetResourceString("KeyboardToolTipDisplayBehaviorRequiresAccessibilityImprovementsLevel3");
    /// <summary>Enable or disable automatic scaling of this control when dpi changes.</summary>
    internal static string @ControlDpiChangeScale => GetResourceString("ControlDpiChangeScale");
    /// <summary>DataGridView EditingPanel UI Automation provider</summary>
    internal static string @DataGridViewEditingPanelUiaProviderDescription => GetResourceString("DataGridViewEditingPanelUiaProviderDescription");
    /// <summary>{0} selected</summary>
    internal static string @ComboBoxValueSelectedFormat => GetResourceString("ComboBoxValueSelectedFormat");
    /// <summary>Clipboard contains an unexpected type.</summary>
    internal static string @UnexpectedClipboardType => GetResourceString("UnexpectedClipboardType");
    /// <summary>The specified Clipboard format is not compatible with '{0}' type.</summary>
    internal static string @UnexpectedTypeForClipboardFormat => GetResourceString("UnexpectedTypeForClipboardFormat");
    /// <summary>A value that indicates whether to use the value of the Description property as the dialog title for Vista style dialogs. This property has no effect on old style dialogs.</summary>
    internal static string @FolderBrowserDialogUseDescriptionForTitle => GetResourceString("FolderBrowserDialogUseDescriptionForTitle");
    /// <summary>Specifies the PlaceholderText of the TextBox control. The PlaceholderText is displayed in the control when the Text property is null or empty and can be used to guide the user what input is expected by the control.</summary>
    internal static string @TextBoxPlaceholderTextDescr => GetResourceString("TextBoxPlaceholderTextDescr");
    /// <summary>A circular reference has been made. A TreeNode cannot be added as a descendant of itself.</summary>
    internal static string @TreeNodeCircularReference => GetResourceString("TreeNodeCircularReference");
    /// <summary>NumericUpDown</summary>
    internal static string @DefaultNumericUpDownAccessibleName => GetResourceString("DefaultNumericUpDownAccessibleName");
    /// <summary>DomainUpDown</summary>
    internal static string @DefaultDomainUpDownAccessibleName => GetResourceString("DefaultDomainUpDownAccessibleName");
    /// <summary>UpDown</summary>
    internal static string @DefaultUpDownButtonsAccessibleName => GetResourceString("DefaultUpDownButtonsAccessibleName");
    /// <summary>Failed to set Win32 parent window of the Control.</summary>
    internal static string @Win32SetParentFailed => GetResourceString("Win32SetParentFailed");
    /// <summary>Error provider</summary>
    internal static string @ErrorProviderDefaultAccessibleName => GetResourceString("ErrorProviderDefaultAccessibleName");
    /// <summary>Available values</summary>
    internal static string @PropertyGridEntryValuesListDefaultAccessibleName => GetResourceString("PropertyGridEntryValuesListDefaultAccessibleName");
    /// <summary>The text of a custom button must not be null or an empty string.</summary>
    internal static string @TaskDialogButtonTextMustNotBeNull => GetResourceString("TaskDialogButtonTextMustNotBeNull");
    /// <summary>Cannot navigate the dialog when it has already closed.</summary>
    internal static string @TaskDialogCannotNavigateClosedDialog => GetResourceString("TaskDialogCannotNavigateClosedDialog");
    /// <summary>Cannot navigate the dialog from an event handler that is called from within navigation.</summary>
    internal static string @TaskDialogCannotNavigateWithinNavigationEventHandler => GetResourceString("TaskDialogCannotNavigateWithinNavigationEventHandler");
    /// <summary>Cannot navigate the dialog from within the {0} event of one of the radio buttons of the current task dialog.</summary>
    internal static string @TaskDialogCannotNavigateWithinRadioButtonCheckedChanged => GetResourceString("TaskDialogCannotNavigateWithinRadioButtonCheckedChanged");
    /// <summary>Cannot navigate from a page not bound to a dialog.</summary>
    internal static string @TaskDialogCannotNavigateWithoutDialog => GetResourceString("TaskDialogCannotNavigateWithoutDialog");
    /// <summary>Cannot remove the progress bar while the task dialog is shown.</summary>
    internal static string @TaskDialogCannotRemoveProgressBarWhileDialogIsShown => GetResourceString("TaskDialogCannotRemoveProgressBarWhileDialogIsShown");
    /// <summary>Cannot set this property or call this method while the page is bound to a task dialog.</summary>
    internal static string @TaskDialogCannotSetPropertyOfBoundPage => GetResourceString("TaskDialogCannotSetPropertyOfBoundPage");
    /// <summary>Cannot set this property while the task dialog is shown.</summary>
    internal static string @TaskDialogCannotSetPropertyOfShownDialog => GetResourceString("TaskDialogCannotSetPropertyOfShownDialog");
    /// <summary>Cannot set the {0} property from within the {1} event of one of the radio buttons of the current task dialog.</summary>
    internal static string @TaskDialogCannotSetRadioButtonCheckedWithinCheckedChangedEvent => GetResourceString("TaskDialogCannotSetRadioButtonCheckedWithinCheckedChangedEvent");
    /// <summary>Cannot uncheck a radio button while it is bound to a task dialog.</summary>
    internal static string @TaskDialogCannotUncheckRadioButtonWhileBound => GetResourceString("TaskDialogCannotUncheckRadioButtonWhileBound");
    /// <summary>Cannot manipulate the task dialog immediately after navigating it. Please wait for the {0} event of the next page to occur.</summary>
    internal static string @TaskDialogCannotUpdateAfterNavigation => GetResourceString("TaskDialogCannotUpdateAfterNavigation");
    /// <summary>Cannot update the icon from a handle icon type to a non-handle icon type, and vice versa.</summary>
    internal static string @TaskDialogCannotUpdateIconType => GetResourceString("TaskDialogCannotUpdateIconType");
    /// <summary>Can only update the state of a task dialog while it is shown.</summary>
    internal static string @TaskDialogCanUpdateStateOnlyWhenShown => GetResourceString("TaskDialogCanUpdateStateOnlyWhenShown");
    /// <summary>Horizontal</summary>
    internal static string @HScrollBarDefaultAccessibleName => GetResourceString("HScrollBarDefaultAccessibleName");
    /// <summary>Vertical</summary>
    internal static string @VScrollBarDefaultAccessibleName => GetResourceString("VScrollBarDefaultAccessibleName");
    /// <summary>One of the collections of this {0} is already bound to a {1} instance.</summary>
    internal static string @TaskDialogCollectionAlreadyBound => GetResourceString("TaskDialogCollectionAlreadyBound");
    /// <summary>This control has already been added to the collection.</summary>
    internal static string @TaskDialogControlAlreadyAddedToCollection => GetResourceString("TaskDialogControlAlreadyAddedToCollection");
    /// <summary>One of the controls of this {0} is already bound to a {1} instance.</summary>
    internal static string @TaskDialogControlAlreadyBound => GetResourceString("TaskDialogControlAlreadyBound");
    /// <summary>This control is already part of a different collection.</summary>
    internal static string @TaskDialogControlIsPartOfOtherCollection => GetResourceString("TaskDialogControlIsPartOfOtherCollection");
    /// <summary>This control is not currently bound to a task dialog.</summary>
    internal static string @TaskDialogControlNotBound => GetResourceString("TaskDialogControlNotBound");
    /// <summary>The control has not been created.</summary>
    internal static string @TaskDialogControlNotCreated => GetResourceString("TaskDialogControlNotCreated");
    /// <summary>This {0} instance is already being shown.</summary>
    internal static string @TaskDialogInstanceAlreadyShown => GetResourceString("TaskDialogInstanceAlreadyShown");
    /// <summary>Navigation of the task dialog did not complete yet. Please wait for the {0} event to occur.</summary>
    internal static string @TaskDialogNavigationNotCompleted => GetResourceString("TaskDialogNavigationNotCompleted");
    /// <summary>Visual styles are not enabled. Please call {0} before showing the task dialog.</summary>
    internal static string @TaskDialogVisualStylesNotEnabled => GetResourceString("TaskDialogVisualStylesNotEnabled");
    /// <summary>The default button must exist in the buttons collection.</summary>
    internal static string @TaskDialogDefaultButtonMustExistInCollection => GetResourceString("TaskDialogDefaultButtonMustExistInCollection");
    /// <summary>Only a single radio button can be set as checked.</summary>
    internal static string @TaskDialogOnlySingleRadioButtonCanBeChecked => GetResourceString("TaskDialogOnlySingleRadioButtonCanBeChecked");
    /// <summary>This {0} instance is already bound to a {1} instance.</summary>
    internal static string @TaskDialogPageIsAlreadyBound => GetResourceString("TaskDialogPageIsAlreadyBound");
    /// <summary>The text of a radio button must not be null or an empty string.</summary>
    internal static string @TaskDialogRadioButtonTextMustNotBeNull => GetResourceString("TaskDialogRadioButtonTextMustNotBeNull");
    /// <summary>Too many custom buttons or radio buttons have been added.</summary>
    internal static string @TaskDialogTooManyButtonsAdded => GetResourceString("TaskDialogTooManyButtonsAdded");
    /// <summary>Cannot set the text for a standard button.</summary>
    internal static string @TaskDialogCannotSetTextForStandardButton => GetResourceString("TaskDialogCannotSetTextForStandardButton");
    /// <summary>Cannot show both custom buttons and command links at the same time.</summary>
    internal static string @TaskDialogCannotShowCustomButtonsAndCommandLinks => GetResourceString("TaskDialogCannotShowCustomButtonsAndCommandLinks");
    /// <summary>The current window procedure is not the expected one.</summary>
    internal static string @WindowSubclassHandlerWndProcIsNotExceptedOne => GetResourceString("WindowSubclassHandlerWndProcIsNotExceptedOne");
    /// <summary>Event raised when the CollapsedState property of a ListViewGroup changes.</summary>
    internal static string @ListViewGroupCollapsedStateChangedDescr => GetResourceString("ListViewGroupCollapsedStateChangedDescr");
    /// <summary>Event raised when the TaskLink property of a ListViewGroup is clicked.</summary>
    internal static string @ListViewGroupTaskLinkClickDescr => GetResourceString("ListViewGroupTaskLinkClickDescr");
    /// <summary>Could not find an InputLanguage for culture '{0}'.</summary>
    internal static string @InputLanguageCultureNotFound => GetResourceString("InputLanguageCultureNotFound");
    /// <summary>The ImageList control used by the ListView for ListViewGroup images in all views.</summary>
    internal static string @ListViewGroupImageListDescr => GetResourceString("ListViewGroupImageListDescr");
    /// <summary>Argument '{0}' cannot be converted to type '{1}'.</summary>
    internal static string @ConstructorArgumentInvalidValueType => GetResourceString("ConstructorArgumentInvalidValueType");

}
